// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Bound closures
$$.Bound__completeError__Future = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib4$_name",
  call$2: function(p0, p1) {
    return this._target.call(this._self, p0, p1);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  }
}];

$$.Bound__run__ZoneTimer = [P, {"": "BoundClosure;_self,_target,_receiver,_liblib4$_name",
  call$0: function() {
    return this._target.call(this._self);
  },
  $is_void_: true
}];

$$.BoundClosure$1 = [M, {"": "BoundClosure;_self,_target,_receiver,_liblib4$_name",
  call$1: function(p0) {
    return this._target.call(this._self, p0);
  }
}];

$$.Closure$_processWorkerMessage = [H, {"": "Closure;call$2,$name"}];

$$.Closure$toStringWrapper = [H, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$invokeClosure = [H, {"": "Closure;call$5,$name"}];

$$.Closure$isAssignable = [H, {"": "Closure;call$2,$name"}];

$$.Closure$typeNameInChrome = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInSafari = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInOpera = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInFirefox = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInIE = [H, {"": "Closure;call$1,$name"}];

$$.Closure$constructorNameFallback = [H, {"": "Closure;call$1,$name"}];

$$.Closure$callDartFunctionWith1Arg = [H, {"": "Closure;call$2,$name"}];

$$.Closure$_asyncRunCallback = [P, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$_defaultEquals = [P, {"": "Closure;call$2,$name"}];

$$.Closure$_defaultHashCode = [P, {"": "Closure;call$1,$name"}];

$$.Closure$identical = [P, {"": "Closure;call$2,$name"}];

$$.Closure$main = [T, {"": "Closure;call$0,$name", $is_void_: true}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.interfaces) init.interfaces = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.interfaces[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = object[init.dispatchPropertyName];
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = H.lookupDispatchRecord(object);
  if (record == null)
    return C.C_UnknownJavaScriptObject;
  Object.defineProperty(Object.getPrototypeOf(object), init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return J.getNativeInterceptor(object);
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $asObject: null
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $asObject: null
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  },
  $asObject: null
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("add"));
    receiver.push(value);
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = new H.ListIterator(collection, collection.length, 0, null); t1.moveNext$0();)
      this.add$1(receiver, t1._liblib$_current);
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw H.wrapException(new P.ArgumentError(newLength));
    if (newLength < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(newLength)));
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(new P.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    receiver[index] = value;
  },
  $isList: true,
  $asInterceptor: null,
  $asList: null,
  $asObject: null,
  $isList: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  },
  $asObject: null
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  toInt$0: function(receiver) {
    var truncated;
    if (isNaN(receiver))
      throw H.wrapException(new P.UnsupportedError("NaN"));
    if (receiver == Infinity || receiver == -Infinity)
      throw H.wrapException(new P.UnsupportedError("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver > other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true,
  $asObject: null
},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $asObject: null, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true, $asObject: null},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    if (index >= receiver.length)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      H.throwExpression(new P.ArgumentError(endIndex));
    if (startIndex < 0)
      throw H.wrapException(new P.RangeError("value " + startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(new P.RangeError("value " + startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(new P.RangeError("value " + H.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    return receiver[index];
  },
  $asObject: null,
  $isString: true
}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(new P.UnsupportedError("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(new P.UnsupportedError("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        H.Primitives_printString(J.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(new P._ExceptionImplementation(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = P._Isolate_port();
  t1.toSendPort$0;
  J.send$2$x(replyTo, "spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id));
  topLevel.call$0();
},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_port<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isIsolateSink && J.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._port) + 499;
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $asObject: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(new P._ExceptionImplementation("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._liblib0$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true,
  $asObject: null,
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._liblib0$_length === 0)
      throw H.wrapException(new P._ExceptionImplementation("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._liblib0$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.postMessage$1;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    if (!this.this_0.runIteration$0())
      return;
    t1 = $.get$_Zone__current();
    t1.createTimer$2;
    t1 = new P._ZoneTimer(t1, this, null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._liblib3$_timer = P._createTimer(C.Duration_0, t1.get$_run());
  },
  $asObject: null,
  $is_void_: true
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  $is_IsolateEvent: true
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  $asObject: null,
  $is_void_: true
},

_BaseSendPort: {"": "Object;",
  _checkReplyTo$1: function(replyTo) {
    var t1;
    if (replyTo != null) {
      t1 = J.getInterceptor(replyTo);
      t1 = (typeof replyTo !== "object" || replyTo === null || !t1.$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !t1.$is_WorkerSendPort) && true;
    } else
      t1 = false;
    if (t1)
      throw H.wrapException(new P._ExceptionImplementation("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var t1, completer, port;
    t1 = null;
    completer = new P._AsyncCompleter(P._Future$(t1));
    H.setRuntimeTypeInfo(completer, [t1]);
    port = H.ReceivePortImpl$();
    this.send$2(this, message, new H._NativeJsSendPort(port, $globalState.currentContext.id));
    port._callback = new H._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  $asObject: null,
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1, t2;
    t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = J.getInterceptor(value);
    t2 = this.completer_0;
    if (typeof value === "object" && value !== null && !!t1.$isException) {
      t1 = t2.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(value, null);
    } else {
      t1 = t2.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncComplete$1(value);
    }
  },
  $asObject: null
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$2: function(_, message, replyTo) {
    H._waitForPendingPorts([message, replyTo], new H._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true,
  $asObject: null
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, t5, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    t5 = t2._isolateId;
    isolate = t4.$index(t4, t5);
    if (isolate == null)
      return;
    if (t2._receivePort.get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t5;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = H._serializeMessage(t1.msg_0);
      t1.reply_1 = H._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t3.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  },
  $asObject: null,
  $is_void_: true
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4._receivePort;
    if (t1.get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
        t2.reply_1 = H._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $asObject: null,
  $is_void_: true
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    H._waitForPendingPorts([message, replyTo], new H._WorkerSendPort_send_closure(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort)
      t1 = J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true,
  $asObject: null
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  $asObject: null,
  $is_void_: true
},

ReceivePortImpl: {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  ReceivePortImpl$0: function() {
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  $isReceivePort: true,
  $asObject: null,
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $asObject: null
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, new H._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    t1 = map.get$values(map);
    t1.forEach$1(t1, new H._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $asObject: null
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $asObject: null
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    var t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && !!t1.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!t1.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    var t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && !!t1.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!t1.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var result = new H.JsIsolateSink(false, this.visitSendPort$1(sink._port));
    result._isClosed = sink._isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, result;
    t1 = J.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    result = new H.JsIsolateSink(false, port);
    result._isClosed = t1.$index(list, 2);
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return C.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  },
  $asObject: null
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !H.isJsIndexable(list, list[init.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = P.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw H.ioore(list, i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw H.ioore(copy, i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(copy, i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $asObject: null
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)));
    t1 = map.get$values(map);
    return ["map", id, keys, this._serializeList$1(t1.toList$0(t1))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !H.isJsIndexable(list, list[init.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = P.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw H.ioore(list, i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw H.ioore(result, i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    for (t2 = result.length, i = 0; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !H.isJsIndexable(dartList, dartList[init.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw H.ioore(dartList, i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw H.ioore(dartList, i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !H.isJsIndexable(keys, keys[init.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !H.isJsIndexable(values, values[init.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw H.ioore(keys, i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw H.ioore(values, i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values) {
    switch (state0) {
      case 0:
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        t1 = J.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = J.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw H.iae(len);
        t2 = J.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
  },
  $asObject: null,
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  },
  $asObject: null,
  $is_void_: true
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  },
  $asObject: null,
  $is_void_: true
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(new P.ArgumentError(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(string);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = H.constructorNameFallback(J.getInterceptor(object));
  if (J.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = J.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = H.getRuntimeTypeInfo(object);
  return H.S($name) + H.joinArguments(t1, 0);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives_numMicroseconds: function() {
  if (typeof window != "undefined" && window !== null) {
    var performance = window.performance;
    if (performance != null && typeof performance.webkitNow == "function")
      return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
  }
  return 1000 * Date.now();
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._liblib$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(new P.ArgumentError(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._liblib$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i < 0)
      throw H.wrapException(new P.ArgumentError(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(new P.ArgumentError(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(new P.RangeError("value " + H.S(index)));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw H.wrapException(new P._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, H.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return type[0].builtin$cls + H.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

areSubtypes: function(s, t) {
  var len, i;
  if (s == null || t == null)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i)
    if (!H.isSubtype(s[i], t[i]))
      return false;
  return true;
},

isSupertypeOfNull: function(type) {
  return type == null || type.builtin$cls === "Object" || type.builtin$cls === "Null";
},

checkSubtypeOfRuntimeType: function(o, t) {
  var rti, type;
  if (o == null)
    return H.isSupertypeOfNull(t);
  if (t == null)
    return true;
  rti = H.getRuntimeTypeInfo(o);
  o = J.getInterceptor(o);
  if (rti != null) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return H.isSubtype(type, t);
},

isSubtype: function(s, t) {
  var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
  if (s === t)
    return true;
  if (s == null || t == null)
    return true;
  if ("func" in t) {
    if (!("func" in s)) {
      if ("$is_" + H.S(t.func) in s)
        return true;
      targetSignatureFunction = s.$signature;
      if (targetSignatureFunction == null)
        return false;
      s = targetSignatureFunction.apply(s, null);
    }
    return H.isFunctionSubtype(s, t);
  }
  if (t.builtin$cls === "Function" && "func" in s)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  typeOfS = t1 ? s[0] : s;
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  typeOfT = t2 ? t[0] : t;
  if (!("$is" + H.runtimeTypeToString(typeOfT) in typeOfS))
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + H.runtimeTypeToString(typeOfT)] : null;
  if (!t1 && substitution == null || !t2)
    return true;
  t1 = t1 ? s.slice(1) : null;
  t2 = t2 ? t.slice(1) : null;
  return H.areSubtypes(H.substitute(substitution, t1), t2);
},

isAssignable: function(s, t) {
  return H.isSubtype(s, t) || H.isSubtype(t, s);
},

areAssignable: function(s, t, allowShorter) {
  var sLength, tLength, i, t1, t2;
  if (t == null && s == null)
    return true;
  if (t == null)
    return allowShorter;
  if (s == null)
    return false;
  sLength = s.length;
  tLength = t.length;
  if (allowShorter) {
    if (sLength < tLength)
      return false;
  } else if (sLength !== tLength)
    return false;
  for (i = 0; i < tLength; ++i) {
    t1 = s[i];
    t2 = t[i];
    if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
      return false;
  }
  return true;
},

areAssignableMaps: function(s, t) {
  if (t == null)
    return true;
  if (s == null)
    return false;
  return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, H.isAssignable$closure)
  ;
},

isFunctionSubtype: function(s, t) {
  var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
  if (!("func" in s))
    return false;
  if ("void" in s) {
    if (!("void" in t) && "ret" in t)
      return false;
  } else if (!("void" in t)) {
    sReturnType = s.ret;
    tReturnType = t.ret;
    if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
      return false;
  }
  sParameterTypes = s.args;
  tParameterTypes = t.args;
  sOptionalParameterTypes = s.opt;
  tOptionalParameterTypes = t.opt;
  sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
  tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
  sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
  tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
  if (sParametersLen > tParametersLen)
    return false;
  if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
    return false;
  if (sParametersLen === tParametersLen) {
    if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
      return false;
    if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
      return false;
  } else {
    for (pos = 0; pos < sParametersLen; ++pos) {
      t1 = sParameterTypes[pos];
      t2 = tParameterTypes[pos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
      t1 = sOptionalParameterTypes[sPos];
      t2 = tParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (sPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
      t1 = tOptionalParameterTypes[sPos];
      t2 = tOptionalParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
  }
  return H.areAssignableMaps(s.named, t.named);
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

typeNameInChrome: function(obj) {
  return obj.constructor.name;
},

typeNameInSafari: function(obj) {
  return H.constructorNameFallback(obj);
},

typeNameInOpera: function(obj) {
  return H.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  var getTagFunction = H.getBaseFunctionForTypeNameOf();
  if (typeof dartExperimentalFixupGetTag == "function")
    return H.applyExperimentalFixup(dartExperimentalFixupGetTag, getTagFunction);
  return getTagFunction;
},

getBaseFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return H.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return H.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return H.typeNameInFirefox$closure;
  else if (userAgent.indexOf("Trident/") !== -1)
    return H.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return H.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return H.typeNameInSafari$closure;
  else
    return H.constructorNameFallback$closure;
},

applyExperimentalFixup: function(fixupJSFunction, originalGetTagDartFunction) {
  return new H.applyExperimentalFixup_newGetTagDartFunction(fixupJSFunction((function(invoke, closure){return function(arg){ return invoke(closure, arg); };})(H.callDartFunctionWith1Arg$closure.call$2, originalGetTagDartFunction)));
},

callDartFunctionWith1Arg: function(fn, arg) {
  return fn.call$1(arg);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.get$getTypeNameOf().call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  H.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  H.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsExtended: function(tags, interceptorClass, subclassInterceptorClasses) {
  var classes, t1, i;
  if ($.interceptorToTag == null)
    $.interceptorToTag = [];
  classes = subclassInterceptorClasses;
  for (t1 = classes.length, i = 0; i < t1; ++i) {
    $.interceptorToTag.push(classes[i]);
    $.interceptorToTag.push(tags);
  }
  H.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.get$getTypeNameOf().call$1(obj);
  interceptor = H.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = H.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = H.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return H.makeLeafDispatchRecord(interceptor);
  else
    return J.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true,
  $asObject: null
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  $asObject: null,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  $asObject: null
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  },
  $asObject: null
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $asObject: null,
  $is_void_: true
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $asObject: null,
  $is_void_: true
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $asObject: null,
  $is_void_: true
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $asObject: null
},

BoundClosure: {"": "Closure;_self,_target,_receiver,_liblib4$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
  },
  $isBoundClosure: true
},

TypeImpl: {"": "Object;_typeName,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = H.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true,
  $asObject: null
},

applyExperimentalFixup_newGetTagDartFunction: {"": "Closure;newGetTagJSFunction_0",
  call$1: function(object) {
    return this.newGetTagJSFunction_0(object);
  },
  $asObject: null
}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (srcStart !== (srcStart | 0))
    return H.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !H.isJsIndexable(dst, dst[init.dispatchPropertyName]))
    return H.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart) {
    i = srcStart + count - 1;
    if (i !== (i | 0))
      return H.Arrays_copy$bailout(2, src, srcStart, dst, dstStart, count, i);
    j = dstStart + count - 1;
    t1 = src.length;
    t2 = dst.length;
    for (; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw H.ioore(src, i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw H.ioore(dst, j);
      dst[j] = t3;
    }
  } else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= t2)
        throw H.ioore(src, i);
      t4 = src[i];
      if (j >>> 0 !== j || j >= t3)
        throw H.ioore(dst, j);
      dst[j] = t4;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count, i) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    case 2:
      var j, t1;
      if (state0 === 2 || state0 === 0 && srcStart < dstStart)
        switch (state0) {
          case 0:
            i = srcStart + count - 1;
          case 2:
            state0 = 0;
            j = dstStart + count - 1;
            for (; i >= srcStart; --i, --j) {
              if (i >>> 0 !== i || i >= src.length)
                throw H.ioore(src, i);
              C.JSArray_methods.$indexSet(dst, j, src[i]);
            }
        }
      else
        for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
          if (i >>> 0 !== i || i >= src.length)
            throw H.ioore(src, i);
          C.JSArray_methods.$indexSet(dst, j, src[i]);
        }
  }
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._liblib$_current);
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1;
  if (start < 0 || start > list.length) {
    t1 = list.length;
    throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + t1));
  }
  if (end < start || end > list.length) {
    t1 = list.length;
    throw H.wrapException(new P.RangeError("value " + H.S(end) + " not in range " + H.S(start) + ".." + t1));
  }
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(new P.StateError("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

Symbol_getName: function(symbol) {
  return symbol.get$_name();
},

ListIterator: {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (this._liblib$_length !== $length)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  },
  $asObject: null
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  $asObject: null
},

MappedIterator: {"": "Iterator;_liblib$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  },
  $asObject: null
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.WhereIterator(t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "WhereIterable", 0)]);
    return t1;
  },
  $asIterableBase: null,
  $asObject: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null,
  $asObject: null
},

FixedLengthListMixin: {"": "Object;"}}],
["dart._js_names", "dart:_js_names", , H, {
unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
}}],
["dart.async", "dart:async", , P, {
_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

runAsync: function(callback) {
  var currentZone = $.get$_Zone__current();
  currentZone.runAsync$2(callback, currentZone);
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._liblib$_current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.get$_Zone__current();
    t5.fork$0;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, null, null);
    result.$builtinTypeInfo = [null];
    t5 = result._zone;
    t5._openCallbacks = t5._openCallbacks + 1;
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if (P.getAttachedStackTrace(error) != null)
    return error;
  P._attachStackTrace(error, stackTrace);
  return error;
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$1(P._asyncError(e, s));
  }

},

_cancelAndError: function(subscription, future) {
  return new P._cancelAndError_closure(subscription, future);
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0;
      t1.completeError$2;
      t1 = t1.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(error, null);
    }
  },
  $asObject: null
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2.complete$1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  $asObject: null
},

_Completer: {"": "Object;", $asObject: null},

_AsyncCompleter: {"": "_Completer;future", $as_Completer: null, $asObject: null},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_onError: function() {
    return this._state === 2 ? null : this._onErrorCallback;
  },
  _onError$1: function(arg0) {
    return this.get$_onError().call$1(arg0);
  },
  then$2$onError: function(f, onError) {
    var t1, result;
    t1 = $.get$_Zone__current();
    t1.fork$0;
    result = new P._Future(0, t1, null, null, f, null, onError, null);
    result.$builtinTypeInfo = [null];
    t1 = result._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1, result;
    t1 = $.get$_Zone__current();
    t1.fork$0;
    result = new P._Future(0, t1, null, null, null, test, f, null);
    result.$builtinTypeInfo = [null];
    t1 = result._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  get$_liblib3$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$1: function(error) {
    this._state = 8;
    this._resultOrListeners = error;
  },
  _addListener$1: function(listener) {
    if (this._state >= 4)
      P.runAsync(new P._Future__addListener_closure(this, listener));
    else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners;
    if (stackTrace != null)
      P._attachStackTrace(error, stackTrace);
    listeners = this._state === 2 ? null : this._removeListeners$0();
    this._setError$1(error);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$1: function(error) {
    return this._completeError$2(error, null);
  },
  get$_completeError: function() {
    return new P.Bound__completeError__Future(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    var t1, t2;
    t1 = J.getInterceptor(value);
    t2 = typeof value === "object" && value !== null && !!t1.$isFuture;
    if (t2)
      ;
    if (t2)
      t1 = !t1.$is_Future || value._state < 4;
    else
      t1 = false;
    if (t1) {
      this._complete$1(value);
      return;
    }
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    P.runAsync(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    P.runAsync(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  $asObject: null,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = $.get$_Zone__current();
  t1.fork$0;
  t1 = new P._Future(0, t1, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = $.get$_Zone__current();
  t1.fork$0;
  t1 = new P._Future(0, t1, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._Future$immediate$1(value, $T);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target._state = 2;
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners.set$_nextListener(null);
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      t2.get$_zone().handleUncaughtError$1(t2.get$_error());
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t4 = t3.get$_errorZone() !== t4.get$_errorZone();
      t3 = t4;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      t2.get$_zone().handleUncaughtError$1(t2.get$_error());
      return;
    }
    t3 = $.get$_Zone__current();
    t4 = listeners._zone;
    if (t3 !== t4) {
      t4._runInZone$2(new P._Future__propagateToListeners_closure(t1, listeners), false);
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4._openCallbacks = t4._openCallbacks - 1;
    t4._runInZone$2(new P._Future__propagateToListeners_closure0(t2, t1, hasError, listeners), false);
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 8;
      listeners._resultOrListeners = t2;
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  },
  $asObject: null,
  $is_void_: true
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  $asObject: null
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$1: function(error) {
    this.target_1._completeError$1(error);
  },
  $asObject: null
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  },
  $asObject: null,
  $is_void_: true
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  },
  $asObject: null,
  $is_void_: true
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  },
  $asObject: null,
  $is_void_: true
},

_Future__propagateToListeners_closure0: {"": "Closure;box_1,box_2,hasError_4,listener_5",
  call$0: function() {
    var value, error, test, matchesTest, e, s, t1, t2, t3, exception;
    try {
      t1 = this.box_2;
      if (!this.hasError_4) {
        value = t1.source_4.get$_liblib3$_value();
        t1 = this.listener_5;
        t2 = t1._state === 2 ? null : t1._onValueCallback;
        t3 = this.box_1;
        if (t2 != null) {
          t3.listenerValueOrError_2 = t1._onValue$1(value);
          t3.listenerHasValue_1 = true;
        } else {
          t3.listenerValueOrError_2 = value;
          t3.listenerHasValue_1 = true;
        }
      } else {
        error = t1.source_4.get$_error();
        t1 = this.listener_5;
        test = t1._state === 2 ? null : t1._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(error);
        if (matchesTest === true)
          t2 = (t1._state === 2 ? null : t1._onErrorCallback) != null;
        else
          t2 = false;
        t3 = this.box_1;
        if (t2) {
          t3.listenerValueOrError_2 = t1._onError$1(error);
          t3.listenerHasValue_1 = true;
        } else {
          t3.listenerValueOrError_2 = error;
          t3.listenerHasValue_1 = false;
        }
      }
      t1 = this.listener_5;
      if (t1._state === 2)
        ;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = this.box_1;
      t1.listenerValueOrError_2 = P._asyncError(e, s);
      t1.listenerHasValue_1 = false;
    }

    t1 = this.box_1;
    if (t1.listenerHasValue_1 === true) {
      t1 = t1.listenerValueOrError_2;
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isFuture;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      t1 = this.listener_5._zone;
      t1._openCallbacks = t1._openCallbacks + 1;
    }
  },
  $asObject: null,
  $is_void_: true
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  $asObject: null
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$1: function(error) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$1(error);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  $asObject: null
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, t2, future;
    t1 = {};
    t2 = $.get$_Zone__current();
    t2.fork$0;
    future = new P._Future(0, t2, null, null, null, null, null, null);
    future.$builtinTypeInfo = [J.JSInt];
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  },
  toList$0: function(_) {
    var result, future;
    result = [];
    future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndError(this.box_0.subscription_0, this.future_3));
  },
  $asObject: null
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  },
  $asObject: null,
  $is_void_: true
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $asObject: null
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  },
  $asObject: null,
  $is_void_: true
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $asObject: null
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  },
  $asObject: null,
  $is_void_: true
},

Stream_toList_closure: {"": "Closure;this_0,result_1",
  call$1: function(data) {
    this.result_1.push(data);
  },
  $asObject: null
},

Stream_toList_closure0: {"": "Closure;result_2,future_3",
  call$0: function() {
    this.future_3._complete$1(this.result_2);
  },
  $asObject: null,
  $is_void_: true
},

StreamSubscription: {"": "Object;"},

EventSink: {"": "Object;"},

_EventSink: {"": "Object;"},

_cancelAndError_closure: {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._completeError$1(error);
  },
  $asObject: null
},

_ZoneBase: {"": "Object;",
  get$_errorZone: function() {
    return this._parentZone.get$_errorZone();
  },
  handleUncaughtError$1: function(error) {
    this._parentZone.handleUncaughtError$1(error);
  },
  _checkIfDone$0: function() {
    if (!this._isExecutingCallback && this._openCallbacks === 0 && this._childCount === 0)
      ;
  },
  _runInZone$2: function(f, handleUncaught) {
    var oldZone, oldIsExecuting, e, s, t1, exception;
    if ($.get$_Zone__current() === this && handleUncaught !== true && this._isExecutingCallback)
      return f.call$0();
    oldZone = $.get$_Zone__current();
    $._Zone__current = this;
    oldIsExecuting = this._isExecutingCallback;
    this._isExecutingCallback = true;
    try {
      try {
        t1 = f.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        if (handleUncaught === true)
          this.handleUncaughtError$1(P._asyncError(e, s));
        else
          throw exception;
      }

    } finally {
      this._isExecutingCallback = oldIsExecuting;
      $._Zone__current = oldZone;
      this._checkIfDone$0();
    }
  },
  runAsync$2: function(f, zone) {
    return this._parentZone.runAsync$2(f, zone);
  },
  $asObject: null
},

_DefaultZone: {"": "_ZoneBase;_parentZone,_childCount,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this;
  },
  handleUncaughtError$1: function(error) {
    var milliseconds;
    $.get$_asyncCallbacks()._add$1(new P._DefaultZone_handleUncaughtError_closure(error));
    if (!$._callbacksAreEnqueued) {
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  runAsync$2: function(f, zone) {
    if (this === zone) {
      P._scheduleAsyncCallback(f);
      return;
    }
    zone._openCallbacks = zone._openCallbacks + 1;
    P._scheduleAsyncCallback(new P._DefaultZone_runAsync_closure(f, zone));
  }
},

_DefaultZone_handleUncaughtError_closure: {"": "Closure;error_0",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    H.Primitives_printString("Uncaught Error: " + H.S(t1));
    trace = P.getAttachedStackTrace(t1);
    P._attachStackTrace(t1, null);
    if (trace != null)
      H.Primitives_printString("Stack Trace:\n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  },
  $asObject: null,
  $is_void_: true
},

_DefaultZone_runAsync_closure: {"": "Closure;f_0,zone_1",
  call$0: function() {
    var t1 = this.zone_1;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this.f_0, true);
  },
  $asObject: null,
  $is_void_: true
},

_ZoneTimer: {"": "Object;_zone<,_liblib3$_callback,_liblib3$_timer",
  _run$0: function() {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this._liblib3$_callback, true);
  },
  get$_run: function() {
    return new P.Bound__run__ZoneTimer(this, P._ZoneTimer.prototype._run$0, null, "_run$0");
  },
  $asObject: null
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1;
  if (hashCode == null) {
    if (equals == null) {
      t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
      H.setRuntimeTypeInfo(t1, [$K, $V]);
      return t1;
    }
    if (P.identical$closure == null ? equals == null : P.identical$closure === equals) {
      t1 = new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0);
      H.setRuntimeTypeInfo(t1, [$K, $V]);
      return t1;
    }
    hashCode = P._defaultHashCode$closure;
  } else if (equals == null)
    equals = P._defaultEquals$closure;
  return P._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_liblib0$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1, t2;
    t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    t2 = new H.MappedIterable(t1, new P._HashMap_values_closure(this));
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
    return t2;
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib0$_length = this._liblib0$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(new P.ConcurrentModificationError(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._liblib0$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  $asObject: null
},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $asObject: null
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(new P.ConcurrentModificationError(t1));
    }
  },
  $asIterableBase: null,
  $asObject: null
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  },
  $asObject: null
},

_LinkedHashMap: {"": "Object;_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1, t2;
    t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    t2 = new H.MappedIterable(t1, new P._LinkedHashMap_values_closure(this));
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
    return t2;
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, cell, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      cell = strings[key];
      if (cell == null)
        strings[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      cell = nums[key];
      if (cell == null)
        nums[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell._key, cell._value);
      if (modifications !== this._modifications)
        throw H.wrapException(new P.ConcurrentModificationError(this));
      cell = cell._next;
    }
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous._next = next;
    if (next == null)
      this._last = previous;
    else
      next._previous = previous;
    this._liblib0$_length = this._liblib0$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  $asObject: null
},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $asObject: null
},

_LinkedIdentityHashMap: {"": "_LinkedHashMap;_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  _findBucketIndex$2: function(bucket, key) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i].get$_key();
      if (t1 == null ? key == null : t1 === key)
        return i;
    }
    return -1;
  },
  $as_LinkedHashMap: null,
  $asMap: null,
  $asObject: null
},

_LinkedCustomHashMap: {"": "_LinkedHashMap;_equals,_hashCode,_validKey,_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  _equals$2: function(arg0, arg1) {
    return this._equals.call$2(arg0, arg1);
  },
  _hashCode$1: function(arg0) {
    return this._hashCode.call$1(arg0);
  },
  _validKey$1: function(arg0) {
    return this._validKey.call$1(arg0);
  },
  $index: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._LinkedHashMap.prototype.$index.call(this, this, key);
  },
  containsKey$1: function(key) {
    if (this._validKey$1(key) !== true)
      return false;
    return P._LinkedHashMap.prototype.containsKey$1.call(this, key);
  },
  remove$1: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._LinkedHashMap.prototype.remove$1.call(this, this, key);
  },
  _computeHashCode$1: function(key) {
    return this._hashCode$1(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (this._equals$2(bucket[i].get$_key(), key) === true)
        return i;
    return -1;
  },
  $as_LinkedHashMap: null,
  $asMap: null,
  $asObject: null,
  static: {
_LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
  var t1 = new P._LinkedCustomHashMap_closure($K);
  t1 = new P._LinkedCustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
}}

},

_LinkedCustomHashMap_closure: {"": "Closure;K_0",
  call$1: function(v) {
    var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
    return t1;
  },
  $asObject: null
},

LinkedHashMapCell: {"": "Object;_key<,_value@,_next<,_previous<"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell._key);
      if (modifications !== t1._modifications)
        throw H.wrapException(new P.ConcurrentModificationError(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $asObject: null
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1._key;
        this._cell = this._cell._next;
        return true;
      }
    }
  },
  $asObject: null
},

_HashSet: {"": "_HashSetBase;_liblib0$_length,_strings,_nums,_rest,_elements",
  get$iterator: function(_) {
    return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  contains$1: function(_, object) {
    var nums, rest;
    if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  add$1: function(_, element) {
    var nums, table, rest, hash, bucket;
    if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return;
        bucket.push(element);
      }
      this._liblib0$_length = this._liblib0$_length + 1;
      this._elements = null;
    }
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._liblib0$_length = this._liblib0$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._liblib0$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = 0;
    this._liblib0$_length = this._liblib0$_length + 1;
    this._elements = null;
  },
  _removeHashTableEntry$2: function(table, element) {
    if (table != null && table[element] != null) {
      delete table[element];
      this._liblib0$_length = this._liblib0$_length - 1;
      this._elements = null;
      return true;
    } else
      return false;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $asObject: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    else if (offset >= elements.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  },
  $asObject: null
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $asObject: null
},

HashSet: {"": "Object;", $asObject: null, static: {
HashSet_HashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._HashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
}}
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(new P.RangeError("value " + H.S(index)));
  },
  $asObject: null
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $asObject: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.forEach$1$bailout(1, action, receiver);
    $length = receiver.length;
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw H.ioore(receiver, i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw H.wrapException(new P.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(new P.ConcurrentModificationError(receiver));
    }
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) === 0)
      throw H.wrapException(new P.StateError("No elements"));
    return this.$index(receiver, 0);
  },
  where$1: function(receiver, test) {
    var t1 = new H.WhereIterable(receiver, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, receiver.length);
    } else {
      result = P.List_List(receiver.length, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  },
  toList$1$growable$bailout: function(state0, growable, receiver) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = P.List_List(this.get$length(receiver), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    for (i = 0; i < this.get$length(receiver); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toString$0: function(receiver) {
    var result, i, t1;
    for (i = 0; i < $.get$ListMixin__toStringList().length; ++i) {
      t1 = $.get$ListMixin__toStringList();
      if (i >= t1.length)
        throw H.ioore(t1, i);
      if (t1[i] === receiver)
        return "[...]";
    }
    result = P.StringBuffer$("");
    try {
      $.get$ListMixin__toStringList().push(receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$ListMixin__toStringList();
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $asObject: null
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  $asObject: null
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(new P.ConcurrentModificationError(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(new P.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      return this._add$1$bailout(1, element, t1, t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _add$1$bailout: function(state0, element, t1, t2) {
    var t3 = t1.length;
    if (t2 >>> 0 !== t2 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asObject: null,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_liblib0$_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(new P.ConcurrentModificationError(t1));
    t2 = this._liblib0$_position;
    if (t2 === this._end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._liblib0$_current = t3[t2];
    this._liblib0$_position = (this._liblib0$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  $asObject: null,
  static: {
_ListQueueIterator$: function(queue) {
  return new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
}}

}}],
["dart.convert", "dart:convert", , P, {
_convertJsonToDart: function(json, reviver) {
  var revive = reviver == null ? new P._convertJsonToDart_closure() : reviver;
  return revive.call$2(null, new P._convertJsonToDart_walk(revive).call$1(json));
},

_parseJson: function(source, reviver) {
  var parsed, e, t1, exception;
  t1 = source;
  if (typeof t1 !== "string")
    throw H.wrapException(new P.ArgumentError(source));
  parsed = null;
  try {
    parsed = JSON.parse(source);
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    throw H.wrapException(new P.FormatException(String(e)));
  }

  return P._convertJsonToDart(parsed, reviver);
},

_convertJsonToDart_closure: {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  $asObject: null
},

_convertJsonToDart_walk: {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  $asObject: null
},

Codec: {"": "Object;"},

Converter: {"": "Object;", $asObject: null},

JsonCodec: {"": "Codec;", $asObject: null},

JsonDecoder: {"": "Converter;_reviver", $asObject: null}}],
["dart.core", "dart:core", , P, {
_symbolToString: function(symbol) {
  return H.Symbol_getName(symbol);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

List_List: function($length, $E) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && fill != null)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    t3 = list[i];
    if (i >= t2)
      throw H.ioore(fixedList, i);
    fixedList[i] = t3;
  }
  return fixedList;
},

List_List$generate: function($length, generator, growable, $E) {
  var result, i, t1;
  if (growable) {
    result = [];
    C.JSArray_methods.set$length(result, $length);
  } else {
    result = P.List_List($length, $E);
    H.setRuntimeTypeInfo(result, [$E]);
  }
  if (typeof $length !== "number")
    throw H.iae($length);
  i = 0;
  for (; i < $length; ++i) {
    t1 = generator.call$1(i);
    if (i >= result.length)
      throw H.ioore(result, i);
    result[i] = t1;
  }
  return result;
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(P._symbolToString(key));
  },
  $asObject: null
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return new P.Duration(0 + (this._duration + other.get$_duration()));
  },
  $sub: function(_, other) {
    return new P.Duration(0 + (this._duration - other.get$_duration()));
  },
  $mul: function(_, factor) {
    var t1, truncated;
    t1 = C.JSNumber_methods.roundToDouble$0(this._duration * factor);
    if (isNaN(t1))
      H.throwExpression(new P.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      H.throwExpression(new P.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return new P.Duration(0 + (truncated == -0.0 ? 0 : truncated));
  },
  $lt: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return C.JSNumber_methods.$lt(this._duration, t1);
  },
  $gt: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return C.JSNumber_methods.$gt(this._duration, t1);
  },
  $ge: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return C.JSNumber_methods.$ge(this._duration, t1);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  $asObject: null,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  $asObject: null
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $asObject: null
},

Error: {"": "Object;", $isError: true},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  }
},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  }
},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  $isError: true,
  $asObject: null
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  },
  $isException: true,
  $asObject: null
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true,
  $asObject: null
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterator: {"": "Object;"},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  },
  $isObject: true,
  $asObject: null
},

StackTrace: {"": "Object;"},

Stopwatch: {"": "Object;_start,_stop",
  start$0: function(_) {
    var t1, t2, t3;
    t1 = this._start == null;
    if (!t1 && this._stop == null)
      return;
    if (t1)
      this._start = H.Primitives_numMicroseconds();
    else {
      t1 = H.Primitives_numMicroseconds();
      t2 = this._stop;
      t3 = this._start;
      if (t2 == null)
        throw t2.$sub();
      if (t3 == null)
        throw H.iae(t3);
      this._start = t1 - (t2 - t3);
      this._stop = null;
    }
  },
  reset$0: function(_) {
    if (this._start == null)
      return;
    this._start = H.Primitives_numMicroseconds();
    if (this._stop != null)
      this._stop = this._start;
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    if (t2 == null) {
      t1 = H.Primitives_numMicroseconds();
      t2 = this._start;
      if (t2 == null)
        throw H.iae(t2);
      t2 = t1 - t2;
      t1 = t2;
    } else {
      if (t2 == null)
        throw t2.$sub();
      if (t1 == null)
        throw H.iae(t1);
      t1 = t2 - t1;
    }
    return t1;
  }
},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  $asObject: null,
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"}}],
["dart.dom.html", "dart:html", , W, {
HttpRequest_getString: function(url, onProgress, withCredentials) {
  return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
},

HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
  var t1, completer, xhr, t2;
  t1 = W.HttpRequest;
  completer = new P._AsyncCompleter(P._Future$(t1));
  H.setRuntimeTypeInfo(completer, [t1]);
  xhr = new XMLHttpRequest();
  C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
  t1 = new W._EventStream(xhr, C.EventStreamProvider_load._eventType, false);
  H.setRuntimeTypeInfo(t1, [null]);
  t2 = new W._EventStreamSubscription(0, t1._liblib2$_target, t1._eventType, new W.HttpRequest_request_closure(completer, xhr), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
  t2 = new W._EventStream(xhr, C.EventStreamProvider_error._eventType, false);
  H.setRuntimeTypeInfo(t2, [null]);
  t1 = new W._EventStreamSubscription(0, t2._liblib2$_target, t2._eventType, new W.HttpRequest_request_closure0(completer), t2._useCapture);
  H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
  t1._tryResume$0();
  xhr.send();
  return completer.future;
},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;", $asObject: null},

CssStyleDeclarationBase: {"": "Object;",
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  set$position: function(receiver, value) {
    this.setProperty$3(receiver, "position", value, "");
  }
},

_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    this._element.replaceChild(value, t1[index]);
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    var t1 = this.toList$0(this);
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  get$first: function(_) {
    var result = this._element.firstElementChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  $asList: function() {
    return [W.Element];
  },
  $asObject: null
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $asObject: null, $isList: true},

HttpRequest_getString_closure: {"": "Closure;",
  call$1: function(xhr) {
    return J.get$responseText$x(xhr);
  },
  $asObject: null
},

HttpRequest_request_closure1: {"": "Closure;xhr_0",
  call$2: function(header, value) {
    this.xhr_0.setRequestHeader(header, value);
  },
  $asObject: null
},

HttpRequest_request_closure: {"": "Closure;completer_1,xhr_2",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_2;
    t2 = t1.status;
    if (t2 == null)
      throw t2.$ge();
    t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
    t3 = this.completer_1;
    if (t2) {
      t2 = t3.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    } else {
      t1 = t3.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(e, null);
    }
  },
  $asObject: null
},

HttpRequest_request_closure0: {"": "Closure;completer_3",
  call$1: function(e) {
    var t1 = this.completer_3.future;
    if (t1._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    t1._asyncCompleteError$2(e, null);
  },
  $asObject: null
},

_ChildNodeListLazy: {"": "ListBase;_this",
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $asObject: null
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $asObject: null, $isList: true},

_EventStream: {"": "Stream;_liblib2$_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._liblib2$_target, this._eventType, onData, this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  $asStream: null,
  $asObject: null
},

_ElementEventStreamImpl: {"": "_EventStream;_liblib2$_target,_eventType,_useCapture", $as_EventStream: null, $asObject: null},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_liblib2$_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._liblib2$_target == null)
      return;
    this._unlisten$0();
    this._liblib2$_target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.$$dom_addEventListener$3$x(this._liblib2$_target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.$$dom_removeEventListener$3$x(this._liblib2$_target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null,
  $asObject: null
},

EventStreamProvider: {"": "Object;_eventType"},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver);
  },
  $isList: true,
  $asList: null,
  $asObject: null
},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.moveNext$0$bailout(1, nextPosition, t1);
      if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
        throw H.ioore(t1, nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, nextPosition, t1) {
    switch (state0) {
      case 0:
        nextPosition = this._position + 1;
        t1 = this._length;
      case 1:
        if (state0 === 1 || state0 === 0 && nextPosition < t1)
          switch (state0) {
            case 0:
              t1 = this._array;
            case 1:
              state0 = 0;
              this._current = J.$index$asx(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  },
  $asObject: null,
  static: {
FixedSizeListIterator$: function(array) {
  return new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
}}

},

HtmlElement: {"": "Element;"},

AnchorElement: {"": "HtmlElement;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

CanvasElement: {"": "HtmlElement;height=,width=",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId, P.convertDartToNative_Dictionary(attrs));
  },
  getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil: function(receiver, alpha, antialias, depth, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    var options, context;
    options = H.fillLiteralMap(["alpha", alpha, "depth", depth, "stencil", stencil, "antialias", antialias, "premultipliedAlpha", premultipliedAlpha, "preserveDrawingBuffer", preserveDrawingBuffer], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    context = this.getContext$2(receiver, "webgl", options);
    return context == null ? this.getContext$2(receiver, "experimental-webgl", options) : context;
  },
  getContext3d$1$preserveDrawingBuffer: function($receiver, preserveDrawingBuffer) {
    return this.getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil($receiver, true, true, true, true, preserveDrawingBuffer, false);
  },
  $asObject: null
},

CanvasRenderingContext: {"": "Interceptor;"},

CharacterData: {"": "Node;length=", $asObject: null},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  },
  $asObject: null
},

DocumentFragment: {"": "Node;", $asObject: null},

DocumentType: {"": "Node;", $asObject: null},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

Element: {"": "Node;style=",
  get$children: function(receiver) {
    return new W._ChildrenElementList(receiver, receiver.children);
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  $isElement: true,
  $asElement: null,
  $asObject: null
},

EmbedElement: {"": "HtmlElement;height=,width="},

Event: {"": "Interceptor;",
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  }
},

EventTarget: {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  }
},

FormElement: {"": "HtmlElement;length="},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $asJavaScriptIndexingBehavior: null,
  $asObject: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

HttpRequest: {"": "XmlHttpRequestEventTarget;responseText=",
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  $isHttpRequest: true,
  $asHttpRequest: null
},

IFrameElement: {"": "HtmlElement;height=,width="},

ImageElement: {"": "HtmlElement;height=,width=,x=,y=", $asObject: null},

InputElement: {"": "HtmlElement;height=,width=", $isElement: true, $asElement: null, $asObject: null, $isNode: true, $asNode: null},

KeyboardEvent: {"": "UIEvent;",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  $isKeyboardEvent: true,
  $asKeyboardEvent: null
},

MediaElement: {"": "HtmlElement;"},

MouseEvent: {"": "UIEvent;", $isMouseEvent: true, $asMouseEvent: null},

Navigator: {"": "Interceptor;", $asObject: null},

Node: {"": "EventTarget;",
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      J._replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      H.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  _replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  $isNode: true,
  $asNode: null
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $asJavaScriptIndexingBehavior: null,
  $asObject: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

ObjectElement: {"": "HtmlElement;height=,width="},

ProgressEvent: {"": "Event;", $isProgressEvent: true, $asProgressEvent: null},

SelectElement: {"": "HtmlElement;length="},

UIEvent: {"": "Event;_keyCode:keyCode="},

VideoElement: {"": "MediaElement;height=,width=", $asObject: null},

Window: {"": "EventTarget;",
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $asObject: null
},

XmlHttpRequestEventTarget: {"": "EventTarget;"}}],
["dart.dom.svg", "dart:svg", , P, {
AElement: {"": "GraphicsElement;", $asObject: null},

AltGlyphElement: {"": "TextPositioningElement;", $asObject: null},

AnimationElement: {"": "SvgElement;", $asObject: null},

CircleElement: {"": "GraphicsElement;", $asObject: null},

ClipPathElement: {"": "GraphicsElement;", $asObject: null},

DefsElement: {"": "GraphicsElement;", $asObject: null},

EllipseElement: {"": "GraphicsElement;", $asObject: null},

FEBlendElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEColorMatrixElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEComponentTransferElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FECompositeElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEConvolveMatrixElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEDiffuseLightingElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEDisplacementMapElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEFloodElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEGaussianBlurElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEImageElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEMergeElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEMorphologyElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEOffsetElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FEPointLightElement: {"": "SvgElement;x=,y=,z="},

FESpecularLightingElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FESpotLightElement: {"": "SvgElement;x=,y=,z="},

FETileElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FETurbulenceElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

FilterElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

ForeignObjectElement: {"": "GraphicsElement;height=,width=,x=,y=", $asObject: null},

GElement: {"": "GraphicsElement;", $asObject: null},

GraphicsElement: {"": "SvgElement;", $asObject: null},

ImageElement0: {"": "GraphicsElement;height=,width=,x=,y=", $asObject: null},

LineElement: {"": "GraphicsElement;", $asObject: null},

MarkerElement: {"": "SvgElement;", $asObject: null},

MaskElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

PathElement: {"": "GraphicsElement;", $asObject: null},

PatternElement: {"": "SvgElement;height=,width=,x=,y=", $asObject: null},

PolygonElement: {"": "GraphicsElement;", $asObject: null},

PolylineElement: {"": "GraphicsElement;", $asObject: null},

Rect: {"": "Interceptor;x=,y%"},

RectElement: {"": "GraphicsElement;height=,width=,x=,y=", $asObject: null},

ScriptElement0: {"": "SvgElement;", $asObject: null},

SvgElement: {"": "Element;",
  get$children: function(receiver) {
    var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    t1.$builtinTypeInfo = [W.Element];
    return t1;
  }
},

SvgSvgElement: {"": "GraphicsElement;height=,width=,x=,y=", $asObject: null},

SwitchElement: {"": "GraphicsElement;", $asObject: null},

SymbolElement: {"": "SvgElement;", $asObject: null},

TextContentElement: {"": "GraphicsElement;", $asObject: null},

TextPathElement: {"": "TextContentElement;", $asObject: null},

TextPositioningElement: {"": "TextContentElement;x=,y="},

UseElement: {"": "GraphicsElement;height=,width=,x=,y=", $asObject: null},

ViewElement: {"": "SvgElement;", $asObject: null},

_GradientElement: {"": "SvgElement;", $asObject: null},

_SVGCursorElement: {"": "SvgElement;", $asObject: null},

_SVGFEDropShadowElement: {"": "SvgElement;", $asObject: null},

_SVGGlyphRefElement: {"": "SvgElement;", $asObject: null},

_SVGMPathElement: {"": "SvgElement;", $asObject: null},

_SVGTRefElement: {"": "TextPositioningElement;", $asObject: null}}],
["dart.dom.web_gl", "dart:web_gl", , P, {
RenderingContext: {"": "CanvasRenderingContext;",
  attachShader$2: function(receiver, program, shader) {
    return receiver.attachShader(program, shader);
  },
  bindBuffer$2: function(receiver, target, buffer) {
    return receiver.bindBuffer(target, buffer);
  },
  bufferDataTyped$3: function(receiver, target, data, usage) {
    return receiver.bufferData(target, data, usage);
  },
  clear$1: function(receiver, mask) {
    return receiver.clear(mask);
  },
  clearColor$4: function(receiver, red, green, blue, alpha) {
    return receiver.clearColor(red, green, blue, alpha);
  },
  compileShader$1: function(receiver, shader) {
    return receiver.compileShader(shader);
  },
  createBuffer$0: function(receiver) {
    return receiver.createBuffer();
  },
  createProgram$0: function(receiver) {
    return receiver.createProgram();
  },
  createShader$1: function(receiver, type) {
    return receiver.createShader(type);
  },
  cullFace$1: function(receiver, mode) {
    return receiver.cullFace(mode);
  },
  drawArrays$3: function(receiver, mode, first, count) {
    return receiver.drawArrays(mode, first, count);
  },
  drawElements$4: function(receiver, mode, count, type, offset) {
    return receiver.drawElements(mode, count, type, offset);
  },
  enable$1: function(receiver, cap) {
    return receiver.enable(cap);
  },
  enableVertexAttribArray$1: function(receiver, index) {
    return receiver.enableVertexAttribArray(index);
  },
  frontFace$1: function(receiver, mode) {
    return receiver.frontFace(mode);
  },
  getAttribLocation$2: function(receiver, program, $name) {
    return receiver.getAttribLocation(program, $name);
  },
  getProgramInfoLog$1: function(receiver, program) {
    return receiver.getProgramInfoLog(program);
  },
  getProgramParameter$2: function(receiver, program, pname) {
    return receiver.getProgramParameter(program, pname);
  },
  getShaderInfoLog$1: function(receiver, shader) {
    return receiver.getShaderInfoLog(shader);
  },
  getUniformLocation$2: function(receiver, program, $name) {
    return receiver.getUniformLocation(program, $name);
  },
  linkProgram$1: function(receiver, program) {
    return receiver.linkProgram(program);
  },
  shaderSource$2: function(receiver, shader, string) {
    return receiver.shaderSource(shader, string);
  },
  uniform1f$2: function(receiver, $location, x) {
    return receiver.uniform1f($location, x);
  },
  uniform1i$2: function(receiver, $location, x) {
    return receiver.uniform1i($location, x);
  },
  uniform3fv$2: function(receiver, $location, v) {
    return receiver.uniform3fv($location, v);
  },
  uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
    return receiver.uniformMatrix4fv($location, transpose, array);
  },
  useProgram$1: function(receiver, program) {
    return receiver.useProgram(program);
  },
  vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
    return receiver.vertexAttribPointer(indx, size, type, normalized, stride, offset);
  },
  viewport$4: function(receiver, x, y, width, height) {
    return receiver.viewport(x, y, width, height);
  }
},

UniformLocation: {"": "Interceptor;", $isUniformLocation: true, $asUniformLocation: null}}],
["dart.isolate", "dart:isolate", , P, {
_Isolate_port: function() {
  if ($.lazyPort == null)
    $.lazyPort = H.ReceivePortImpl$();
  return $.lazyPort;
},

ReceivePort: {"": "Object;", $isReceivePort: true}}],
["dart.json", "dart:json", , P, {
parse: function(json, reviver) {
  return P._parseJson(json, new P.JsonDecoder(reviver)._reviver);
},

parse_closure: {"": "Closure;original_0",
  call$2: function(key, value) {
    var t1 = key == null ? "" : key;
    return this.original_0.call$2(t1, value);
  },
  $asObject: null
}}],
["dart.math", "dart:math", , P, {
min: function(a, b) {
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0 && C.JSDouble_methods.get$isNegative(b) || isNaN(b))
      return b;
    return a;
  }
  return a;
},

max: function(a, b) {
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (isNaN(b))
      return b;
    return a;
  }
  if (b === 0 && C.JSNumber_methods.get$isNegative(a))
    return b;
  return a;
}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null, $asObject: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null, $asObject: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null, $asObject: null},

TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + $length));
    else
      throw H.wrapException(new P.ArgumentError("Invalid list index " + H.S(index)));
  }
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $asJavaScriptIndexingBehavior: null,
  $asObject: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $asObject: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $asObject: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
}}],
["fpsstats", "package:stats/stats.dart", , M, {
Stats: {"": "Object;_timer,_ms,_msMin,_msMax,_fps,_fpsMin,_fpsMax,_frames,_mode,container,fpsDiv,msDiv,msText,msGraph,fpsGraph,fpsText",
  _onContainerMouseDown$1: function(e) {
    var t1;
    J.preventDefault$0$x(e);
    t1 = this._mode + 1;
    this.set$mode(this, t1);
    this.set$mode(this, C.JSInt_methods.$mod(t1, 2));
  },
  get$_onContainerMouseDown: function() {
    return new M.BoundClosure$1(this, M.Stats.prototype._onContainerMouseDown$1, null, "_onContainerMouseDown$1");
  },
  _createUi$0: function() {
    var t1, t2, t3, bar;
    t1 = document.createElement("div");
    t1.id = "stats";
    t1.get$onMouseDown;
    t2 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_mousedown._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t3 = this.get$_onContainerMouseDown();
    t3 = new W._EventStreamSubscription(0, t2._liblib2$_target, t2._eventType, t3, t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    t1.style.cssText = "width:80px;opacity:0.9;cursor:pointer";
    this.container = t1;
    t1 = document.createElement("div");
    t1.id = "fps";
    t1.style.cssText = "padding:0 0 3px 3px;text-align:left;background-color:#002";
    this.fpsDiv = t1;
    this.container.appendChild(this.fpsDiv);
    t1 = document.createElement("div");
    t1.id = "fpsText";
    t1.style.cssText = "color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
    t1.textContent = "FPS";
    this.fpsText = t1;
    this.fpsDiv.appendChild(this.fpsText);
    t1 = document.createElement("div");
    t1.id = "fpsGraph";
    t1.style.cssText = "position:relative;width:74px;height:30px;background-color:#0ff";
    this.fpsGraph = t1;
    this.fpsDiv.appendChild(this.fpsGraph);
    for (; t1 = J.get$children$x(this.fpsGraph), t1.get$length(t1) < 74;) {
      bar = document.createElement("span");
      bar.style.cssText = "width:1px;height:30px;float:left;background-color:#113";
      this.fpsGraph.appendChild(bar);
    }
    t1 = document.createElement("div");
    t1.id = "ms";
    t1.style.cssText = "padding:0 0 3px 3px;text-align:left;background-color:#020;display:none";
    this.msDiv = t1;
    this.container.appendChild(this.msDiv);
    t1 = document.createElement("div");
    t1.id = "msText";
    t1.style.cssText = "color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
    t1.textContent = "MS";
    this.msText = t1;
    this.msDiv.appendChild(this.msText);
    t1 = document.createElement("div");
    t1.id = "msGraph";
    t1.style.cssText = "position:relative;width:74px;height:30px;background-color:#0f0";
    this.msGraph = t1;
    this.msDiv.appendChild(this.msGraph);
    for (; t1 = J.get$children$x(this.msGraph), t1.get$length(t1) < 74;) {
      bar = document.createElement("span");
      bar.style.cssText = "width:1px;height:30px;float:left;background-color:#131";
      this.msGraph.appendChild(bar);
    }
  },
  set$mode: function(_, value) {
    if (this._mode !== value) {
      this._mode = value;
      switch (this._mode) {
        case 0:
          J.set$display$x(this.fpsDiv.style, "block");
          J.set$display$x(this.msDiv.style, "none");
          break;
        case 1:
          J.set$display$x(this.fpsDiv.style, "none");
          J.set$display$x(this.msDiv.style, "block");
          break;
        default:
      }
    }
  },
  updateGraph$2: function(element, value) {
    var t1, t2, first;
    t1 = J.getInterceptor$x(element);
    t2 = t1.get$children(element);
    first = t2.get$first(t2);
    t1 = t1.get$children(element);
    t1.add$1(t1, first);
    J.set$height$x(J.get$style$x(first), H.S(C.JSNumber_methods.toInt$0(value)) + "px");
  },
  end$0: function() {
    var t1, time;
    t1 = this._timer;
    time = C.JSNumber_methods.$tdiv(t1.get$elapsedTicks() * 1000, 1000000);
    this._ms = C.JSNumber_methods.$tdiv(t1.get$elapsedTicks() * 1000, 1000000);
    this._msMin = P.min(this._msMin, this._ms);
    this._msMax = P.max(this._msMax, this._ms);
    this.msText.textContent = H.S(this._ms) + " MS (" + H.S(this._msMin) + " - " + H.S(this._msMax) + ")";
    this.updateGraph$2(this.msGraph, P.min(30, 30 - this._ms / 200 * 30));
    this._frames = this._frames + 1;
    if (time > 1000) {
      this._fps = C.JSNumber_methods.toInt$0(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._frames * 1000 / this._ms)));
      this._fpsMin = P.min(this._fpsMin, this._fps);
      this._fpsMax = P.max(this._fpsMax, this._fps);
      this.fpsText.textContent = H.S(this._fps) + " FPS (" + H.S(this._fpsMin) + " - " + H.S(this._fpsMax) + ")";
      this.updateGraph$2(this.fpsGraph, P.min(30, 30 - this._fps / 100 * 30));
      t1.reset$0(t1);
      this._frames = 0;
    }
    return time;
  }
}}],
["html_common", "dart:html_common", , P, {
convertDartToNative_Dictionary: function(dict) {
  var object = {};
  dict.forEach$1(dict, new P.convertDartToNative_Dictionary_closure(object));
  return object;
},

convertDartToNative_Dictionary_closure: {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  },
  $asObject: null
},

FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
  },
  forEach$1: function(_, f) {
    H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    J.replaceWith$1$x(t1[index], value);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1 = this.get$_filtered();
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  $asListBase: null,
  $asList: null,
  $asObject: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor(n);
    return typeof n === "object" && n !== null && !!t1.$isElement;
  },
  $asObject: null
}}],
["orange", "package:orange/orange.dart", , R, {
parseMesh: function(jsonStr) {
  var jsonObj, mesh, t1, submeshes;
  jsonObj = P.parse(jsonStr, null);
  mesh = new R.Mesh(null, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  mesh.Transform$0();
  t1 = J.getInterceptor$asx(jsonObj);
  mesh._geometry = R.parseGeometry(t1.$index(jsonObj, "sharedgeometry"));
  mesh.material = R.parseMaterial(t1.$index(jsonObj, "material"));
  mesh._faces = R.parseFaces(t1.$index(jsonObj, "faces"));
  submeshes = t1.$index(jsonObj, "submeshes");
  mesh._subMeshes = P.List_List$generate(J.get$length$asx(submeshes), new R.parseMesh_closure(submeshes), true, null);
  return mesh;
},

parseMaterial: function(materialJson) {
  var material, t1, ambient, diffuse, specular, emissive;
  if (materialJson == null)
    return;
  material = new R.Material(null, null, null, null, null, null, null, R.Color$fromHex(16777215), 5);
  t1 = J.getInterceptor$asx(materialJson);
  material.textureSource = t1.$index(materialJson, "texture");
  material.shader = $.get$Shader_simpleShader();
  ambient = t1.$index(materialJson, "ambient");
  material.ambient = P.List_List$generate(J.get$length$asx(ambient), new R.parseMaterial_closure(ambient), true, null);
  diffuse = t1.$index(materialJson, "diffuse");
  material.diffuse = P.List_List$generate(J.get$length$asx(diffuse), new R.parseMaterial_closure0(diffuse), true, null);
  specular = t1.$index(materialJson, "specular");
  material.specular = P.List_List$generate(J.get$length$asx(specular), new R.parseMaterial_closure1(specular), true, null);
  emissive = t1.$index(materialJson, "emissive");
  material.emissive = P.List_List$generate(J.get$length$asx(emissive), new R.parseMaterial_closure2(emissive), true, null);
  return material;
},

parseFaces: function(faceJson) {
  if (faceJson == null)
    return;
  return P.List_List$generate(J.get$length$asx(faceJson), new R.parseFaces_closure(faceJson), true, null);
},

parseGeometry: function(geo_dict) {
  var geometry, t1, vertices, normals, textureCoords;
  if (geo_dict == null)
    return;
  geometry = new R.Geometry(null, null, null, null, null, null);
  t1 = J.getInterceptor$asx(geo_dict);
  vertices = t1.$index(geo_dict, "vertices");
  geometry.vertices = P.List_List$generate(J.get$length$asx(vertices), new R.parseGeometry_closure(vertices), true, null);
  normals = t1.$index(geo_dict, "normals");
  geometry.normals = P.List_List$generate(J.get$length$asx(normals), new R.parseGeometry_closure0(normals), true, null);
  textureCoords = t1.$index(geo_dict, "texturecoords");
  geometry.textureCoords = P.List_List$generate(J.get$length$asx(textureCoords), new R.parseGeometry_closure1(textureCoords), true, null);
  return geometry;
},

Camera: {"": "Transform;",
  lookAt$1: function(target) {
    var t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setFrom$1(target);
    this._focusPosition = t1;
    this.rotation = T.Quaternion$fromRotation(T.makeViewMatrix(this.position, this._focusPosition, $.get$WORLD_UP()).getRotation$0());
    this.rotation.inverse$0();
  }
},

PerspectiveCamera: {"": "Camera;near,far,fov,projectionMatrix,_focusPosition,name,position,scale,rotation,_worldPosition,matrix,_globalMatrix,_normalMatrix,parent,children",
  updateProjection$0: function() {
    var t1, t2, t3, t4;
    t1 = this.fov;
    if (t1 == null)
      throw t1.$mul();
    t2 = $._director._canvas;
    t3 = J.getInterceptor$x(t2);
    t4 = t3.get$width(t2);
    t2 = t3.get$height(t2);
    if (typeof t4 !== "number")
      throw t4.$div();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    this.projectionMatrix = T.makePerspectiveMatrix(t1 * 0.017453292519943295, t4 / t2, this.near, this.far);
  },
  PerspectiveCamera$3: function(near, far, fov) {
    var t1;
    this.near = near;
    this.far = far;
    this.fov = fov;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(0, 0, -1);
    this.lookAt$1(t1);
    this.updateProjection$0();
  },
  static: {
PerspectiveCamera$: function(near, far, fov) {
  var t1 = new R.PerspectiveCamera(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Transform$0();
  t1.PerspectiveCamera$3(near, far, fov);
  return t1;
}}

},

Color: {"": "Object;red,green,blue",
  set$hex: function(hexColor) {
    var h = C.JSNumber_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(hexColor)));
    this.red = C.JSInt_methods.$shr(h & 16711680, 16) / 255;
    this.green = C.JSInt_methods.$shr(h & 65280, 8) / 255;
    this.blue = (h & 255) / 255;
  },
  get$rgb: function() {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.red;
    t2 = this.green;
    t3 = this.blue;
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t5 = t4.storage;
    t6 = C.JS_CONST_ZYJ(t5);
    if (0 >= t6)
      throw H.ioore(t5, 0);
    t5[0] = t1;
    if (1 >= t6)
      throw H.ioore(t5, 1);
    t5[1] = t2;
    if (2 >= t6)
      throw H.ioore(t5, 2);
    t5[2] = t3;
    return t4;
  },
  Color$fromHex$1: function(hexColor) {
    this.set$hex(hexColor);
  },
  static: {
Color$fromHex: function(hexColor) {
  var t1 = new R.Color(1, 1, 1);
  t1.Color$fromHex$1(hexColor);
  return t1;
}}

},

Director: {"": "Object;_canvas,_renderer,_scene,_lastElapsed,_keyboard",
  replace$1: function(scene) {
    var t1 = this._scene;
    if (t1 != null)
      t1.exit$0;
    this._scene = scene;
    this._scene.enter$0();
  },
  _animate$1: function(elapsed) {
    var t1, t2;
    if (typeof elapsed !== "number")
      return this._animate$1$bailout(1, elapsed);
    t1 = window;
    t2 = this.get$_animate();
    C.Window_methods._ensureRequestAnimationFrame$0(t1);
    C.Window_methods._requestAnimationFrame$1(t1, t2);
    t2 = this._lastElapsed;
    if (typeof t2 !== "number")
      return this._animate$1$bailout(2, elapsed, t2);
    this._renderer.prepare$0();
    this._scene.update$1(elapsed - t2);
    t2 = this._keyboard;
    C.JSArray_methods.set$length(t2._pressKeys, 0);
    C.JSArray_methods.set$length(t2._releaseKeys, 0);
    t2 = this._scene.camera;
    t2.updateMatrix$0;
    R.Transform.prototype.updateMatrix$0.call(t2);
    t2.matrix.invert$0();
    t2 = this._scene;
    t2.render$0;
    R.Transform.prototype.render$0.call(t2);
    t2._stats.end$0();
    this._lastElapsed = elapsed;
  },
  _animate$1$bailout: function(state0, elapsed, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = window;
        t2 = this.get$_animate();
        C.Window_methods._ensureRequestAnimationFrame$0(t1);
        C.Window_methods._requestAnimationFrame$1(t1, t2);
        t2 = this._lastElapsed;
      case 2:
        var t1, interval;
        state0 = 0;
        interval = J.$sub$n(elapsed, t2);
        this._renderer.prepare$0();
        this._scene.update$1(interval);
        t2 = this._keyboard;
        C.JSArray_methods.set$length(t2._pressKeys, 0);
        C.JSArray_methods.set$length(t2._releaseKeys, 0);
        t2 = this._scene.camera;
        t2.updateMatrix$0;
        R.Transform.prototype.updateMatrix$0.call(t2);
        t2.matrix.invert$0();
        t2 = this._scene;
        t2.render$0;
        R.Transform.prototype.render$0.call(t2);
        t2._stats.end$0();
        this._lastElapsed = elapsed;
    }
  },
  get$_animate: function() {
    return new M.BoundClosure$1(this, R.Director.prototype._animate$1, null, "_animate$1");
  },
  Director$_internal$1: function(_canvas) {
    this._renderer = R.Renderer$(this._canvas);
    this._keyboard = R.Keyboard$();
    this._lastElapsed = 0;
  },
  static: {
Director$_internal: function(_canvas) {
  var t1 = new R.Director(_canvas, null, null, null, null);
  t1.Director$_internal$1(_canvas);
  return t1;
}}

},

Geometry: {"": "Object;vertices,normals,textureCoords,vertexBuffer,normalBuffer,textureCoordsBuffer",
  prepare$1: function(renderer) {
    var t1, t2;
    if (this.vertexBuffer == null) {
      this.vertexBuffer = J.createBuffer$0$x(renderer.ctx);
      J.bindBuffer$2$x(renderer.ctx, 34962, this.vertexBuffer);
      t1 = renderer.ctx;
      t2 = new Float32Array(this.vertices);
      t2.$dartCachedLength = t2.length;
      J.bufferDataTyped$3$x(t1, 34962, t2, 35044);
    }
    if (this.normalBuffer == null && this.normals != null) {
      this.normalBuffer = J.createBuffer$0$x(renderer.ctx);
      J.bindBuffer$2$x(renderer.ctx, 34962, this.normalBuffer);
      t1 = renderer.ctx;
      t2 = new Float32Array(this.normals);
      t2.$dartCachedLength = t2.length;
      J.bufferDataTyped$3$x(t1, 34962, t2, 35044);
    }
    if (this.textureCoordsBuffer == null && this.textureCoords != null) {
      this.textureCoordsBuffer = J.createBuffer$0$x(renderer.ctx);
      J.bindBuffer$2$x(renderer.ctx, 34962, this.textureCoordsBuffer);
      t1 = renderer.ctx;
      t2 = new Float32Array(this.textureCoords);
      t2.$dartCachedLength = t2.length;
      J.bufferDataTyped$3$x(t1, 34962, t2, 35044);
    }
  }
},

Keyboard: {"": "Object;_keysState,_control,_pressKeys,_releaseKeys",
  _keyDownHandler$1: function(e) {
    var t1, t2;
    t1 = this._keysState;
    t2 = J.getInterceptor$x(e);
    if (!t1.contains$1(t1, t2.get$keyCode(e))) {
      t1.add$1(t1, t2.get$_keyCode(e));
      this._pressKeys.push(t2.get$_keyCode(e));
    }
  },
  get$_keyDownHandler: function() {
    return new M.BoundClosure$1(this, R.Keyboard.prototype._keyDownHandler$1, null, "_keyDownHandler$1");
  },
  _keyUpHandler$1: function(e) {
    var t1, t2;
    t1 = this._keysState;
    t2 = J.getInterceptor$x(e);
    if (t1.contains$1(t1, t2.get$keyCode(e))) {
      t1.remove$1(t1, t2.get$_keyCode(e));
      this._releaseKeys.push(t2.get$_keyCode(e));
    }
  },
  get$_keyUpHandler: function() {
    return new M.BoundClosure$1(this, R.Keyboard.prototype._keyUpHandler$1, null, "_keyUpHandler$1");
  },
  Keyboard$0: function() {
    var t1, t2;
    t1 = new W._EventStream(window, C.EventStreamProvider_keydown._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = this.get$_keyDownHandler();
    t2 = new W._EventStreamSubscription(0, t1._liblib2$_target, t1._eventType, t2, t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = new W._EventStream(window, C.EventStreamProvider_keyup._eventType, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t1 = this.get$_keyUpHandler();
    t1 = new W._EventStreamSubscription(0, t2._liblib2$_target, t2._eventType, t1, t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
  },
  static: {
Keyboard$: function() {
  var t1 = new R.Keyboard(P.HashSet_HashSet(null, null, null, J.JSInt), P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), [], []);
  t1.Keyboard$0();
  return t1;
}}

},

Light: {"": "Transform;color,intensity,angleFalloff,angle,type,name,position,scale,rotation,_worldPosition,matrix,_globalMatrix,_normalMatrix,parent,children", static: {
"": "Light_NONE,Light_AMBIENT,Light_DIRECT,Light_POINT,Light_SPOTLIGHT,Light_HEMISPHERE,Light_SPHERICAL_HARMONICS",
}
},

Material: {"": "Object;textureSource,ambient,diffuse,specular,emissive,shader,texture,color,shininess"},

Mesh: {"": "Transform;useSharedVertices<,wireframe,_geometry?,material,_faces,_faceBuffer,_subMeshes,name,position,scale,rotation,_worldPosition,matrix,_globalMatrix,_normalMatrix,parent,children",
  render$0: function() {
    var renderer, t1, t2;
    this.updateMatrix$0();
    renderer = $._director._renderer;
    t1 = this._geometry;
    if (t1 != null)
      t1.prepare$1(renderer);
    t1 = this.material;
    if (t1 != null) {
      if (t1.shader == null)
        t1.shader = $.get$Shader_simpleShader();
      this.material.shader.compile$0();
      t1 = this.material.shader;
      t1.use$0;
      J.useProgram$1$x($._director._renderer.ctx, t1.program);
      this.material.shader.setupAttributes$1(this);
      this.material.shader.setupUniforms$1(this);
      this.material.shader.setupLights$1($._director._scene.lights);
    }
    if (this._faceBuffer == null && this._faces != null) {
      this._faceBuffer = J.createBuffer$0$x(renderer.ctx);
      J.bindBuffer$2$x(renderer.ctx, 34963, this._faceBuffer);
      t1 = renderer.ctx;
      t2 = new Uint16Array(this._faces);
      t2.$dartCachedLength = t2.length;
      J.bufferDataTyped$3$x(t1, 34963, t2, 35044);
    }
    t1 = this._subMeshes;
    if (t1 != null && t1.length > 0) {
      t1.forEach$1;
      H.IterableMixinWorkaround_forEach(t1, new R.Mesh_render_closure(this));
    } else {
      t1 = this.wireframe;
      if (!t1 && this._faceBuffer != null) {
        J.bindBuffer$2$x(renderer.ctx, 34963, this._faceBuffer);
        J.drawElements$4$x(renderer.ctx, 4, this._faces.length, 5123, 0);
      } else if (t1) {
        t1 = renderer.ctx;
        t2 = this._geometry.vertices.length;
        if (3 == null)
          throw H.iae(3);
        J.drawArrays$3$x(t1, 3, 0, C.JSInt_methods.$tdiv(t2, 3));
      }
    }
  },
  computeVertexNormals$0: function() {
    var t1, faceNormals, vertices, i, t2, startVertex, t3, t4, t5, v0, t6, v1, v2, normal, j, vertex, vertexNormal;
    t1 = this._faces;
    if (t1 == null)
      return;
    faceNormals = P.List_List$filled(t1.length, null, null);
    vertices = this._geometry.vertices;
    for (t1 = faceNormals.length, i = 0; t2 = this._faces, i < t2.length; i += 3) {
      startVertex = J.$mul$n(t2[i], 3);
      t2 = vertices.length;
      if (startVertex >>> 0 !== startVertex || startVertex >= t2)
        throw H.ioore(vertices, startVertex);
      t3 = J.toDouble$0$n(vertices[startVertex]);
      t4 = startVertex + 1;
      if (t4 >= t2)
        throw H.ioore(vertices, t4);
      t4 = J.toDouble$0$n(vertices[t4]);
      t5 = startVertex + 2;
      if (t5 >= t2)
        throw H.ioore(vertices, t5);
      t5 = J.toDouble$0$n(vertices[t5]);
      t2 = new Float32Array(3);
      t2.$dartCachedLength = t2.length;
      v0 = new T.Vector3(t2);
      t2 = v0.storage;
      t6 = C.JS_CONST_ZYJ(t2);
      if (0 >= t6)
        throw H.ioore(t2, 0);
      t2[0] = t3;
      if (1 >= t6)
        throw H.ioore(t2, 1);
      t2[1] = t4;
      if (2 >= t6)
        throw H.ioore(t2, 2);
      t2[2] = t5;
      t5 = this._faces;
      t2 = i + 1;
      if (t2 >= t5.length)
        throw H.ioore(t5, t2);
      startVertex = J.$mul$n(t5[t2], 3);
      t2 = vertices.length;
      if (startVertex >>> 0 !== startVertex || startVertex >= t2)
        throw H.ioore(vertices, startVertex);
      t5 = J.toDouble$0$n(vertices[startVertex]);
      t6 = startVertex + 1;
      if (t6 >= t2)
        throw H.ioore(vertices, t6);
      t6 = J.toDouble$0$n(vertices[t6]);
      t4 = startVertex + 2;
      if (t4 >= t2)
        throw H.ioore(vertices, t4);
      t4 = J.toDouble$0$n(vertices[t4]);
      t2 = new Float32Array(3);
      t2.$dartCachedLength = t2.length;
      v1 = new T.Vector3(t2);
      t2 = v1.storage;
      t3 = C.JS_CONST_ZYJ(t2);
      if (0 >= t3)
        throw H.ioore(t2, 0);
      t2[0] = t5;
      if (1 >= t3)
        throw H.ioore(t2, 1);
      t2[1] = t6;
      if (2 >= t3)
        throw H.ioore(t2, 2);
      t2[2] = t4;
      t4 = this._faces;
      t2 = i + 2;
      if (t2 >= t4.length)
        throw H.ioore(t4, t2);
      startVertex = J.$mul$n(t4[t2], 3);
      t2 = vertices.length;
      if (startVertex >>> 0 !== startVertex || startVertex >= t2)
        throw H.ioore(vertices, startVertex);
      t4 = J.toDouble$0$n(vertices[startVertex]);
      t3 = startVertex + 1;
      if (t3 >= t2)
        throw H.ioore(vertices, t3);
      t3 = J.toDouble$0$n(vertices[t3]);
      t6 = startVertex + 2;
      if (t6 >= t2)
        throw H.ioore(vertices, t6);
      t6 = J.toDouble$0$n(vertices[t6]);
      t2 = new Float32Array(3);
      t2.$dartCachedLength = t2.length;
      v2 = new T.Vector3(t2);
      t2 = v2.storage;
      t5 = C.JS_CONST_ZYJ(t2);
      if (0 >= t5)
        throw H.ioore(t2, 0);
      t2[0] = t4;
      if (1 >= t5)
        throw H.ioore(t2, 1);
      t2[1] = t3;
      if (2 >= t5)
        throw H.ioore(t2, 2);
      t2[2] = t6;
      normal = v1.$sub(v1, v0).cross$1(v2.$sub(v2, v0)).normalize$0();
      for (j = 0; j < 3; ++j) {
        t2 = this._faces;
        t3 = i + j;
        if (t3 >= t2.length)
          throw H.ioore(t2, t3);
        vertex = t2[t3];
        if (vertex >>> 0 !== vertex || vertex >= t1)
          throw H.ioore(faceNormals, vertex);
        if (faceNormals[vertex] == null) {
          t2 = new Float32Array(3);
          t2.$dartCachedLength = t2.length;
          t2 = new T.Vector3(t2);
          t2.setFrom$1(normal);
          faceNormals[vertex] = t2;
        } else {
          t2 = new Float32Array(3);
          t2.$dartCachedLength = t2.length;
          t2 = new T.Vector3(t2);
          t2.setFrom$1(normal);
          faceNormals[vertex] = t2.$add(t2, faceNormals[vertex]).normalize$0();
        }
      }
    }
    vertexNormal = [];
    H.IterableMixinWorkaround_forEach(faceNormals, new R.Mesh_computeVertexNormals_closure(vertexNormal));
    this._geometry.normals = vertexNormal;
  }
},

Mesh_render_closure: {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2, t3, t4;
    t1 = this.this_0;
    t2 = J.getInterceptor$x(e);
    t2.set$position(e, J.clone$0$x(t1.position));
    e.set$rotation(T.Quaternion$copy(t1.rotation));
    t3 = t1.scale;
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setFrom$1(t3);
    t2.set$scale(e, t4);
    if (e.get$useSharedVertices() === true)
      e.set$_geometry(t1._geometry);
    e.render$0();
  },
  $asObject: null
},

Mesh_computeVertexNormals_closure: {"": "Closure;vertexNormal_0",
  call$1: function(fn) {
    var t1, t2;
    if (fn != null) {
      t1 = this.vertexNormal_0;
      t2 = J.getInterceptor$x(fn);
      t1.push(t2.get$x(fn));
      t1.push(t2.get$y(fn));
      t1.push(t2.get$z(fn));
    }
  },
  $asObject: null
},

parseMesh_closure: {"": "Closure;submeshes_0",
  call$1: function(index) {
    var submesh, sub, t1;
    submesh = J.$index$asx(this.submeshes_0, index);
    sub = new R.Mesh(null, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    sub.Transform$0();
    t1 = J.getInterceptor$asx(submesh);
    sub.useSharedVertices = t1.$index(submesh, "usesharedvertices");
    if (sub.useSharedVertices !== true)
      sub._geometry = R.parseGeometry(t1.$index(submesh, "geometry"));
    sub.material = R.parseMaterial(t1.$index(submesh, "material"));
    sub._faces = R.parseFaces(t1.$index(submesh, "faces"));
    return sub;
  },
  $asObject: null
},

parseMaterial_closure: {"": "Closure;ambient_0",
  call$1: function(i) {
    return J.toDouble$0$n(J.$index$asx(this.ambient_0, i));
  },
  $asObject: null
},

parseMaterial_closure0: {"": "Closure;diffuse_1",
  call$1: function(i) {
    return J.toDouble$0$n(J.$index$asx(this.diffuse_1, i));
  },
  $asObject: null
},

parseMaterial_closure1: {"": "Closure;specular_2",
  call$1: function(i) {
    return J.toDouble$0$n(J.$index$asx(this.specular_2, i));
  },
  $asObject: null
},

parseMaterial_closure2: {"": "Closure;emissive_3",
  call$1: function(i) {
    return J.toDouble$0$n(J.$index$asx(this.emissive_3, i));
  },
  $asObject: null
},

parseFaces_closure: {"": "Closure;faceJson_0",
  call$1: function(i) {
    return J.toInt$0$n(J.$index$asx(this.faceJson_0, i));
  },
  $asObject: null
},

parseGeometry_closure: {"": "Closure;vertices_0",
  call$1: function(index) {
    return J.toDouble$0$n(J.$index$asx(this.vertices_0, index));
  },
  $asObject: null
},

parseGeometry_closure0: {"": "Closure;normals_1",
  call$1: function(index) {
    return J.toDouble$0$n(J.$index$asx(this.normals_1, index));
  },
  $asObject: null
},

parseGeometry_closure1: {"": "Closure;textureCoords_2",
  call$1: function(index) {
    return J.toDouble$0$n(J.$index$asx(this.textureCoords_2, index));
  },
  $asObject: null
},

Cube: {"": "Mesh;useSharedVertices,wireframe,_geometry,material,_faces,_faceBuffer,_subMeshes,name,position,scale,rotation,_worldPosition,matrix,_globalMatrix,_normalMatrix,parent,children",
  Cube$3: function(width, height, depth) {
    var hw, hh, hd, t1, t2, t3;
    hw = width / 2;
    hh = height / 2;
    hd = depth / 2;
    this._geometry = new R.Geometry(null, null, null, null, null, null);
    t1 = -hw;
    t2 = -hh;
    t3 = -hd;
    this._geometry.vertices = [t1, t2, hd, hw, t2, hd, hw, hh, hd, t1, hh, hd, t1, t2, t3, t1, hh, t3, hw, hh, t3, hw, t2, t3, t1, hh, t3, t1, hh, hd, hw, hh, hd, hw, hh, t3, t1, t2, t3, hw, t2, t3, hw, t2, hd, t1, t2, hd, hw, t2, t3, hw, hh, t3, hw, hh, hd, hw, t2, hd, t1, t2, t3, t1, t2, hd, t1, hh, hd, t1, hh, t3];
    this._geometry.normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0];
    this._faces = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];
    this.material = new R.Material(null, null, null, null, null, null, null, R.Color$fromHex(16777215), 5);
    this.material.shader = $.get$Shader_simpleShader();
  },
  static: {
Cube$: function(width, height, depth) {
  var t1 = new R.Cube(null, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Transform$0();
  t1.Cube$3(width, height, depth);
  return t1;
}}

},

Sphere: {"": "Mesh;useSharedVertices,wireframe,_geometry,material,_faces,_faceBuffer,_subMeshes,name,position,scale,rotation,_worldPosition,matrix,_globalMatrix,_normalMatrix,parent,children",
  Sphere$3: function(radius, segmentsWidth, segmentsHeight) {
    var segmentsX, segmentsY, vertices, uvs, t1, y, v, x, u, t2, t3, t4, t5, t6, t7, t8, t9, o, vt1, vt2, vt3, vt4, uv1, uv2, uv3, uv4, n1, n2, n3, n4, truncated, p;
    segmentsX = P.max(3, C.JSNumber_methods.toInt$0(Math.floor(segmentsWidth)));
    segmentsY = P.max(3, C.JSNumber_methods.toInt$0(Math.floor(segmentsHeight)));
    vertices = [];
    uvs = [];
    for (t1 = -radius, y = 0; y <= segmentsY; ++y)
      for (v = y / segmentsY, x = 0; x <= segmentsX; ++x) {
        u = x / segmentsX;
        t2 = 0 + u * 6.283185307179586;
        t3 = Math.cos(t2);
        t4 = 0 + v * 3.141592653589793;
        t5 = Math.sin(t4);
        t6 = Math.cos(t4);
        t2 = Math.sin(t2);
        t4 = Math.sin(t4);
        t7 = new Float32Array(3);
        t7.$dartCachedLength = t7.length;
        t7 = new T.Vector3(t7);
        t8 = t7.storage;
        t9 = C.JS_CONST_ZYJ(t8);
        if (0 >= t9)
          throw H.ioore(t8, 0);
        t8[0] = t1 * t3 * t5;
        if (1 >= t9)
          throw H.ioore(t8, 1);
        t8[1] = radius * t6;
        if (2 >= t9)
          throw H.ioore(t8, 2);
        t8[2] = radius * t2 * t4;
        vertices.push(t7);
        t7 = new Float32Array(2);
        t7.$dartCachedLength = t7.length;
        t7 = new T.Vector2(t7);
        t4 = t7.storage;
        t2 = C.JS_CONST_ZYJ(t4);
        if (0 >= t2)
          throw H.ioore(t4, 0);
        t4[0] = u;
        if (1 >= t2)
          throw H.ioore(t4, 1);
        t4[1] = 1 - v;
        uvs.push(t7);
      }
    this._geometry = new R.Geometry(null, null, null, null, null, null);
    this._geometry.vertices = [];
    this._geometry.textureCoords = [];
    this._geometry.normals = [];
    this._faces = [];
    for (o = segmentsX + 1, y = 0; y < segmentsY;)
      for (t1 = y * o, ++y, t2 = y * o, x = 0; x < segmentsX; ++x) {
        t3 = t1 + x;
        t4 = t3 + 0;
        t5 = vertices.length;
        if (t4 >>> 0 !== t4 || t4 >= t5)
          throw H.ioore(vertices, t4);
        vt1 = vertices[t4];
        ++t3;
        if (t3 >>> 0 !== t3 || t3 >= t5)
          throw H.ioore(vertices, t3);
        vt2 = vertices[t3];
        t6 = t2 + x;
        t7 = t6 + 1;
        if (t7 >>> 0 !== t7 || t7 >= t5)
          throw H.ioore(vertices, t7);
        vt3 = vertices[t7];
        t6 += 0;
        if (t6 >>> 0 !== t6 || t6 >= t5)
          throw H.ioore(vertices, t6);
        vt4 = vertices[t6];
        t5 = uvs.length;
        if (t4 >= t5)
          throw H.ioore(uvs, t4);
        uv1 = uvs[t4];
        if (t3 >= t5)
          throw H.ioore(uvs, t3);
        uv2 = uvs[t3];
        if (t7 >= t5)
          throw H.ioore(uvs, t7);
        uv3 = uvs[t7];
        if (t6 >= t5)
          throw H.ioore(uvs, t6);
        uv4 = uvs[t6];
        n1 = vt1.clone$0(vt1).normalize$0();
        n2 = vt2.clone$0(vt2).normalize$0();
        n3 = vt3.clone$0(vt3).normalize$0();
        n4 = vt4.clone$0(vt4).normalize$0();
        t6 = Math.floor(this._geometry.vertices.length / 3);
        if (isNaN(t6))
          H.throwExpression(new P.UnsupportedError("NaN"));
        if (t6 == Infinity || t6 == -Infinity)
          H.throwExpression(new P.UnsupportedError("Infinity"));
        truncated = t6 < 0 ? Math.ceil(t6) : Math.floor(t6);
        p = truncated == -0.0 ? 0 : truncated;
        J.addAll$1$ax(this._geometry.vertices, [vt1.get$x(vt1), vt1.get$y(vt1), vt1.get$z(vt1), vt2.get$x(vt2), vt2.get$y(vt2), vt2.get$z(vt2), vt3.get$x(vt3), vt3.get$y(vt3), vt3.get$z(vt3), vt4.get$x(vt4), vt4.get$y(vt4), vt4.get$z(vt4)]);
        J.addAll$1$ax(this._geometry.textureCoords, [uv1.$index(uv1, 0), uv1.$index(uv1, 1), uv2.$index(uv2, 0), uv2.$index(uv2, 1), uv3.$index(uv3, 0), uv3.$index(uv3, 1), uv4.$index(uv4, 0), uv4.$index(uv4, 1)]);
        J.addAll$1$ax(this._geometry.normals, [n1.get$x(n1), n1.get$y(n1), n1.get$z(n1), n2.get$x(n2), n2.get$y(n2), n2.get$z(n2), n3.get$x(n3), n3.get$y(n3), n3.get$z(n3), n4.get$x(n4), n4.get$y(n4), n4.get$z(n4)]);
        t3 = p + 0;
        t4 = p + 2;
        J.addAll$1$ax(this._faces, [t3, p + 1, t4, t3, t4, p + 3]);
      }
    this.material = new R.Material(null, null, null, null, null, null, null, R.Color$fromHex(16777215), 5);
    this.material.shader = $.get$Shader_simpleShader();
  },
  static: {
Sphere$: function(radius, segmentsWidth, segmentsHeight) {
  var t1 = new R.Sphere(null, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Transform$0();
  t1.Sphere$3(radius, segmentsWidth, segmentsHeight);
  return t1;
}}

},

Plane: {"": "Mesh;useSharedVertices,wireframe,_geometry,material,_faces,_faceBuffer,_subMeshes,name,position,scale,rotation,_worldPosition,matrix,_globalMatrix,_normalMatrix,parent,children",
  Plane$2: function(width, height) {
    var hw, hh, t1, t2;
    hw = width / 2;
    hh = height / 2;
    this._geometry = new R.Geometry(null, null, null, null, null, null);
    t1 = -hw;
    t2 = -hh;
    this._geometry.vertices = [t1, 0, hh, hw, 0, hh, hw, 0, t2, t1, 0, t2];
    this._faces = [0, 1, 2, 0, 2, 3];
    this.material = new R.Material(null, null, null, null, null, null, null, R.Color$fromHex(16777215), 5);
    this.material.shader = $.get$Shader_simpleShader();
    this.computeVertexNormals$0();
  },
  static: {
Plane$: function(width, height) {
  var t1 = new R.Plane(null, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Transform$0();
  t1.Plane$2(width, height);
  return t1;
}}

},

Renderer: {"": "Object;ctx",
  prepare$0: function() {
    var t1, t2, t3;
    t1 = this.ctx;
    t2 = $._director._canvas;
    t3 = J.getInterceptor$x(t2);
    J.viewport$4$x(t1, 0, 0, t3.get$width(t2), t3.get$height(t2));
    J.clear$1$ax(this.ctx, 16640);
    J.clearColor$4$x(this.ctx, 0, 0, 0, 1);
  },
  Renderer$1: function(canvas) {
    this.ctx = J.getContext3d$1$preserveDrawingBuffer$x(canvas, true);
    J.enable$1$x(this.ctx, 2929);
    J.frontFace$1$x(this.ctx, 2305);
    J.cullFace$1$x(this.ctx, 1029);
    J.enable$1$x(this.ctx, 2884);
  },
  static: {
Renderer$: function(canvas) {
  var t1 = new R.Renderer(null);
  t1.Renderer$1(canvas);
  return t1;
}}

},

Scene: {"": "Transform;"},

Shader: {"": "Object;",
  compile$0: function() {
    var ctx, t1, vertexShader, fragmentShader;
    if (this.program == null) {
      ctx = $._director._renderer.ctx;
      t1 = J.getInterceptor$x(ctx);
      vertexShader = t1.createShader$1(ctx, 35633);
      t1.shaderSource$2(ctx, vertexShader, this.vertexSource);
      t1.compileShader$1(ctx, vertexShader);
      fragmentShader = t1.createShader$1(ctx, 35632);
      t1.shaderSource$2(ctx, fragmentShader, this.fragmentSource);
      t1.compileShader$1(ctx, fragmentShader);
      this.program = t1.createProgram$0(ctx);
      t1.attachShader$2(ctx, this.program, vertexShader);
      t1.attachShader$2(ctx, this.program, fragmentShader);
      t1.linkProgram$1(ctx, this.program);
      if (t1.getProgramParameter$2(ctx, this.program, 35714) !== true) {
        H.Primitives_printString(J.toString$0(t1.getShaderInfoLog$1(ctx, vertexShader)));
        H.Primitives_printString(J.toString$0(t1.getShaderInfoLog$1(ctx, fragmentShader)));
        H.Primitives_printString(J.toString$0(t1.getProgramInfoLog$1(ctx, this.program)));
      }
      this._initAttributes$0();
      this._initUniforms$0();
    }
  }
},

SimpleShader: {"": "Shader;MAX_LIGHTS,vertexPositionAttribute,vertexNormalAttribute,projectionMatrixUniform,modelMatrixUniform,viewMatrixUniform,normalMatrixUniform,cameraPositionUniform,colorUniform,shininessUniform,lightsUniform,name,vertexSource,fragmentSource,program",
  _initAttributes$0: function() {
    var ctx, t1;
    ctx = $._director._renderer.ctx;
    t1 = J.getInterceptor$x(ctx);
    this.vertexPositionAttribute = t1.getAttribLocation$2(ctx, this.program, "aVertexPosition");
    t1.enableVertexAttribArray$1(ctx, this.vertexPositionAttribute);
    this.vertexNormalAttribute = t1.getAttribLocation$2(ctx, this.program, "aVertexNormal");
    t1.enableVertexAttribArray$1(ctx, this.vertexNormalAttribute);
  },
  _initUniforms$0: function() {
    var ctx, t1, t2, i, lightSource, t3;
    ctx = $._director._renderer.ctx;
    t1 = J.getInterceptor$x(ctx);
    this.projectionMatrixUniform = t1.getUniformLocation$2(ctx, this.program, "uProjectionMatrix");
    this.modelMatrixUniform = t1.getUniformLocation$2(ctx, this.program, "uModelMatrix");
    this.viewMatrixUniform = t1.getUniformLocation$2(ctx, this.program, "uViewMatrix");
    this.normalMatrixUniform = t1.getUniformLocation$2(ctx, this.program, "uNormalMatrix");
    this.cameraPositionUniform = t1.getUniformLocation$2(ctx, this.program, "uCameraPosition");
    this.colorUniform = t1.getUniformLocation$2(ctx, this.program, "uColor");
    this.shininessUniform = t1.getUniformLocation$2(ctx, this.program, "uShininess");
    t2 = this.MAX_LIGHTS;
    this.lightsUniform = P.List_List(t2, null);
    for (i = 0; i < t2; ++i) {
      lightSource = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.UniformLocation);
      lightSource.$indexSet(lightSource, "type", t1.getUniformLocation$2(ctx, this.program, "uLight" + i + ".type"));
      lightSource.$indexSet(lightSource, "direction", t1.getUniformLocation$2(ctx, this.program, "uLight" + i + ".direction"));
      lightSource.$indexSet(lightSource, "position", t1.getUniformLocation$2(ctx, this.program, "uLight" + i + ".position"));
      lightSource.$indexSet(lightSource, "color", t1.getUniformLocation$2(ctx, this.program, "uLight" + i + ".color"));
      lightSource.$indexSet(lightSource, "intensity", t1.getUniformLocation$2(ctx, this.program, "uLight" + i + ".intensity"));
      lightSource.$indexSet(lightSource, "angleFalloff", t1.getUniformLocation$2(ctx, this.program, "uLight" + i + ".angleFalloff"));
      lightSource.$indexSet(lightSource, "angle", t1.getUniformLocation$2(ctx, this.program, "uLight" + i + ".angle"));
      t3 = this.lightsUniform;
      if (i >= t3.length)
        throw H.ioore(t3, i);
      t3[i] = lightSource;
    }
  },
  setupAttributes$1: function(mesh) {
    var ctx, t1, t2;
    ctx = $._director._renderer.ctx;
    t1 = mesh._geometry;
    if (t1 != null) {
      t2 = J.getInterceptor$x(ctx);
      t2.bindBuffer$2(ctx, 34962, t1.vertexBuffer);
      t2.vertexAttribPointer$6(ctx, this.vertexPositionAttribute, 3, 5126, false, 0, 0);
      t2.bindBuffer$2(ctx, 34962, mesh._geometry.normalBuffer);
      t2.vertexAttribPointer$6(ctx, this.vertexNormalAttribute, 3, 5126, false, 0, 0);
    }
  },
  setupUniforms$1: function(mesh) {
    var ctx, tmp, t1, t2, t3, t4, t5, t6, normalMatrix;
    ctx = $._director._renderer.ctx;
    tmp = new Float32Array(P.List_List$filled(16, 0, null));
    tmp.$dartCachedLength = tmp.length;
    $._director._scene.camera.projectionMatrix.copyIntoArray$1(tmp);
    t1 = J.getInterceptor$x(ctx);
    t1.uniformMatrix4fv$3(ctx, this.projectionMatrixUniform, false, tmp);
    $._director._scene.camera.matrix.copyIntoArray$1(tmp);
    t1.uniformMatrix4fv$3(ctx, this.viewMatrixUniform, false, tmp);
    t1.uniform3fv$2(ctx, this.cameraPositionUniform, this.vector3ToFloat32List$1($._director._scene.camera.position));
    mesh.matrix.copyIntoArray$1(tmp);
    t1.uniformMatrix4fv$3(ctx, this.modelMatrixUniform, false, tmp);
    t2 = this.colorUniform;
    t3 = mesh.material.color;
    t4 = t3.red;
    t5 = t3.green;
    t3 = t3.blue;
    t6 = new Float32Array(3);
    t6.$dartCachedLength = t6.length;
    t6 = new T.Vector3(t6);
    t6.setValues$3(t4, t5, t3);
    t1.uniform3fv$2(ctx, t2, this.vector3ToFloat32List$1(t6));
    t1.uniform1f$2(ctx, this.shininessUniform, mesh.material.shininess);
    t6 = new Float32Array(16);
    t6.$dartCachedLength = t6.length;
    normalMatrix = new T.Matrix4(t6);
    normalMatrix.copyInverse$1(mesh.matrix);
    normalMatrix.transpose$0();
    normalMatrix.copyIntoArray$1(tmp);
    t1.uniformMatrix4fv$3(ctx, this.normalMatrixUniform, false, tmp);
  },
  setupLights$1: function(lights) {
    var ctx, t1, t2, i, t3, lightSource, light, t4, t5;
    ctx = $._director._renderer.ctx;
    for (t1 = this.MAX_LIGHTS, t2 = J.getInterceptor$x(ctx), i = 0; i < t1; ++i) {
      t3 = this.lightsUniform;
      if (i >= t3.length)
        throw H.ioore(t3, i);
      lightSource = t3[i];
      if (i < lights.length) {
        light = lights[i];
        t2.uniform1i$2(ctx, lightSource.$index(lightSource, "type"), light.type);
        t3 = lightSource.$index(lightSource, "direction");
        t4 = light.position;
        t5 = J.getInterceptor$x(t4);
        t4 = new Float32Array([t5.get$x(t4), t5.get$y(t4), t5.get$z(t4)]);
        t4.$dartCachedLength = t4.length;
        t2.uniform3fv$2(ctx, t3, t4);
        t4 = lightSource.$index(lightSource, "color");
        t3 = light.color.get$rgb();
        t3 = new Float32Array([t3.get$x(t3), t3.get$y(t3), t3.get$z(t3)]);
        t3.$dartCachedLength = t3.length;
        t2.uniform3fv$2(ctx, t4, t3);
        t3 = lightSource.$index(lightSource, "position");
        t4 = light.position;
        t5 = J.getInterceptor$x(t4);
        t4 = new Float32Array([t5.get$x(t4), t5.get$y(t4), t5.get$z(t4)]);
        t4.$dartCachedLength = t4.length;
        t2.uniform3fv$2(ctx, t3, t4);
      } else
        t2.uniform1i$2(ctx, lightSource.$index(lightSource, "type"), -1);
    }
  },
  vector3ToFloat32List$1: function(vec) {
    var t1 = J.getInterceptor$x(vec);
    t1 = new Float32Array([t1.get$x(vec), t1.get$y(vec), t1.get$z(vec)]);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  SimpleShader$_internal$0: function() {
    this.name = "simpleShader";
    this.vertexSource = "attribute vec3 aVertexPosition;\nattribute highp vec3 aVertexNormal;\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uModelMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uNormalMatrix;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n\nvoid main(void) {\n  vec4 pos = uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);\n  gl_Position = uProjectionMatrix * pos;\n  vPosition = pos.xyz;\n  vNormal = normalize((uNormalMatrix * vec4(aVertexNormal, 0.0)).xyz);\n}\n";
    this.fragmentSource = "precision mediump float;\n\nuniform vec3 uMaterialAmbient;\nuniform vec3 uMaterialDiffuse;\nuniform vec3 uMaterialSpecular;\nuniform vec3 uCameraPosition;\nuniform vec3 uColor;\nuniform float uShininess;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n\nstruct lightSource {\n  int type;\n\n  vec3 direction;     // used by directional and spotlight (global direction of the transfom)\n  vec3 position;      // used by hemisphere, point, spotlight (it's the global position of the transform)\n  vec3 color;    \n};\n\nuniform lightSource uLight0;\nuniform lightSource uLight1;\nuniform lightSource uLight2;\nuniform lightSource uLight3;\n\nvec3 phong(vec3 position, vec3 normal, lightSource ls) {\n  vec3 N = normal;\n  vec3 P = normalize(position);\n  vec3 L;\n  // point light\n  if(ls.type == 1){\n    L = normalize(ls.position);\n  }else if(ls.type == 2){\n    L = normalize(ls.position - position);\n  }\n\n  //diffuse term\n  float diffuseAngle = max(dot(N, L), 0.0);\n  vec3 diffuse = ls.color * diffuseAngle;\n\n  //specular term\n  vec3 specular = vec3(0.0, 0.0, 0.0);\n  if(diffuseAngle > 0.0){\n    vec3 V = normalize(uCameraPosition - position);\n    vec3 H = normalize(V + L);\n    specular = ls.color * pow(max(dot(N, H), 0.0), uShininess);\n  }\n\n  return diffuse + specular;\n}\n\nvec3 computeLight(vec3 position, vec3 normal, lightSource ls) {\n  if(ls.type == -1)\n    return vec3(0.0, 0.0, 0.0);\n  if(ls.type == 0)\n    return ls.color;\n  return phong(position, normal, ls);\n}\n\n\n\nvoid main(void) {\n  vec3 lighting = computeLight(vPosition, vNormal, uLight0) + \n                  computeLight(vPosition, vNormal, uLight1) + \n                  computeLight(vPosition, vNormal, uLight2) + \n                  computeLight(vPosition, vNormal, uLight3);\n  gl_FragColor = vec4(lighting * uColor, 1.0);\n}\n";
  },
  static: {
SimpleShader$_internal: function() {
  var t1 = new R.SimpleShader(4, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.SimpleShader$_internal$0();
  return t1;
}}

},

Transform: {"": "Object;position',scale',rotation?",
  add$1: function(_, child) {
    var t1;
    child.removeFromParent$0;
    t1 = child.parent;
    if (t1 != null) {
      C.JSArray_methods.remove$1(t1.children, child);
      child.parent = null;
    }
    child.parent = this;
    this.children.push(child);
  },
  render$0: function() {
    H.IterableMixinWorkaround_forEach(this.children, new R.Transform_render_closure());
  },
  updateMatrix$0: function() {
    this.matrix.setFromTranslationRotation$2(this.position, this.rotation);
    var t1 = this.matrix;
    t1.scale$1(t1, this.scale);
  },
  Transform$0: function() {
    var t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    this.position = new T.Vector3(t1);
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(1, 1, 1);
    this.scale = t1;
    this.rotation = T.Quaternion$identity();
    this.children = P.List_List(null, null);
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Matrix4(t1);
    t1.setIdentity$0();
    this.matrix = t1;
  }
},

Transform_render_closure: {"": "Closure;",
  call$1: function(e) {
    return e.render$0();
  },
  $asObject: null
}}],
["orange.dart", "orange.dart", , T, {
main: function() {
  var scene, t1, t2;
  $._director = R.Director$_internal(document.querySelector("#container"));
  scene = new T.TestScene(null, null, 0, null, [], null, null, null, null, null, null, null, null, null, null);
  scene.Transform$0();
  scene.camera = R.PerspectiveCamera$(1, 1000, 45);
  J.set$y$x(scene.camera.position, 5);
  J.set$z$x(scene.camera.position, 10);
  t1 = scene.camera;
  t2 = new Float32Array(3);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector3(t2);
  t2.setValues$3(0, 0, 0);
  t1.lookAt$1(t2);
  $._director.replace$1(scene);
  t2 = $._director;
  t2.run$0;
  t1 = window;
  t2 = t2.get$_animate();
  C.Window_methods._ensureRequestAnimationFrame$0(t1);
  C.Window_methods._requestAnimationFrame$1(t1, t2);
},

TestScene: {"": "Scene;_stats,_visual,i,camera,lights,name,position,scale,rotation,_worldPosition,matrix,_globalMatrix,_normalMatrix,parent,children",
  enter$0: function() {
    var t1, cube, sphere, light0, light1, light2;
    t1 = new M.Stats(new P.Stopwatch(null, null), 0, 1000, 0, 0, 1000, 0, 0, 0, null, null, null, null, null, null, null);
    t1._createUi$0();
    this._stats = t1;
    document.body.appendChild(this._stats.container);
    cube = R.Cube$(1, 1, 1);
    cube.material.shader = $.get$Shader_simpleShader();
    cube.material.color = R.Color$fromHex(65280);
    cube.position.setValues$3(-2, 3, 0);
    cube.computeVertexNormals$0();
    this.add$1(this, cube);
    sphere = R.Sphere$(1, 8, 8);
    sphere.position.setValues$3(-3, 1, 0);
    sphere.wireframe = false;
    sphere.material.shader = $.get$Shader_simpleShader();
    sphere.computeVertexNormals$0();
    this.add$1(this, sphere);
    this.add$1(this, R.Plane$(10, 10));
    light0 = new R.Light(R.Color$fromHex(3355443), null, null, null, 0, null, null, null, null, null, null, null, null, null, null);
    light0.Transform$0();
    t1 = this.lights;
    t1.push(light0);
    light1 = new R.Light(R.Color$fromHex(13500415), null, null, null, 1, null, null, null, null, null, null, null, null, null, null);
    light1.Transform$0();
    light0 = new Float32Array(3);
    light0.$dartCachedLength = light0.length;
    light0 = new T.Vector3(light0);
    light0.setValues$3(1, 1, 0);
    light1.position = light0;
    light2 = new R.Light(R.Color$fromHex(13500415), null, null, null, 1, null, null, null, null, null, null, null, null, null, null);
    light2.Transform$0();
    light0 = new Float32Array(3);
    light0.$dartCachedLength = light0.length;
    light0 = new T.Vector3(light0);
    light0.setValues$3(-5, 10, 0);
    light2.position = light0;
    t1.push(light2);
    this._visual = R.Cube$(0.5, 0.5, 0.5);
    this._visual.position = J.clone$0$x(light2.position);
    this.add$1(this, this._visual);
    W.HttpRequest_getString("teapot.json", null, null).then$1(this.get$addMesh());
  },
  addMesh$1: function(responseData) {
    var mesh, t1;
    mesh = R.parseMesh(responseData);
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(1, 0, 0);
    mesh.position = t1;
    mesh.material = new R.Material(null, null, null, null, null, null, null, R.Color$fromHex(16777215), 5);
    mesh.material.shader = $.get$Shader_simpleShader();
    mesh.material.shininess = 105;
    mesh.computeVertexNormals$0();
    this.add$1(this, mesh);
  },
  get$addMesh: function() {
    return new M.BoundClosure$1(this, T.TestScene.prototype.addMesh$1, null, "addMesh$1");
  },
  update$1: function(interval) {
    var t1, moveTarget, t2, t3, t4;
    t1 = this._stats._timer;
    t1.start$0(t1);
    t1 = this.lights;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    moveTarget = t1[0];
    t2 = $._director._keyboard._keysState;
    if (t2.contains$1(t2, 37)) {
      t2 = moveTarget.position;
      t3 = new Float32Array(3);
      t3.$dartCachedLength = t3.length;
      t3 = new T.Vector3(t3);
      t3.setValues$3(-0.1, 0, 0);
      moveTarget.position = J.$add$ns(t2, t3);
    } else {
      t2 = $._director._keyboard._keysState;
      if (t2.contains$1(t2, 39)) {
        t2 = moveTarget.position;
        t3 = new Float32Array(3);
        t3.$dartCachedLength = t3.length;
        t3 = new T.Vector3(t3);
        t3.setValues$3(0.1, 0, 0);
        moveTarget.position = J.$add$ns(t2, t3);
      } else {
        t2 = $._director._keyboard._keysState;
        if (t2.contains$1(t2, 38)) {
          t2 = this.camera;
          t3 = t2.position;
          t4 = $.get$WORLD_UP();
          t2.position = J.$add$ns(t3, t4.$mul(t4, 0.1));
          t4 = this.camera;
          t3 = new Float32Array(3);
          t3.$dartCachedLength = t3.length;
          t3 = new T.Vector3(t3);
          t3.setValues$3(0, 0, 0);
          t4.lookAt$1(t3);
        } else {
          t2 = $._director._keyboard._keysState;
          if (t2.contains$1(t2, 40)) {
            t2 = this.camera;
            t3 = t2.position;
            t4 = $.get$WORLD_UP();
            t2.position = J.$sub$n(t3, t4.$mul(t4, 0.1));
            t4 = this.camera;
            t3 = new Float32Array(3);
            t3.$dartCachedLength = t3.length;
            t3 = new T.Vector3(t3);
            t3.setValues$3(0, 0, 0);
            t4.lookAt$1(t3);
          }
        }
      }
    }
    J.$div$n(interval, 1000);
    this.i = this.i + 0.02;
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    t2 = t1[1].position;
    t3 = J.get$x$x(t2);
    t4 = this.i;
    t2.setValues$3(t3, Math.cos(t4) * 10, 0);
    t2 = this._visual;
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    t2.position = J.clone$0$x(t1[1].position);
  },
  render$0: function() {
    R.Transform.prototype.render$0.call(this);
    this._stats.end$0();
  }
}},
1],
["vector_math", "package:vector_math/vector_math.dart", , T, {
setViewMatrix: function(viewMatrix, cameraPosition, cameraFocusPosition, upDirection) {
  var t1, z, x, y, t2, t3, t4, rotatedEye;
  t1 = J.getInterceptor$n(cameraPosition);
  z = t1.$sub(cameraPosition, cameraFocusPosition);
  z.normalize$0();
  x = upDirection.cross$1(z);
  x.normalize$0();
  y = z.cross$1(x);
  y.normalize$0();
  viewMatrix.setZero$0();
  t2 = viewMatrix.storage;
  if (15 >= C.JS_CONST_ZYJ(t2))
    throw H.ioore(t2, 15);
  t2[15] = 1;
  t3 = x.storage;
  t4 = C.JS_CONST_ZYJ(t3);
  if (0 >= t4)
    throw H.ioore(t3, 0);
  t2[0] = t3[0];
  if (1 >= t4)
    throw H.ioore(t3, 1);
  t2[1] = t3[1];
  if (2 >= t4)
    throw H.ioore(t3, 2);
  t2[2] = t3[2];
  t3 = y.get$storage();
  if (0 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 0);
  t2[4] = t3[0];
  t3 = y.get$storage();
  if (1 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 1);
  t2[5] = t3[1];
  t3 = y.get$storage();
  if (2 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 2);
  t2[6] = t3[2];
  t3 = J.getInterceptor$x(z);
  t4 = t3.get$x(z);
  if (8 >= C.JS_CONST_ZYJ(t2))
    throw H.ioore(t2, 8);
  t2[8] = t4;
  t4 = t3.get$y(z);
  if (9 >= C.JS_CONST_ZYJ(t2))
    throw H.ioore(t2, 9);
  t2[9] = t4;
  t3 = t3.get$z(z);
  if (10 >= C.JS_CONST_ZYJ(t2))
    throw H.ioore(t2, 10);
  t2[10] = t3;
  viewMatrix.transpose$0();
  rotatedEye = viewMatrix.$mul(viewMatrix, t1.$negate(cameraPosition));
  t1 = rotatedEye.get$x(rotatedEye);
  if (12 >= C.JS_CONST_ZYJ(t2))
    throw H.ioore(t2, 12);
  t2[12] = t1;
  t1 = rotatedEye.get$y(rotatedEye);
  if (13 >= C.JS_CONST_ZYJ(t2))
    throw H.ioore(t2, 13);
  t2[13] = t1;
  t1 = rotatedEye.get$z(rotatedEye);
  if (14 >= C.JS_CONST_ZYJ(t2))
    throw H.ioore(t2, 14);
  t2[14] = t1;
},

makeViewMatrix: function(cameraPosition, cameraFocusPosition, upDirection) {
  var t1, r;
  t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  r = new T.Matrix4(t1);
  T.setViewMatrix(r, cameraPosition, cameraFocusPosition, upDirection);
  return r;
},

makePerspectiveMatrix: function(fovYRadians, aspectRatio, zNear, zFar) {
  var t1, height, width, view;
  t1 = Math.tan(fovYRadians * 0.5);
  zNear.toDouble$0;
  if (zNear == null)
    throw H.iae(zNear);
  height = t1 * zNear;
  width = height * aspectRatio;
  t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  view = new T.Matrix4(t1);
  T.setFrustumMatrix(view, -width, width, -height, height, zNear, zFar);
  return view;
},

setFrustumMatrix: function(perspectiveMatrix, left, right, bottom, $top, near, far) {
  var two_near, right_minus_left, top_minus_bottom, far_minus_near, t1, t2;
  far.toDouble$0;
  two_near = 2 * near;
  right_minus_left = right - left;
  top_minus_bottom = $top - bottom;
  if (far == null)
    throw far.$sub();
  far_minus_near = far - near;
  t1 = perspectiveMatrix.setZero$0().storage;
  t2 = C.JS_CONST_ZYJ(t1);
  if (0 >= t2)
    throw H.ioore(t1, 0);
  t1[0] = two_near / right_minus_left;
  if (5 >= t2)
    throw H.ioore(t1, 5);
  t1[5] = two_near / top_minus_bottom;
  if (8 >= t2)
    throw H.ioore(t1, 8);
  t1[8] = (right + left) / right_minus_left;
  if (9 >= t2)
    throw H.ioore(t1, 9);
  t1[9] = ($top + bottom) / top_minus_bottom;
  if (10 >= t2)
    throw H.ioore(t1, 10);
  t1[10] = -(far + near) / far_minus_near;
  if (11 >= t2)
    throw H.ioore(t1, 11);
  t1[11] = -1;
  if (14 >= t2)
    throw H.ioore(t1, 14);
  t1[14] = -(two_near * far) / far_minus_near;
},

Matrix3: {"": "Object;storage<",
  setFrom$1: function(arg) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = arg.storage;
    if (8 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 8);
    t3 = t2[8];
    if (8 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 8);
    t1[8] = t3;
    t1[7] = t2[7];
    t1[6] = t2[6];
    t1[5] = t2[5];
    t1[4] = t2[4];
    t1[3] = t2[3];
    t1[2] = t2[2];
    t1[1] = t2[1];
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n[2] " + H.S(this.getRow$1(2)) + "\n";
  },
  get$dimension: function() {
    return 3;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var t1, r, t2, t3, t4, t5;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    t4 = C.JS_CONST_ZYJ(t2);
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t2, t3);
    t3 = t2[t3];
    t5 = C.JS_CONST_ZYJ(t1);
    if (0 >= t5)
      throw H.ioore(t1, 0);
    t1[0] = t3;
    t3 = 3 + row;
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t2, t3);
    t3 = t2[t3];
    if (1 >= t5)
      throw H.ioore(t1, 1);
    t1[1] = t3;
    t3 = 6 + row;
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t2, t3);
    t3 = t2[t3];
    if (2 >= t5)
      throw H.ioore(t1, 2);
    t1[2] = t3;
    return r;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Matrix3(t1);
    t1.setFrom$1(this);
    return t1;
  },
  _mul_scale$1: function(arg) {
    var t1, r, t2, t3;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    if (8 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 8);
    t3 = t2[8];
    if (8 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 8);
    t1[8] = t3 * arg;
    t1[7] = t2[7] * arg;
    t1[6] = t2[6] * arg;
    t1[5] = t2[5] * arg;
    t1[4] = t2[4] * arg;
    t1[3] = t2[3] * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  $mul: function(_, arg) {
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    arg.get$dimension();
    throw H.wrapException(new P.ArgumentError(arg));
  },
  $add: function(_, arg) {
    var t1, r, t2, t3, t4, t5, t6;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t4 = t2[0];
    t5 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 0);
    t5 = t5[0];
    t6 = C.JS_CONST_ZYJ(t1);
    if (0 >= t6)
      throw H.ioore(t1, 0);
    t1[0] = t4 + t5;
    if (1 >= t3)
      throw H.ioore(t2, 1);
    t5 = t2[1];
    t4 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 1);
    t4 = t4[1];
    if (1 >= t6)
      throw H.ioore(t1, 1);
    t1[1] = t5 + t4;
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t4 = t2[2];
    t5 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 2);
    t5 = t5[2];
    if (2 >= t6)
      throw H.ioore(t1, 2);
    t1[2] = t4 + t5;
    if (3 >= t3)
      throw H.ioore(t2, 3);
    t5 = t2[3];
    t4 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 3);
    t4 = t4[3];
    if (3 >= t6)
      throw H.ioore(t1, 3);
    t1[3] = t5 + t4;
    if (4 >= t3)
      throw H.ioore(t2, 4);
    t4 = t2[4];
    t5 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 4);
    t5 = t5[4];
    if (4 >= t6)
      throw H.ioore(t1, 4);
    t1[4] = t4 + t5;
    if (5 >= t3)
      throw H.ioore(t2, 5);
    t5 = t2[5];
    t4 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 5);
    t4 = t4[5];
    if (5 >= t6)
      throw H.ioore(t1, 5);
    t1[5] = t5 + t4;
    if (6 >= t3)
      throw H.ioore(t2, 6);
    t4 = t2[6];
    t5 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 6);
    t5 = t5[6];
    if (6 >= t6)
      throw H.ioore(t1, 6);
    t1[6] = t4 + t5;
    if (7 >= t3)
      throw H.ioore(t2, 7);
    t5 = t2[7];
    t4 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 7);
    t4 = t4[7];
    if (7 >= t6)
      throw H.ioore(t1, 7);
    t1[7] = t5 + t4;
    if (8 >= t3)
      throw H.ioore(t2, 8);
    t2 = t2[8];
    t3 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 8);
    t3 = t3[8];
    if (8 >= t6)
      throw H.ioore(t1, 8);
    t1[8] = t2 + t3;
    return r;
  },
  $sub: function(_, arg) {
    var t1, r, t2, t3, t4, t5, t6;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t4 = t2[0];
    t5 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 0);
    t5 = t5[0];
    t6 = C.JS_CONST_ZYJ(t1);
    if (0 >= t6)
      throw H.ioore(t1, 0);
    t1[0] = t4 - t5;
    if (1 >= t3)
      throw H.ioore(t2, 1);
    t5 = t2[1];
    t4 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 1);
    t4 = t4[1];
    if (1 >= t6)
      throw H.ioore(t1, 1);
    t1[1] = t5 - t4;
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t4 = t2[2];
    t5 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 2);
    t5 = t5[2];
    if (2 >= t6)
      throw H.ioore(t1, 2);
    t1[2] = t4 - t5;
    if (3 >= t3)
      throw H.ioore(t2, 3);
    t5 = t2[3];
    t4 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 3);
    t4 = t4[3];
    if (3 >= t6)
      throw H.ioore(t1, 3);
    t1[3] = t5 - t4;
    if (4 >= t3)
      throw H.ioore(t2, 4);
    t4 = t2[4];
    t5 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 4);
    t5 = t5[4];
    if (4 >= t6)
      throw H.ioore(t1, 4);
    t1[4] = t4 - t5;
    if (5 >= t3)
      throw H.ioore(t2, 5);
    t5 = t2[5];
    t4 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 5);
    t4 = t4[5];
    if (5 >= t6)
      throw H.ioore(t1, 5);
    t1[5] = t5 - t4;
    if (6 >= t3)
      throw H.ioore(t2, 6);
    t4 = t2[6];
    t5 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 6);
    t5 = t5[6];
    if (6 >= t6)
      throw H.ioore(t1, 6);
    t1[6] = t4 - t5;
    if (7 >= t3)
      throw H.ioore(t2, 7);
    t5 = t2[7];
    t4 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 7);
    t4 = t4[7];
    if (7 >= t6)
      throw H.ioore(t1, 7);
    t1[7] = t5 - t4;
    if (8 >= t3)
      throw H.ioore(t2, 8);
    t2 = t2[8];
    t3 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 8);
    t3 = t3[8];
    if (8 >= t6)
      throw H.ioore(t1, 8);
    t1[8] = t2 - t3;
    return r;
  },
  $negate: function(_) {
    var t1, r, t2, t3, t4, t5;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = r.storage;
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t4[0] = -t3;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t3 = t1[1];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t4[1] = -t3;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1 = t1[2];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t4[2] = -t1;
    return r;
  },
  trace$0: function() {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (4 >= t2)
      throw H.ioore(t1, 4);
    t4 = t1[4];
    if (8 >= t2)
      throw H.ioore(t1, 8);
    return 0 + t3 + t4 + t1[8];
  }
},

Matrix4: {"": "Object;storage<",
  setFrom$1: function(arg) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = arg.storage;
    if (15 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 15);
    t3 = t2[15];
    if (15 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 15);
    t1[15] = t3;
    t1[14] = t2[14];
    t1[13] = t2[13];
    t1[12] = t2[12];
    t1[11] = t2[11];
    t1[10] = t2[10];
    t1[9] = t2[9];
    t1[8] = t2[8];
    t1[7] = t2[7];
    t1[6] = t2[6];
    t1[5] = t2[5];
    t1[4] = t2[4];
    t1[3] = t2[3];
    t1[2] = t2[2];
    t1[1] = t2[1];
    t1[0] = t2[0];
    return this;
  },
  setFromTranslationRotation$2: function(arg0, arg1) {
    var t1, t2, x, y, z, w, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz, t3;
    t1 = arg1.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    x = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    y = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    z = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    w = t1[3];
    x2 = x + x;
    y2 = y + y;
    z2 = z + z;
    xx = x * x2;
    xy = x * y2;
    xz = x * z2;
    yy = y * y2;
    yz = y * z2;
    zz = z * z2;
    wx = w * x2;
    wy = w * y2;
    wz = w * z2;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0] = 1 - (yy + zz);
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1] = xy + wz;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1[2] = xz - wy;
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1[3] = 0;
    if (4 >= t2)
      throw H.ioore(t1, 4);
    t1[4] = xy - wz;
    if (5 >= t2)
      throw H.ioore(t1, 5);
    t1[5] = 1 - (xx + zz);
    if (6 >= t2)
      throw H.ioore(t1, 6);
    t1[6] = yz + wx;
    if (7 >= t2)
      throw H.ioore(t1, 7);
    t1[7] = 0;
    if (8 >= t2)
      throw H.ioore(t1, 8);
    t1[8] = xz + wy;
    if (9 >= t2)
      throw H.ioore(t1, 9);
    t1[9] = yz - wx;
    if (10 >= t2)
      throw H.ioore(t1, 10);
    t1[10] = 1 - (xx + yy);
    if (11 >= t2)
      throw H.ioore(t1, 11);
    t1[11] = 0;
    t2 = J.getInterceptor$asx(arg0);
    t3 = t2.$index(arg0, 0);
    if (12 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 12);
    t1[12] = t3;
    t3 = t2.$index(arg0, 1);
    if (13 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 13);
    t1[13] = t3;
    t2 = t2.$index(arg0, 2);
    t3 = C.JS_CONST_ZYJ(t1);
    if (14 >= t3)
      throw H.ioore(t1, 14);
    t1[14] = t2;
    if (15 >= t3)
      throw H.ioore(t1, 15);
    t1[15] = 1;
    return this;
  },
  toString$0: function(_) {
    return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n[2] " + H.S(this.getRow$1(2)) + "\n[3] " + H.S(this.getRow$1(3)) + "\n";
  },
  get$dimension: function() {
    return 4;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var t1, r, t2, t3, t4, t5;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    t4 = C.JS_CONST_ZYJ(t2);
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t2, t3);
    t3 = t2[t3];
    t5 = C.JS_CONST_ZYJ(t1);
    if (0 >= t5)
      throw H.ioore(t1, 0);
    t1[0] = t3;
    t3 = 4 + row;
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t2, t3);
    t3 = t2[t3];
    if (1 >= t5)
      throw H.ioore(t1, 1);
    t1[1] = t3;
    t3 = 8 + row;
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t2, t3);
    t3 = t2[t3];
    if (2 >= t5)
      throw H.ioore(t1, 2);
    t1[2] = t3;
    t3 = 12 + row;
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(t2, t3);
    t3 = t2[t3];
    if (3 >= t5)
      throw H.ioore(t1, 3);
    t1[3] = t3;
    return r;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Matrix4(t1);
    t1.setFrom$1(this);
    return t1;
  },
  _mul_scale$1: function(arg) {
    var t1, r, t2, t3;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    if (15 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 15);
    t3 = t2[15];
    if (15 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 15);
    t1[15] = t3 * arg;
    t1[14] = t2[14] * arg;
    t1[13] = t2[13] * arg;
    t1[12] = t2[12] * arg;
    t1[11] = t2[11] * arg;
    t1[10] = t2[10] * arg;
    t1[9] = t2[9] * arg;
    t1[8] = t2[8] * arg;
    t1[7] = t2[7] * arg;
    t1[6] = t2[6] * arg;
    t1[5] = t2[5] * arg;
    t1[4] = t2[4] * arg;
    t1[3] = t2[3] * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  _mul_matrix$1: function(arg) {
    var t1, r, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t4 = t2[0];
    t5 = arg.get$storage();
    t6 = C.JS_CONST_ZYJ(t5);
    if (0 >= t6)
      throw H.ioore(t5, 0);
    t7 = t5[0];
    if (4 >= t3)
      throw H.ioore(t2, 4);
    t8 = t2[4];
    if (1 >= t6)
      throw H.ioore(t5, 1);
    t9 = t5[1];
    if (8 >= t3)
      throw H.ioore(t2, 8);
    t10 = t2[8];
    if (2 >= t6)
      throw H.ioore(t5, 2);
    t11 = t5[2];
    if (12 >= t3)
      throw H.ioore(t2, 12);
    t12 = t2[12];
    if (3 >= t6)
      throw H.ioore(t5, 3);
    t5 = t5[3];
    t6 = C.JS_CONST_ZYJ(t1);
    if (0 >= t6)
      throw H.ioore(t1, 0);
    t1[0] = t4 * t7 + t8 * t9 + t10 * t11 + t12 * t5;
    t5 = t2[0];
    t12 = arg.get$storage();
    t11 = C.JS_CONST_ZYJ(t12);
    if (4 >= t11)
      throw H.ioore(t12, 4);
    t10 = t12[4];
    t9 = t2[4];
    if (5 >= t11)
      throw H.ioore(t12, 5);
    t8 = t12[5];
    t7 = t2[8];
    if (6 >= t11)
      throw H.ioore(t12, 6);
    t4 = t12[6];
    t13 = t2[12];
    if (7 >= t11)
      throw H.ioore(t12, 7);
    t12 = t12[7];
    if (4 >= t6)
      throw H.ioore(t1, 4);
    t1[4] = t5 * t10 + t9 * t8 + t7 * t4 + t13 * t12;
    t12 = t2[0];
    t13 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t13);
    if (8 >= t4)
      throw H.ioore(t13, 8);
    t7 = t13[8];
    t8 = t2[4];
    if (9 >= t4)
      throw H.ioore(t13, 9);
    t9 = t13[9];
    t10 = t2[8];
    if (10 >= t4)
      throw H.ioore(t13, 10);
    t5 = t13[10];
    t11 = t2[12];
    if (11 >= t4)
      throw H.ioore(t13, 11);
    t13 = t13[11];
    if (8 >= t6)
      throw H.ioore(t1, 8);
    t1[8] = t12 * t7 + t8 * t9 + t10 * t5 + t11 * t13;
    t13 = t2[0];
    t11 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t11);
    if (12 >= t5)
      throw H.ioore(t11, 12);
    t10 = t11[12];
    t9 = t2[4];
    if (13 >= t5)
      throw H.ioore(t11, 13);
    t8 = t11[13];
    t7 = t2[8];
    if (14 >= t5)
      throw H.ioore(t11, 14);
    t12 = t11[14];
    t4 = t2[12];
    if (15 >= t5)
      throw H.ioore(t11, 15);
    t11 = t11[15];
    if (12 >= t6)
      throw H.ioore(t1, 12);
    t1[12] = t13 * t10 + t9 * t8 + t7 * t12 + t4 * t11;
    t11 = t2[1];
    t4 = arg.get$storage();
    t12 = C.JS_CONST_ZYJ(t4);
    if (0 >= t12)
      throw H.ioore(t4, 0);
    t7 = t4[0];
    t8 = t2[5];
    if (1 >= t12)
      throw H.ioore(t4, 1);
    t9 = t4[1];
    t10 = t2[9];
    if (2 >= t12)
      throw H.ioore(t4, 2);
    t13 = t4[2];
    if (13 >= t3)
      throw H.ioore(t2, 13);
    t5 = t2[13];
    if (3 >= t12)
      throw H.ioore(t4, 3);
    t1[1] = t11 * t7 + t8 * t9 + t10 * t13 + t5 * t4[3];
    t4 = t2[1];
    t5 = arg.get$storage();
    t13 = C.JS_CONST_ZYJ(t5);
    if (4 >= t13)
      throw H.ioore(t5, 4);
    t10 = t5[4];
    t9 = t2[5];
    if (5 >= t13)
      throw H.ioore(t5, 5);
    t8 = t5[5];
    t7 = t2[9];
    if (6 >= t13)
      throw H.ioore(t5, 6);
    t11 = t5[6];
    t12 = t2[13];
    if (7 >= t13)
      throw H.ioore(t5, 7);
    t1[5] = t4 * t10 + t9 * t8 + t7 * t11 + t12 * t5[7];
    t5 = t2[1];
    t12 = arg.get$storage();
    t11 = C.JS_CONST_ZYJ(t12);
    if (8 >= t11)
      throw H.ioore(t12, 8);
    t7 = t12[8];
    t8 = t2[5];
    if (9 >= t11)
      throw H.ioore(t12, 9);
    t9 = t12[9];
    t10 = t2[9];
    if (10 >= t11)
      throw H.ioore(t12, 10);
    t4 = t12[10];
    t13 = t2[13];
    if (11 >= t11)
      throw H.ioore(t12, 11);
    t1[9] = t5 * t7 + t8 * t9 + t10 * t4 + t13 * t12[11];
    t12 = t2[1];
    t13 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t13);
    if (12 >= t4)
      throw H.ioore(t13, 12);
    t10 = t13[12];
    t9 = t2[5];
    if (13 >= t4)
      throw H.ioore(t13, 13);
    t8 = t13[13];
    t7 = t2[9];
    if (14 >= t4)
      throw H.ioore(t13, 14);
    t5 = t13[14];
    t11 = t2[13];
    if (15 >= t4)
      throw H.ioore(t13, 15);
    t13 = t13[15];
    if (13 >= t6)
      throw H.ioore(t1, 13);
    t1[13] = t12 * t10 + t9 * t8 + t7 * t5 + t11 * t13;
    t13 = t2[2];
    t11 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t11);
    if (0 >= t5)
      throw H.ioore(t11, 0);
    t7 = t11[0];
    t8 = t2[6];
    if (1 >= t5)
      throw H.ioore(t11, 1);
    t9 = t11[1];
    t10 = t2[10];
    if (2 >= t5)
      throw H.ioore(t11, 2);
    t12 = t11[2];
    if (14 >= t3)
      throw H.ioore(t2, 14);
    t4 = t2[14];
    if (3 >= t5)
      throw H.ioore(t11, 3);
    t1[2] = t13 * t7 + t8 * t9 + t10 * t12 + t4 * t11[3];
    t11 = t2[2];
    t4 = arg.get$storage();
    t12 = C.JS_CONST_ZYJ(t4);
    if (4 >= t12)
      throw H.ioore(t4, 4);
    t10 = t4[4];
    t9 = t2[6];
    if (5 >= t12)
      throw H.ioore(t4, 5);
    t8 = t4[5];
    t7 = t2[10];
    if (6 >= t12)
      throw H.ioore(t4, 6);
    t13 = t4[6];
    t5 = t2[14];
    if (7 >= t12)
      throw H.ioore(t4, 7);
    t1[6] = t11 * t10 + t9 * t8 + t7 * t13 + t5 * t4[7];
    t4 = t2[2];
    t5 = arg.get$storage();
    t13 = C.JS_CONST_ZYJ(t5);
    if (8 >= t13)
      throw H.ioore(t5, 8);
    t7 = t5[8];
    t8 = t2[6];
    if (9 >= t13)
      throw H.ioore(t5, 9);
    t9 = t5[9];
    t10 = t2[10];
    if (10 >= t13)
      throw H.ioore(t5, 10);
    t11 = t5[10];
    t12 = t2[14];
    if (11 >= t13)
      throw H.ioore(t5, 11);
    t1[10] = t4 * t7 + t8 * t9 + t10 * t11 + t12 * t5[11];
    t5 = t2[2];
    t12 = arg.get$storage();
    t11 = C.JS_CONST_ZYJ(t12);
    if (12 >= t11)
      throw H.ioore(t12, 12);
    t10 = t12[12];
    t9 = t2[6];
    if (13 >= t11)
      throw H.ioore(t12, 13);
    t8 = t12[13];
    t7 = t2[10];
    if (14 >= t11)
      throw H.ioore(t12, 14);
    t4 = t12[14];
    t13 = t2[14];
    if (15 >= t11)
      throw H.ioore(t12, 15);
    t12 = t12[15];
    if (14 >= t6)
      throw H.ioore(t1, 14);
    t1[14] = t5 * t10 + t9 * t8 + t7 * t4 + t13 * t12;
    t12 = t2[3];
    t13 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t13);
    if (0 >= t4)
      throw H.ioore(t13, 0);
    t7 = t13[0];
    t8 = t2[7];
    if (1 >= t4)
      throw H.ioore(t13, 1);
    t9 = t13[1];
    t10 = t2[11];
    if (2 >= t4)
      throw H.ioore(t13, 2);
    t5 = t13[2];
    if (15 >= t3)
      throw H.ioore(t2, 15);
    t3 = t2[15];
    if (3 >= t4)
      throw H.ioore(t13, 3);
    t1[3] = t12 * t7 + t8 * t9 + t10 * t5 + t3 * t13[3];
    t13 = t2[3];
    t3 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t3);
    if (4 >= t5)
      throw H.ioore(t3, 4);
    t10 = t3[4];
    t9 = t2[7];
    if (5 >= t5)
      throw H.ioore(t3, 5);
    t8 = t3[5];
    t7 = t2[11];
    if (6 >= t5)
      throw H.ioore(t3, 6);
    t12 = t3[6];
    t4 = t2[15];
    if (7 >= t5)
      throw H.ioore(t3, 7);
    t1[7] = t13 * t10 + t9 * t8 + t7 * t12 + t4 * t3[7];
    t3 = t2[3];
    t4 = arg.get$storage();
    t12 = C.JS_CONST_ZYJ(t4);
    if (8 >= t12)
      throw H.ioore(t4, 8);
    t7 = t4[8];
    t8 = t2[7];
    if (9 >= t12)
      throw H.ioore(t4, 9);
    t9 = t4[9];
    t10 = t2[11];
    if (10 >= t12)
      throw H.ioore(t4, 10);
    t13 = t4[10];
    t5 = t2[15];
    if (11 >= t12)
      throw H.ioore(t4, 11);
    t1[11] = t3 * t7 + t8 * t9 + t10 * t13 + t5 * t4[11];
    t4 = t2[3];
    t5 = arg.get$storage();
    t13 = C.JS_CONST_ZYJ(t5);
    if (12 >= t13)
      throw H.ioore(t5, 12);
    t10 = t5[12];
    t9 = t2[7];
    if (13 >= t13)
      throw H.ioore(t5, 13);
    t8 = t5[13];
    t7 = t2[11];
    if (14 >= t13)
      throw H.ioore(t5, 14);
    t3 = t5[14];
    t2 = t2[15];
    if (15 >= t13)
      throw H.ioore(t5, 15);
    t5 = t5[15];
    if (15 >= t6)
      throw H.ioore(t1, 15);
    t1[15] = t4 * t10 + t9 * t8 + t7 * t3 + t2 * t5;
    return r;
  },
  _mul_vector$1: function(arg) {
    var t1, r, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (3 >= t3)
      throw H.ioore(t2, 3);
    t4 = t2[3];
    t5 = arg.storage;
    t6 = C.JS_CONST_ZYJ(t5);
    if (0 >= t6)
      throw H.ioore(t5, 0);
    t7 = t5[0];
    if (7 >= t3)
      throw H.ioore(t2, 7);
    t8 = t2[7];
    if (1 >= t6)
      throw H.ioore(t5, 1);
    t9 = t5[1];
    if (11 >= t3)
      throw H.ioore(t2, 11);
    t10 = t2[11];
    if (2 >= t6)
      throw H.ioore(t5, 2);
    t11 = t5[2];
    if (15 >= t3)
      throw H.ioore(t2, 15);
    t3 = t2[15];
    if (3 >= t6)
      throw H.ioore(t5, 3);
    t6 = t5[3];
    if (3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 3);
    t1[3] = t4 * t7 + t8 * t9 + t10 * t11 + t3 * t6;
    t1[2] = t2[2] * t5[0] + t2[6] * t5[1] + t2[10] * t5[2] + t2[14] * t5[3];
    t1[1] = t2[1] * t5[0] + t2[5] * t5[1] + t2[9] * t5[2] + t2[13] * t5[3];
    t1[0] = t2[0] * t5[0] + t2[4] * t5[1] + t2[8] * t5[2] + t2[12] * t5[3];
    return r;
  },
  _mul_vector3$1: function(arg) {
    var t1, r, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t4 = t2[0];
    t5 = arg.storage;
    t6 = C.JS_CONST_ZYJ(t5);
    if (0 >= t6)
      throw H.ioore(t5, 0);
    t7 = t5[0];
    if (4 >= t3)
      throw H.ioore(t2, 4);
    t8 = t2[4];
    if (1 >= t6)
      throw H.ioore(t5, 1);
    t9 = t5[1];
    if (8 >= t3)
      throw H.ioore(t2, 8);
    t10 = t2[8];
    if (2 >= t6)
      throw H.ioore(t5, 2);
    t6 = t5[2];
    if (12 >= t3)
      throw H.ioore(t2, 12);
    t11 = t2[12];
    t12 = C.JS_CONST_ZYJ(t1);
    if (0 >= t12)
      throw H.ioore(t1, 0);
    t1[0] = t4 * t7 + t8 * t9 + t10 * t6 + t11;
    t11 = t2[1];
    t6 = t5[0];
    t10 = t2[5];
    t9 = t5[1];
    t8 = t2[9];
    t7 = t5[2];
    if (13 >= t3)
      throw H.ioore(t2, 13);
    t4 = t2[13];
    if (1 >= t12)
      throw H.ioore(t1, 1);
    t1[1] = t11 * t6 + t10 * t9 + t8 * t7 + t4;
    t4 = t2[2];
    t7 = t5[0];
    t8 = t2[6];
    t9 = t5[1];
    t10 = t2[10];
    t5 = t5[2];
    if (14 >= t3)
      throw H.ioore(t2, 14);
    t2 = t2[14];
    if (2 >= t12)
      throw H.ioore(t1, 2);
    t1[2] = t4 * t7 + t8 * t9 + t10 * t5 + t2;
    return r;
  },
  $mul: function(_, arg) {
    var t1;
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    t1 = J.getInterceptor(arg);
    if (typeof arg === "object" && arg !== null && !!t1.$isVector4)
      return this._mul_vector$1(arg);
    if (typeof arg === "object" && arg !== null && !!t1.$isVector3)
      return this._mul_vector3$1(arg);
    if (4 === arg.get$dimension())
      return this._mul_matrix$1(arg);
    throw H.wrapException(new P.ArgumentError(arg));
  },
  $add: function(_, arg) {
    var t1, r, t2, t3, t4, t5, t6;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t4 = t2[0];
    t5 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 0);
    t5 = t5[0];
    t6 = C.JS_CONST_ZYJ(t1);
    if (0 >= t6)
      throw H.ioore(t1, 0);
    t1[0] = t4 + t5;
    if (1 >= t3)
      throw H.ioore(t2, 1);
    t5 = t2[1];
    t4 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 1);
    t4 = t4[1];
    if (1 >= t6)
      throw H.ioore(t1, 1);
    t1[1] = t5 + t4;
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t4 = t2[2];
    t5 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 2);
    t5 = t5[2];
    if (2 >= t6)
      throw H.ioore(t1, 2);
    t1[2] = t4 + t5;
    if (3 >= t3)
      throw H.ioore(t2, 3);
    t5 = t2[3];
    t4 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 3);
    t4 = t4[3];
    if (3 >= t6)
      throw H.ioore(t1, 3);
    t1[3] = t5 + t4;
    if (4 >= t3)
      throw H.ioore(t2, 4);
    t4 = t2[4];
    t5 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 4);
    t5 = t5[4];
    if (4 >= t6)
      throw H.ioore(t1, 4);
    t1[4] = t4 + t5;
    if (5 >= t3)
      throw H.ioore(t2, 5);
    t5 = t2[5];
    t4 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 5);
    t4 = t4[5];
    if (5 >= t6)
      throw H.ioore(t1, 5);
    t1[5] = t5 + t4;
    if (6 >= t3)
      throw H.ioore(t2, 6);
    t4 = t2[6];
    t5 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 6);
    t5 = t5[6];
    if (6 >= t6)
      throw H.ioore(t1, 6);
    t1[6] = t4 + t5;
    if (7 >= t3)
      throw H.ioore(t2, 7);
    t5 = t2[7];
    t4 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 7);
    t4 = t4[7];
    if (7 >= t6)
      throw H.ioore(t1, 7);
    t1[7] = t5 + t4;
    if (8 >= t3)
      throw H.ioore(t2, 8);
    t4 = t2[8];
    t5 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 8);
    t5 = t5[8];
    if (8 >= t6)
      throw H.ioore(t1, 8);
    t1[8] = t4 + t5;
    if (9 >= t3)
      throw H.ioore(t2, 9);
    t5 = t2[9];
    t4 = arg.get$storage();
    if (9 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 9);
    t4 = t4[9];
    if (9 >= t6)
      throw H.ioore(t1, 9);
    t1[9] = t5 + t4;
    if (10 >= t3)
      throw H.ioore(t2, 10);
    t4 = t2[10];
    t5 = arg.get$storage();
    if (10 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 10);
    t5 = t5[10];
    if (10 >= t6)
      throw H.ioore(t1, 10);
    t1[10] = t4 + t5;
    if (11 >= t3)
      throw H.ioore(t2, 11);
    t5 = t2[11];
    t4 = arg.get$storage();
    if (11 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 11);
    t4 = t4[11];
    if (11 >= t6)
      throw H.ioore(t1, 11);
    t1[11] = t5 + t4;
    if (12 >= t3)
      throw H.ioore(t2, 12);
    t4 = t2[12];
    t5 = arg.get$storage();
    if (12 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 12);
    t5 = t5[12];
    if (12 >= t6)
      throw H.ioore(t1, 12);
    t1[12] = t4 + t5;
    if (13 >= t3)
      throw H.ioore(t2, 13);
    t5 = t2[13];
    t4 = arg.get$storage();
    if (13 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 13);
    t4 = t4[13];
    if (13 >= t6)
      throw H.ioore(t1, 13);
    t1[13] = t5 + t4;
    if (14 >= t3)
      throw H.ioore(t2, 14);
    t4 = t2[14];
    t5 = arg.get$storage();
    if (14 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 14);
    t5 = t5[14];
    if (14 >= t6)
      throw H.ioore(t1, 14);
    t1[14] = t4 + t5;
    if (15 >= t3)
      throw H.ioore(t2, 15);
    t2 = t2[15];
    t3 = arg.get$storage();
    if (15 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 15);
    t3 = t3[15];
    if (15 >= t6)
      throw H.ioore(t1, 15);
    t1[15] = t2 + t3;
    return r;
  },
  $sub: function(_, arg) {
    var t1, r, t2, t3, t4, t5, t6;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t4 = t2[0];
    t5 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 0);
    t5 = t5[0];
    t6 = C.JS_CONST_ZYJ(t1);
    if (0 >= t6)
      throw H.ioore(t1, 0);
    t1[0] = t4 - t5;
    if (1 >= t3)
      throw H.ioore(t2, 1);
    t5 = t2[1];
    t4 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 1);
    t4 = t4[1];
    if (1 >= t6)
      throw H.ioore(t1, 1);
    t1[1] = t5 - t4;
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t4 = t2[2];
    t5 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 2);
    t5 = t5[2];
    if (2 >= t6)
      throw H.ioore(t1, 2);
    t1[2] = t4 - t5;
    if (3 >= t3)
      throw H.ioore(t2, 3);
    t5 = t2[3];
    t4 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 3);
    t4 = t4[3];
    if (3 >= t6)
      throw H.ioore(t1, 3);
    t1[3] = t5 - t4;
    if (4 >= t3)
      throw H.ioore(t2, 4);
    t4 = t2[4];
    t5 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 4);
    t5 = t5[4];
    if (4 >= t6)
      throw H.ioore(t1, 4);
    t1[4] = t4 - t5;
    if (5 >= t3)
      throw H.ioore(t2, 5);
    t5 = t2[5];
    t4 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 5);
    t4 = t4[5];
    if (5 >= t6)
      throw H.ioore(t1, 5);
    t1[5] = t5 - t4;
    if (6 >= t3)
      throw H.ioore(t2, 6);
    t4 = t2[6];
    t5 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 6);
    t5 = t5[6];
    if (6 >= t6)
      throw H.ioore(t1, 6);
    t1[6] = t4 - t5;
    if (7 >= t3)
      throw H.ioore(t2, 7);
    t5 = t2[7];
    t4 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 7);
    t4 = t4[7];
    if (7 >= t6)
      throw H.ioore(t1, 7);
    t1[7] = t5 - t4;
    if (8 >= t3)
      throw H.ioore(t2, 8);
    t4 = t2[8];
    t5 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 8);
    t5 = t5[8];
    if (8 >= t6)
      throw H.ioore(t1, 8);
    t1[8] = t4 - t5;
    if (9 >= t3)
      throw H.ioore(t2, 9);
    t5 = t2[9];
    t4 = arg.get$storage();
    if (9 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 9);
    t4 = t4[9];
    if (9 >= t6)
      throw H.ioore(t1, 9);
    t1[9] = t5 - t4;
    if (10 >= t3)
      throw H.ioore(t2, 10);
    t4 = t2[10];
    t5 = arg.get$storage();
    if (10 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 10);
    t5 = t5[10];
    if (10 >= t6)
      throw H.ioore(t1, 10);
    t1[10] = t4 - t5;
    if (11 >= t3)
      throw H.ioore(t2, 11);
    t5 = t2[11];
    t4 = arg.get$storage();
    if (11 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 11);
    t4 = t4[11];
    if (11 >= t6)
      throw H.ioore(t1, 11);
    t1[11] = t5 - t4;
    if (12 >= t3)
      throw H.ioore(t2, 12);
    t4 = t2[12];
    t5 = arg.get$storage();
    if (12 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 12);
    t5 = t5[12];
    if (12 >= t6)
      throw H.ioore(t1, 12);
    t1[12] = t4 - t5;
    if (13 >= t3)
      throw H.ioore(t2, 13);
    t5 = t2[13];
    t4 = arg.get$storage();
    if (13 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 13);
    t4 = t4[13];
    if (13 >= t6)
      throw H.ioore(t1, 13);
    t1[13] = t5 - t4;
    if (14 >= t3)
      throw H.ioore(t2, 14);
    t4 = t2[14];
    t5 = arg.get$storage();
    if (14 >= C.JS_CONST_ZYJ(t5))
      throw H.ioore(t5, 14);
    t5 = t5[14];
    if (14 >= t6)
      throw H.ioore(t1, 14);
    t1[14] = t4 - t5;
    if (15 >= t3)
      throw H.ioore(t2, 15);
    t2 = t2[15];
    t3 = arg.get$storage();
    if (15 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 15);
    t3 = t3[15];
    if (15 >= t6)
      throw H.ioore(t1, 15);
    t1[15] = t2 - t3;
    return r;
  },
  scale$3: function(_, x, y, z) {
    var t1, t2, sx, sy, sz, t3;
    t1 = x.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    sx = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    sy = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    sz = t1[2];
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (typeof sx !== "number")
      throw H.iae(sx);
    t1[0] = t3 * sx;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1] = t1[1] * sx;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1[2] = t1[2] * sx;
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1[3] = t1[3] * sx;
    if (4 >= t2)
      throw H.ioore(t1, 4);
    t3 = t1[4];
    if (typeof sy !== "number")
      throw H.iae(sy);
    t1[4] = t3 * sy;
    if (5 >= t2)
      throw H.ioore(t1, 5);
    t1[5] = t1[5] * sy;
    if (6 >= t2)
      throw H.ioore(t1, 6);
    t1[6] = t1[6] * sy;
    if (7 >= t2)
      throw H.ioore(t1, 7);
    t1[7] = t1[7] * sy;
    if (8 >= t2)
      throw H.ioore(t1, 8);
    t3 = t1[8];
    if (typeof sz !== "number")
      throw H.iae(sz);
    t1[8] = t3 * sz;
    if (9 >= t2)
      throw H.ioore(t1, 9);
    t1[9] = t1[9] * sz;
    if (10 >= t2)
      throw H.ioore(t1, 10);
    t1[10] = t1[10] * sz;
    if (11 >= t2)
      throw H.ioore(t1, 11);
    t1[11] = t1[11] * sz;
    if (12 >= t2)
      throw H.ioore(t1, 12);
    t1[12] = t1[12] * 1;
    if (13 >= t2)
      throw H.ioore(t1, 13);
    t1[13] = t1[13] * 1;
    if (14 >= t2)
      throw H.ioore(t1, 14);
    t1[14] = t1[14] * 1;
    if (15 >= t2)
      throw H.ioore(t1, 15);
    t1[15] = t1[15] * 1;
    return this;
  },
  scale$1: function($receiver, x) {
    return this.scale$3($receiver, x, null, null);
  },
  $negate: function(_) {
    var t1, r, t2, t3, t4, t5;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = r.storage;
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t4[0] = -t3;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t3 = t1[1];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t4[1] = -t3;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t3 = t1[2];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t4[2] = -t3;
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    if (3 >= t5)
      throw H.ioore(t4, 3);
    t4[3] = -t1;
    return r;
  },
  setZero$0: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0] = 0;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1] = 0;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1[2] = 0;
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1[3] = 0;
    if (4 >= t2)
      throw H.ioore(t1, 4);
    t1[4] = 0;
    if (5 >= t2)
      throw H.ioore(t1, 5);
    t1[5] = 0;
    if (6 >= t2)
      throw H.ioore(t1, 6);
    t1[6] = 0;
    if (7 >= t2)
      throw H.ioore(t1, 7);
    t1[7] = 0;
    if (8 >= t2)
      throw H.ioore(t1, 8);
    t1[8] = 0;
    if (9 >= t2)
      throw H.ioore(t1, 9);
    t1[9] = 0;
    if (10 >= t2)
      throw H.ioore(t1, 10);
    t1[10] = 0;
    if (11 >= t2)
      throw H.ioore(t1, 11);
    t1[11] = 0;
    if (12 >= t2)
      throw H.ioore(t1, 12);
    t1[12] = 0;
    if (13 >= t2)
      throw H.ioore(t1, 13);
    t1[13] = 0;
    if (14 >= t2)
      throw H.ioore(t1, 14);
    t1[14] = 0;
    if (15 >= t2)
      throw H.ioore(t1, 15);
    t1[15] = 0;
    return this;
  },
  setIdentity$0: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0] = 1;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1] = 0;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1[2] = 0;
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1[3] = 0;
    if (4 >= t2)
      throw H.ioore(t1, 4);
    t1[4] = 0;
    if (5 >= t2)
      throw H.ioore(t1, 5);
    t1[5] = 1;
    if (6 >= t2)
      throw H.ioore(t1, 6);
    t1[6] = 0;
    if (7 >= t2)
      throw H.ioore(t1, 7);
    t1[7] = 0;
    if (8 >= t2)
      throw H.ioore(t1, 8);
    t1[8] = 0;
    if (9 >= t2)
      throw H.ioore(t1, 9);
    t1[9] = 0;
    if (10 >= t2)
      throw H.ioore(t1, 10);
    t1[10] = 1;
    if (11 >= t2)
      throw H.ioore(t1, 11);
    t1[11] = 0;
    if (12 >= t2)
      throw H.ioore(t1, 12);
    t1[12] = 0;
    if (13 >= t2)
      throw H.ioore(t1, 13);
    t1[13] = 0;
    if (14 >= t2)
      throw H.ioore(t1, 14);
    t1[14] = 0;
    if (15 >= t2)
      throw H.ioore(t1, 15);
    t1[15] = 1;
    return this;
  },
  transpose$0: function() {
    var t1, t2, temp;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (4 >= t2)
      throw H.ioore(t1, 4);
    temp = t1[4];
    t1[4] = t1[1];
    t1[1] = temp;
    if (8 >= t2)
      throw H.ioore(t1, 8);
    temp = t1[8];
    t1[8] = t1[2];
    t1[2] = temp;
    if (12 >= t2)
      throw H.ioore(t1, 12);
    temp = t1[12];
    t1[12] = t1[3];
    t1[3] = temp;
    temp = t1[9];
    t1[9] = t1[6];
    t1[6] = temp;
    if (13 >= t2)
      throw H.ioore(t1, 13);
    temp = t1[13];
    t1[13] = t1[7];
    t1[7] = temp;
    if (14 >= t2)
      throw H.ioore(t1, 14);
    temp = t1[14];
    t1[14] = t1[11];
    t1[11] = temp;
    return this;
  },
  getRotation$0: function() {
    var t1, r, t2, t3, t4, t5;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t4 = t2[0];
    t5 = C.JS_CONST_ZYJ(t1);
    if (0 >= t5)
      throw H.ioore(t1, 0);
    t1[0] = t4;
    if (1 >= t3)
      throw H.ioore(t2, 1);
    t4 = t2[1];
    if (1 >= t5)
      throw H.ioore(t1, 1);
    t1[1] = t4;
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t4 = t2[2];
    if (2 >= t5)
      throw H.ioore(t1, 2);
    t1[2] = t4;
    if (4 >= t3)
      throw H.ioore(t2, 4);
    t4 = t2[4];
    if (3 >= t5)
      throw H.ioore(t1, 3);
    t1[3] = t4;
    if (5 >= t3)
      throw H.ioore(t2, 5);
    t4 = t2[5];
    if (4 >= t5)
      throw H.ioore(t1, 4);
    t1[4] = t4;
    if (6 >= t3)
      throw H.ioore(t2, 6);
    t4 = t2[6];
    if (5 >= t5)
      throw H.ioore(t1, 5);
    t1[5] = t4;
    if (8 >= t3)
      throw H.ioore(t2, 8);
    t4 = t2[8];
    if (6 >= t5)
      throw H.ioore(t1, 6);
    t1[6] = t4;
    if (9 >= t3)
      throw H.ioore(t2, 9);
    t4 = t2[9];
    if (7 >= t5)
      throw H.ioore(t1, 7);
    t1[7] = t4;
    if (10 >= t3)
      throw H.ioore(t2, 10);
    t2 = t2[10];
    if (8 >= t5)
      throw H.ioore(t1, 8);
    t1[8] = t2;
    return r;
  },
  invert$0: function() {
    var t1, t2, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, det, invDet, t3;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    a00 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    a01 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    a02 = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    a03 = t1[3];
    if (4 >= t2)
      throw H.ioore(t1, 4);
    a10 = t1[4];
    if (5 >= t2)
      throw H.ioore(t1, 5);
    a11 = t1[5];
    if (6 >= t2)
      throw H.ioore(t1, 6);
    a12 = t1[6];
    if (7 >= t2)
      throw H.ioore(t1, 7);
    a13 = t1[7];
    if (8 >= t2)
      throw H.ioore(t1, 8);
    a20 = t1[8];
    if (9 >= t2)
      throw H.ioore(t1, 9);
    a21 = t1[9];
    if (10 >= t2)
      throw H.ioore(t1, 10);
    a22 = t1[10];
    if (11 >= t2)
      throw H.ioore(t1, 11);
    a23 = t1[11];
    if (12 >= t2)
      throw H.ioore(t1, 12);
    a30 = t1[12];
    if (13 >= t2)
      throw H.ioore(t1, 13);
    a31 = t1[13];
    if (14 >= t2)
      throw H.ioore(t1, 14);
    a32 = t1[14];
    if (15 >= t2)
      throw H.ioore(t1, 15);
    a33 = t1[15];
    b00 = a00 * a11 - a01 * a10;
    b01 = a00 * a12 - a02 * a10;
    b02 = a00 * a13 - a03 * a10;
    b03 = a01 * a12 - a02 * a11;
    b04 = a01 * a13 - a03 * a11;
    b05 = a02 * a13 - a03 * a12;
    b06 = a20 * a31 - a21 * a30;
    b07 = a20 * a32 - a22 * a30;
    b08 = a20 * a33 - a23 * a30;
    b09 = a21 * a32 - a22 * a31;
    b10 = a21 * a33 - a23 * a31;
    b11 = a22 * a33 - a23 * a32;
    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (det === 0)
      return det;
    invDet = 1 / det;
    t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
    t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
    t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
    t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
    t2 = -a10;
    t1[4] = (t2 * b11 + a12 * b08 - a13 * b07) * invDet;
    t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
    t3 = -a30;
    t1[6] = (t3 * b05 + a32 * b02 - a33 * b01) * invDet;
    t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
    t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
    t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
    t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
    t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
    t1[12] = (t2 * b09 + a11 * b07 - a12 * b06) * invDet;
    t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
    t1[14] = (t3 * b03 + a31 * b01 - a32 * b00) * invDet;
    t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
    return det;
  },
  copyInverse$1: function(arg) {
    var t1, t2, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, det, invDet, t3, t4;
    t1 = arg.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    a00 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    a01 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    a02 = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    a03 = t1[3];
    if (4 >= t2)
      throw H.ioore(t1, 4);
    a10 = t1[4];
    if (5 >= t2)
      throw H.ioore(t1, 5);
    a11 = t1[5];
    if (6 >= t2)
      throw H.ioore(t1, 6);
    a12 = t1[6];
    if (7 >= t2)
      throw H.ioore(t1, 7);
    a13 = t1[7];
    if (8 >= t2)
      throw H.ioore(t1, 8);
    a20 = t1[8];
    if (9 >= t2)
      throw H.ioore(t1, 9);
    a21 = t1[9];
    if (10 >= t2)
      throw H.ioore(t1, 10);
    a22 = t1[10];
    if (11 >= t2)
      throw H.ioore(t1, 11);
    a23 = t1[11];
    if (12 >= t2)
      throw H.ioore(t1, 12);
    a30 = t1[12];
    if (13 >= t2)
      throw H.ioore(t1, 13);
    a31 = t1[13];
    if (14 >= t2)
      throw H.ioore(t1, 14);
    a32 = t1[14];
    if (15 >= t2)
      throw H.ioore(t1, 15);
    a33 = t1[15];
    b00 = a00 * a11 - a01 * a10;
    b01 = a00 * a12 - a02 * a10;
    b02 = a00 * a13 - a03 * a10;
    b03 = a01 * a12 - a02 * a11;
    b04 = a01 * a13 - a03 * a11;
    b05 = a02 * a13 - a03 * a12;
    b06 = a20 * a31 - a21 * a30;
    b07 = a20 * a32 - a22 * a30;
    b08 = a20 * a33 - a23 * a30;
    b09 = a21 * a32 - a22 * a31;
    b10 = a21 * a33 - a23 * a31;
    b11 = a22 * a33 - a23 * a32;
    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (det === 0) {
      this.setFrom$1(arg);
      return 0;
    }
    invDet = 1 / det;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
    t3 = -a10;
    if (4 >= t2)
      throw H.ioore(t1, 4);
    t1[4] = (t3 * b11 + a12 * b08 - a13 * b07) * invDet;
    if (5 >= t2)
      throw H.ioore(t1, 5);
    t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
    t4 = -a30;
    if (6 >= t2)
      throw H.ioore(t1, 6);
    t1[6] = (t4 * b05 + a32 * b02 - a33 * b01) * invDet;
    if (7 >= t2)
      throw H.ioore(t1, 7);
    t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
    if (8 >= t2)
      throw H.ioore(t1, 8);
    t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
    if (9 >= t2)
      throw H.ioore(t1, 9);
    t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
    if (10 >= t2)
      throw H.ioore(t1, 10);
    t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
    if (11 >= t2)
      throw H.ioore(t1, 11);
    t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
    if (12 >= t2)
      throw H.ioore(t1, 12);
    t1[12] = (t3 * b09 + a11 * b07 - a12 * b06) * invDet;
    if (13 >= t2)
      throw H.ioore(t1, 13);
    t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
    if (14 >= t2)
      throw H.ioore(t1, 14);
    t1[14] = (t4 * b03 + a31 * b01 - a32 * b00) * invDet;
    if (15 >= t2)
      throw H.ioore(t1, 15);
    t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
    return det;
  },
  copyIntoArray$2: function(array, offset) {
    var t1, t2, t3, t4;
    t1 = offset + 15;
    t2 = this.storage;
    if (15 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 15);
    t3 = t2[15];
    t4 = C.JS_CONST_ZYJ(array);
    if (t1 < 0 || t1 >= t4)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 14;
    t1 = t2[14];
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 13;
    t3 = t2[13];
    if (t1 < 0 || t1 >= t4)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 12;
    t1 = t2[12];
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 11;
    t3 = t2[11];
    if (t1 < 0 || t1 >= t4)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 10;
    t1 = t2[10];
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 9;
    t3 = t2[9];
    if (t1 < 0 || t1 >= t4)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 8;
    t1 = t2[8];
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 7;
    t3 = t2[7];
    if (t1 < 0 || t1 >= t4)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 6;
    t1 = t2[6];
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 5;
    t3 = t2[5];
    if (t1 < 0 || t1 >= t4)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 4;
    t1 = t2[4];
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 3;
    t3 = t2[3];
    if (t1 < 0 || t1 >= t4)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 2;
    t1 = t2[2];
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 1;
    t3 = t2[1];
    if (t1 < 0 || t1 >= t4)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 0;
    t2 = t2[0];
    if (t3 < 0 || t3 >= t4)
      throw H.ioore(array, t3);
    array[t3] = t2;
  },
  copyIntoArray$1: function(array) {
    return this.copyIntoArray$2(array, 0);
  }
},

Quaternion: {"": "Object;storage<",
  get$x: function(_) {
    var t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this.storage;
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    return t1[1];
  },
  get$z: function(_) {
    var t1 = this.storage;
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 2);
    return t1[2];
  },
  set$y: function(_, y) {
    var t1 = this.storage;
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    t1[1] = y;
  },
  set$z: function(_, z) {
    var t1 = this.storage;
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 2);
    t1[2] = z;
  },
  clone$0: function(_) {
    return T.Quaternion$copy(this);
  },
  normalize$0: function() {
    var t1, l;
    t1 = this.get$length2();
    l = Math.sqrt(t1);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    if (3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 3);
    t1[3] = t1[3] * l;
    t1[2] = t1[2] * l;
    t1[1] = t1[1] * l;
    t1[0] = t1[0] * l;
    return this;
  },
  inverse$0: function() {
    var l, t1;
    l = 1 / this.get$length2();
    t1 = this.storage;
    if (3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 3);
    t1[3] = t1[3] * l;
    t1[2] = -t1[2] * l;
    t1[1] = -t1[1] * l;
    t1[0] = -t1[0] * l;
    return this;
  },
  get$length2: function() {
    var t1, t2, _x, _y, _z, _w;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    _x = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    _y = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    _z = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    _w = t1[3];
    return _x * _x + _y * _y + _z * _z + _w * _w;
  },
  get$length: function(_) {
    var t1 = this.get$length2();
    return Math.sqrt(t1);
  },
  $mul: function(_, other) {
    var t1, _w, _z, _y, _x, ow, oz, oy, ox, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
    t1 = this.storage;
    if (3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 3);
    _w = t1[3];
    _z = t1[2];
    _y = t1[1];
    _x = t1[0];
    t1 = other.get$storage();
    if (3 >= t1.length)
      throw H.ioore(t1, 3);
    ow = t1[3];
    oz = t1[2];
    oy = t1[1];
    ox = t1[0];
    if (typeof ox !== "number")
      throw H.iae(ox);
    t1 = C.JSNumber_methods.$mul(_w, ox);
    if (typeof ow !== "number")
      throw H.iae(ow);
    t2 = C.JSNumber_methods.$mul(_x, ow);
    if (typeof oz !== "number")
      throw H.iae(oz);
    t3 = C.JSNumber_methods.$mul(_y, oz);
    if (typeof oy !== "number")
      throw H.iae(oy);
    t4 = C.JSNumber_methods.$mul(_z, oy);
    t5 = C.JSNumber_methods.$mul(_w, oy);
    t6 = C.JSNumber_methods.$mul(_y, ow);
    t7 = C.JSNumber_methods.$mul(_z, ox);
    t8 = C.JSNumber_methods.$mul(_x, oz);
    t9 = C.JSNumber_methods.$mul(_w, oz);
    t10 = C.JSNumber_methods.$mul(_z, ow);
    t11 = C.JSNumber_methods.$mul(_x, oy);
    t12 = C.JSNumber_methods.$mul(_y, ox);
    t13 = C.JSNumber_methods.$mul(_w, ow);
    t14 = C.JSNumber_methods.$mul(_x, ox);
    t15 = C.JSNumber_methods.$mul(_y, oy);
    t16 = C.JSNumber_methods.$mul(_z, oz);
    t17 = new Float32Array(4);
    t17.$dartCachedLength = t17.length;
    t17 = new T.Quaternion(t17);
    t18 = t17.storage;
    t19 = C.JS_CONST_ZYJ(t18);
    if (0 >= t19)
      throw H.ioore(t18, 0);
    t18[0] = t1 + t2 + t3 - t4;
    if (1 >= t19)
      throw H.ioore(t18, 1);
    t18[1] = t5 + t6 + t7 - t8;
    if (2 >= t19)
      throw H.ioore(t18, 2);
    t18[2] = t9 + t10 + t11 - t12;
    if (3 >= t19)
      throw H.ioore(t18, 3);
    t18[3] = t13 - t14 - t15 - t16;
    return t17;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t7 = t1[1];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t8 = t4[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t9 = t1[2];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t10 = t4[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    if (3 >= t5)
      throw H.ioore(t4, 3);
    t4 = t4[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Quaternion(t5);
    t2 = t5.storage;
    t11 = C.JS_CONST_ZYJ(t2);
    if (0 >= t11)
      throw H.ioore(t2, 0);
    t2[0] = t3 + t6;
    if (1 >= t11)
      throw H.ioore(t2, 1);
    t2[1] = t7 + t8;
    if (2 >= t11)
      throw H.ioore(t2, 2);
    t2[2] = t9 + t10;
    if (3 >= t11)
      throw H.ioore(t2, 3);
    t2[3] = t1 + t4;
    return t5;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t7 = t1[1];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t8 = t4[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t9 = t1[2];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t10 = t4[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    if (3 >= t5)
      throw H.ioore(t4, 3);
    t4 = t4[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Quaternion(t5);
    t2 = t5.storage;
    t11 = C.JS_CONST_ZYJ(t2);
    if (0 >= t11)
      throw H.ioore(t2, 0);
    t2[0] = t3 - t6;
    if (1 >= t11)
      throw H.ioore(t2, 1);
    t2[1] = t7 - t8;
    if (2 >= t11)
      throw H.ioore(t2, 2);
    t2[2] = t9 - t10;
    if (3 >= t11)
      throw H.ioore(t2, 3);
    t2[3] = t1 - t4;
    return t5;
  },
  $negate: function(_) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t4 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t5 = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    t2 = new Float32Array(4);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Quaternion(t2);
    t6 = t2.storage;
    t7 = C.JS_CONST_ZYJ(t6);
    if (0 >= t7)
      throw H.ioore(t6, 0);
    t6[0] = -t3;
    if (1 >= t7)
      throw H.ioore(t6, 1);
    t6[1] = -t4;
    if (2 >= t7)
      throw H.ioore(t6, 2);
    t6[2] = -t5;
    if (3 >= t7)
      throw H.ioore(t6, 3);
    t6[3] = -t1;
    return t2;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, arg) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    t1[i] = arg;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 0);
    t2 = H.S(t1[0]) + ", ";
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    t2 = t2 + H.S(t1[1]) + ", ";
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 2);
    t2 = t2 + H.S(t1[2]) + " @ ";
    if (3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 3);
    return t2 + H.S(t1[3]);
  },
  Quaternion$fromRotation$1: function(rotationMatrix) {
    var trace, s, t1, t2, t3, t4, i, j, k, t5, t6, t7, t8, t9;
    trace = rotationMatrix.trace$0();
    if (trace > 0) {
      s = Math.sqrt(trace + 1);
      t1 = this.storage;
      if (3 >= C.JS_CONST_ZYJ(t1))
        throw H.ioore(t1, 3);
      t1[3] = s * 0.5;
      s = 0.5 / s;
      t2 = rotationMatrix.storage;
      t3 = C.JS_CONST_ZYJ(t2);
      if (5 >= t3)
        throw H.ioore(t2, 5);
      t4 = t2[5];
      if (7 >= t3)
        throw H.ioore(t2, 7);
      t1[0] = (t4 - t2[7]) * s;
      t1[1] = (t2[6] - t2[2]) * s;
      t1[2] = (t2[1] - t2[3]) * s;
    } else {
      t1 = rotationMatrix.storage;
      t2 = C.JS_CONST_ZYJ(t1);
      if (0 >= t2)
        throw H.ioore(t1, 0);
      t3 = t1[0];
      if (4 >= t2)
        throw H.ioore(t1, 4);
      t4 = t1[4];
      if (t3 < t4) {
        if (8 >= t2)
          throw H.ioore(t1, 8);
        i = t4 < t1[8] ? 2 : 1;
      } else {
        if (8 >= t2)
          throw H.ioore(t1, 8);
        i = t3 < t1[8] ? 2 : 0;
      }
      j = C.JSInt_methods.$mod(i + 1, 3);
      k = C.JSInt_methods.$mod(i + 2, 3);
      t3 = i * 3;
      t4 = t3 + i;
      if (t4 < 0 || t4 >= t2)
        throw H.ioore(t1, t4);
      t4 = t1[t4];
      t5 = j * 3;
      t6 = t5 + j;
      if (t6 < 0 || t6 >= t2)
        throw H.ioore(t1, t6);
      t6 = t1[t6];
      t7 = k * 3;
      t8 = t7 + k;
      if (t8 < 0 || t8 >= t2)
        throw H.ioore(t1, t8);
      t8 = t1[t8];
      s = Math.sqrt(t4 - t6 - t8 + 1);
      t2 = this.storage;
      t4 = C.JS_CONST_ZYJ(t2);
      if (i >= t4)
        throw H.ioore(t2, i);
      t2[i] = s * 0.5;
      s = 0.5 / s;
      t6 = t5 + k;
      t8 = C.JS_CONST_ZYJ(t1);
      if (t6 < 0 || t6 >= t8)
        throw H.ioore(t1, t6);
      t6 = t1[t6];
      t9 = t7 + j;
      if (t9 < 0 || t9 >= t8)
        throw H.ioore(t1, t9);
      t9 = t1[t9];
      if (3 >= t4)
        throw H.ioore(t2, 3);
      t2[3] = (t6 - t9) * s;
      t9 = t3 + j;
      if (t9 < 0 || t9 >= t8)
        throw H.ioore(t1, t9);
      t9 = t1[t9];
      t5 += i;
      if (t5 < 0 || t5 >= t8)
        throw H.ioore(t1, t5);
      t5 = t1[t5];
      if (j < 0 || j >= t4)
        throw H.ioore(t2, j);
      t2[j] = (t9 + t5) * s;
      t3 += k;
      if (t3 < 0 || t3 >= t8)
        throw H.ioore(t1, t3);
      t3 = t1[t3];
      t7 += i;
      if (t7 < 0 || t7 >= t8)
        throw H.ioore(t1, t7);
      t7 = t1[t7];
      if (k < 0 || k >= t4)
        throw H.ioore(t2, k);
      t2[k] = (t3 + t7) * s;
    }
  },
  Quaternion$identity$0: function() {
    var t1 = this.storage;
    if (3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 3);
    t1[3] = 1;
  },
  Quaternion$copy$1: function(original) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = original.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t4 = t2[0];
    t5 = C.JS_CONST_ZYJ(t1);
    if (0 >= t5)
      throw H.ioore(t1, 0);
    t1[0] = t4;
    if (1 >= t3)
      throw H.ioore(t2, 1);
    t4 = t2[1];
    if (1 >= t5)
      throw H.ioore(t1, 1);
    t1[1] = t4;
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t4 = t2[2];
    if (2 >= t5)
      throw H.ioore(t1, 2);
    t1[2] = t4;
    if (3 >= t3)
      throw H.ioore(t2, 3);
    t2 = t2[3];
    if (3 >= t5)
      throw H.ioore(t1, 3);
    t1[3] = t2;
  },
  static: {
Quaternion$fromRotation: function(rotationMatrix) {
  var t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Quaternion(t1);
  t1.Quaternion$fromRotation$1(rotationMatrix);
  return t1;
},

Quaternion$copy: function(original) {
  var t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Quaternion(t1);
  t1.Quaternion$copy$1(original);
  return t1;
},

Quaternion$identity: function() {
  var t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Quaternion(t1);
  t1.Quaternion$identity$0();
  return t1;
}}

},

Vector2: {"": "Object;storage<",
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 0);
    t2 = "[" + H.S(t1[0]) + ",";
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    return t2 + H.S(t1[1]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1 = t1[1];
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t4 = t2.storage;
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t4[0] = -t3;
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t4[1] = -t1;
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1 = t1[1];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t4 = t4[1];
    t5 = new Float32Array(2);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector2(t5);
    t2 = t5.storage;
    t7 = C.JS_CONST_ZYJ(t2);
    if (0 >= t7)
      throw H.ioore(t2, 0);
    t2[0] = t3 - t6;
    if (1 >= t7)
      throw H.ioore(t2, 1);
    t2[1] = t1 - t4;
    return t5;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1 = t1[1];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t4 = t4[1];
    t5 = new Float32Array(2);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector2(t5);
    t2 = t5.storage;
    t7 = C.JS_CONST_ZYJ(t2);
    if (0 >= t7)
      throw H.ioore(t2, 0);
    t2[0] = t3 + t6;
    if (1 >= t7)
      throw H.ioore(t2, 1);
    t2[1] = t1 + t4;
    return t5;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4, t5;
    o = 1 / scale;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1 = t1[1];
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t4 = t2.storage;
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t4[0] = t3 * o;
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t4[1] = t1 * o;
    return t2;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1 = t1[1];
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t4 = t2.storage;
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t4[0] = t3 * scale;
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t4[1] = t1 * scale;
    return t2;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1 = t1[1];
    return Math.sqrt(t3 * t3 + t1 * t1);
  },
  normalize$0: function() {
    var l, t1, t2;
    l = this.get$length(this);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0] = t1[0] * l;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1] = t1[1] * l;
    return this;
  },
  cross$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = other.storage;
    if (1 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 1);
    t5 = t4[1];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    return t3 * t5 - t1[1] * t4[0];
  },
  clone$0: function(_) {
    var t1, t2, t3, t4;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t2 = t1.storage;
    t3 = this.storage;
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t4 = t3[1];
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t2[1] = t4;
    t2[0] = t3[0];
    return t1;
  },
  set$y: function(_, arg) {
    var t1 = this.storage;
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    t1[1] = arg;
    return arg;
  },
  get$x: function(_) {
    var t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this.storage;
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    return t1[1];
  }
},

Vector3: {"": "Object;storage<",
  setValues$3: function(x_, y_, z_) {
    var t1, t2;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0] = x_;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1] = y_;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1[2] = z_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = other.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t4 = t2[0];
    t5 = C.JS_CONST_ZYJ(t1);
    if (0 >= t5)
      throw H.ioore(t1, 0);
    t1[0] = t4;
    if (1 >= t3)
      throw H.ioore(t2, 1);
    t4 = t2[1];
    if (1 >= t5)
      throw H.ioore(t1, 1);
    t1[1] = t4;
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t2 = t2[2];
    if (2 >= t5)
      throw H.ioore(t1, 2);
    t1[2] = t2;
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 0);
    t2 = "[" + H.S(t1[0]) + ",";
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    t2 = t2 + H.S(t1[1]) + ",";
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 2);
    return t2 + H.S(t1[2]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t4 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1 = t1[2];
    t2 = new Float32Array(3);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector3(t2);
    t5 = t2.storage;
    t6 = C.JS_CONST_ZYJ(t5);
    if (0 >= t6)
      throw H.ioore(t5, 0);
    t5[0] = -t3;
    if (1 >= t6)
      throw H.ioore(t5, 1);
    t5[1] = -t4;
    if (2 >= t6)
      throw H.ioore(t5, 2);
    t5[2] = -t1;
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t7 = t1[1];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t8 = t4[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1 = t1[2];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t4 = t4[2];
    t5 = new Float32Array(3);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector3(t5);
    t2 = t5.storage;
    t9 = C.JS_CONST_ZYJ(t2);
    if (0 >= t9)
      throw H.ioore(t2, 0);
    t2[0] = t3 - t6;
    if (1 >= t9)
      throw H.ioore(t2, 1);
    t2[1] = t7 - t8;
    if (2 >= t9)
      throw H.ioore(t2, 2);
    t2[2] = t1 - t4;
    return t5;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t7 = t1[1];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t8 = t4[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1 = t1[2];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t4 = t4[2];
    t5 = new Float32Array(3);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector3(t5);
    t2 = t5.storage;
    t9 = C.JS_CONST_ZYJ(t2);
    if (0 >= t9)
      throw H.ioore(t2, 0);
    t2[0] = t3 + t6;
    if (1 >= t9)
      throw H.ioore(t2, 1);
    t2[1] = t7 + t8;
    if (2 >= t9)
      throw H.ioore(t2, 2);
    t2[2] = t1 + t4;
    return t5;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4, t5, t6;
    o = 1 / scale;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t4 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1 = t1[2];
    t2 = new Float32Array(3);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector3(t2);
    t5 = t2.storage;
    t6 = C.JS_CONST_ZYJ(t5);
    if (0 >= t6)
      throw H.ioore(t5, 0);
    t5[0] = t3 * o;
    if (1 >= t6)
      throw H.ioore(t5, 1);
    t5[1] = t4 * o;
    if (2 >= t6)
      throw H.ioore(t5, 2);
    t5[2] = t1 * o;
    return t2;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t4 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1 = t1[2];
    t2 = new Float32Array(3);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector3(t2);
    t5 = t2.storage;
    t6 = C.JS_CONST_ZYJ(t5);
    if (0 >= t6)
      throw H.ioore(t5, 0);
    t5[0] = t3 * scale;
    if (1 >= t6)
      throw H.ioore(t5, 1);
    t5[1] = t4 * scale;
    if (2 >= t6)
      throw H.ioore(t5, 2);
    t5[2] = t1 * scale;
    return t2;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t4 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1 = t1[2];
    return Math.sqrt(t3 * t3 + t4 * t4 + t1 * t1);
  },
  normalize$0: function() {
    var l, t1, t2;
    l = this.get$length(this);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0] = t1[0] * l;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1] = t1[1] * l;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1[2] = t1[2] * l;
    return this;
  },
  cross$1: function(other) {
    var t1, t2, _x, _y, _z, ox, oy, oz, t3;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    _x = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    _y = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    _z = t1[2];
    t1 = other.get$storage();
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    ox = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    oy = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    oz = t1[2];
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t2 = t1.storage;
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t2[0] = _y * oz - _z * oy;
    if (1 >= t3)
      throw H.ioore(t2, 1);
    t2[1] = _z * ox - _x * oz;
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t2[2] = _x * oy - _y * ox;
    return t1;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setFrom$1(this);
    return t1;
  },
  set$y: function(_, arg) {
    var t1 = this.storage;
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    t1[1] = arg;
    return arg;
  },
  set$z: function(_, arg) {
    var t1 = this.storage;
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 2);
    t1[2] = arg;
    return arg;
  },
  get$x: function(_) {
    var t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this.storage;
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    return t1[1];
  },
  get$z: function(_) {
    var t1 = this.storage;
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 2);
    return t1[2];
  },
  $isVector3: true
},

Vector4: {"": "Object;storage<",
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = other.storage;
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t3 = t2[3];
    if (3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 3);
    t1[3] = t3;
    t1[2] = t2[2];
    t1[1] = t2[1];
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 0);
    t2 = H.S(t1[0]) + ",";
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    t2 = t2 + H.S(t1[1]) + ",";
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 2);
    t2 = t2 + H.S(t1[2]) + ",";
    if (3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 3);
    return t2 + H.S(t1[3]);
  },
  $negate: function(_) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t4 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t5 = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    t2 = new Float32Array(4);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector4(t2);
    t6 = t2.storage;
    if (3 >= C.JS_CONST_ZYJ(t6))
      throw H.ioore(t6, 3);
    t6[3] = -t1;
    t6[2] = -t5;
    t6[1] = -t4;
    t6[0] = -t3;
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t7 = t1[1];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t8 = t4[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t9 = t1[2];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t10 = t4[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    if (3 >= t5)
      throw H.ioore(t4, 3);
    t4 = t4[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector4(t5);
    t2 = t5.storage;
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t2[3] = t1 - t4;
    t2[2] = t9 - t10;
    t2[1] = t7 - t8;
    t2[0] = t3 - t6;
    return t5;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t7 = t1[1];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t8 = t4[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t9 = t1[2];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t10 = t4[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    if (3 >= t5)
      throw H.ioore(t4, 3);
    t4 = t4[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector4(t5);
    t2 = t5.storage;
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t2[3] = t1 + t4;
    t2[2] = t9 + t10;
    t2[1] = t7 + t8;
    t2[0] = t3 + t6;
    return t5;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4, t5, t6;
    o = 1 / scale;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t4 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t5 = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    t2 = new Float32Array(4);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector4(t2);
    t6 = t2.storage;
    if (3 >= C.JS_CONST_ZYJ(t6))
      throw H.ioore(t6, 3);
    t6[3] = t1 * o;
    t6[2] = t5 * o;
    t6[1] = t4 * o;
    t6[0] = t3 * o;
    return t2;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t4 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t5 = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    t2 = new Float32Array(4);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector4(t2);
    t6 = t2.storage;
    if (3 >= C.JS_CONST_ZYJ(t6))
      throw H.ioore(t6, 3);
    t6[3] = t1 * scale;
    t6[2] = t5 * scale;
    t6[1] = t4 * scale;
    t6[0] = t3 * scale;
    return t2;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t4 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t5 = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    return Math.sqrt(t3 * t3 + t4 * t4 + t5 * t5 + t1 * t1);
  },
  normalize$0: function() {
    var l, t1, t2;
    l = this.get$length(this);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0] = t1[0] * l;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1] = t1[1] * l;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1[2] = t1[2] * l;
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1[3] = t1[3] * l;
    return this;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector4(t1);
    t1.setFrom$1(this);
    return t1;
  },
  set$y: function(_, arg) {
    var t1 = this.storage;
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    t1[1] = arg;
    return arg;
  },
  set$z: function(_, arg) {
    var t1 = this.storage;
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 2);
    t1[2] = arg;
    return arg;
  },
  get$x: function(_) {
    var t1 = this.storage;
    if (0 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this.storage;
    if (1 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 1);
    return t1[1];
  },
  get$z: function(_) {
    var t1 = this.storage;
    if (2 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t1, 2);
    return t1[2];
  },
  $isVector4: true
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$_processWorkerMessage(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$toStringWrapper(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$invokeClosure(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.isAssignable$closure = H.isAssignable$closure = new H.Closure$isAssignable(H.isAssignable, "isAssignable$closure");
init.globalFunctions.typeNameInChrome$closure = H.typeNameInChrome$closure = new H.Closure$typeNameInChrome(H.typeNameInChrome, "typeNameInChrome$closure");
init.globalFunctions.typeNameInSafari$closure = H.typeNameInSafari$closure = new H.Closure$typeNameInSafari(H.typeNameInSafari, "typeNameInSafari$closure");
init.globalFunctions.typeNameInOpera$closure = H.typeNameInOpera$closure = new H.Closure$typeNameInOpera(H.typeNameInOpera, "typeNameInOpera$closure");
init.globalFunctions.typeNameInFirefox$closure = H.typeNameInFirefox$closure = new H.Closure$typeNameInFirefox(H.typeNameInFirefox, "typeNameInFirefox$closure");
init.globalFunctions.typeNameInIE$closure = H.typeNameInIE$closure = new H.Closure$typeNameInIE(H.typeNameInIE, "typeNameInIE$closure");
init.globalFunctions.constructorNameFallback$closure = H.constructorNameFallback$closure = new H.Closure$constructorNameFallback(H.constructorNameFallback, "constructorNameFallback$closure");
init.globalFunctions.callDartFunctionWith1Arg$closure = H.callDartFunctionWith1Arg$closure = new H.Closure$callDartFunctionWith1Arg(H.callDartFunctionWith1Arg, "callDartFunctionWith1Arg$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new P.Closure$_asyncRunCallback(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new P.Closure$_defaultEquals(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new P.Closure$_defaultHashCode(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.identical$closure = P.identical$closure = new P.Closure$identical(P.identical, "identical$closure");
init.globalFunctions.main$closure = T.main$closure = new T.Closure$main(T.main, "main$closure");
// Runtime type support
T.Quaternion.$isQuaternion = true;
T.Quaternion.$isObject = true;
T.Vector2.$isVector2 = true;
T.Vector2.$isObject = true;
T.Vector3.$isVector3 = true;
T.Vector3.$isObject = true;
T.Vector4.$isObject = true;
T.Vector4.$isVector4 = true;
P.Object.$isObject = true;
W.ProgressEvent.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
W.HttpRequest.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isObject = true;
P.UniformLocation.$isObject = true;
H._IsolateContext.$isObject = true;
P.Duration.$isObject = true;
H._IsolateEvent.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
W.Element.$isObject = true;
W.Node.$isObject = true;
R.Mesh.$isMesh = true;
R.Mesh.$isObject = true;
J.JSArray.$isObject = true;
W.KeyboardEvent.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isObject = true;
J.JSDouble.$isdouble = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.ReceivePort.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
T.Matrix4.$isObject = true;
T.Matrix4.$isMatrix4 = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C_CloseToken = new H.CloseToken();
C.C_JsonCodec = new P.JsonCodec();
C.C_UnknownJavaScriptObject = new J.UnknownJavaScriptObject();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_error = new W.EventStreamProvider("error");
C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown");
C.EventStreamProvider_keyup = new W.EventStreamProvider("keyup");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown");
C.EventStreamProvider_progress = new W.EventStreamProvider("progress");
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_empty = Isolate.makeConstantList([]);
C.NodeList_methods = W.NodeList.prototype;
C.Window_methods = W.Window.prototype;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.interceptorsByTag = null;
$.leafTags = null;
$.interceptorToTag = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$._director = null;
J.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
J.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.bindBuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindBuffer$2(receiver, a0, a1);
};
J.bufferDataTyped$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferDataTyped$3(receiver, a0, a1, a2);
};
J.clear$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
J.clearColor$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearColor$4(receiver, a0, a1, a2, a3);
};
J.clone$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).clone$0(receiver);
};
J.createBuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createBuffer$0(receiver);
};
J.cullFace$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).cullFace$1(receiver, a0);
};
J.drawArrays$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).drawArrays$3(receiver, a0, a1, a2);
};
J.drawElements$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).drawElements$4(receiver, a0, a1, a2, a3);
};
J.enable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enable$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.frontFace$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).frontFace$1(receiver, a0);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$responseText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$responseText(receiver);
};
J.get$style$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$style(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.getContext3d$1$preserveDrawingBuffer$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext3d$1$preserveDrawingBuffer(receiver, a0);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.send$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$y$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$y(receiver, value);
};
J.set$z$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$z(receiver, value);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.useProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).useProgram$1(receiver, a0);
};
J.viewport$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).viewport$4(receiver, a0, a1, a2, a3);
};
$.mapTypeToInterceptor = [];
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "getTypeNameOf", "getTypeNameOf", "get$getTypeNameOf", function() {
  return H.getFunctionForTypeNameOf();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return new P.Expando("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_current", "_Zone__current", "get$_Zone__current", function() {
  return new P._DefaultZone(null, 0, 0, false);
});
Isolate.$lazy($, "_toStringList", "ListMixin__toStringList", "get$ListMixin__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "WORLD_UP", "WORLD_UP", "get$WORLD_UP", function() {
  var t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector3(t1);
  t1.setValues$3(0, 1, 0);
  return t1;
});
Isolate.$lazy($, "simpleShader", "Shader_simpleShader", "get$Shader_simpleShader", function() {
  return R.SimpleShader$_internal();
});
// Native classes
H.defineNativeMethods("DOMError|FileError|MediaError|MediaKeyError|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|WebGLBuffer|WebGLProgram|WebGLShader", J.Interceptor);

H.defineNativeMethods("HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFieldSetElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement", W.HtmlElement);

H.defineNativeMethodsNonleaf("HTMLElement", W.HtmlElement);

H.defineNativeMethods("HTMLAnchorElement", W.AnchorElement);

H.defineNativeMethods("HTMLCanvasElement", W.CanvasElement);

H.defineNativeMethods("CanvasRenderingContext2D", W.CanvasRenderingContext);

H.defineNativeMethodsNonleaf("CanvasRenderingContext", W.CanvasRenderingContext);

H.defineNativeMethods("CDATASection|CharacterData|Comment|ProcessingInstruction|Text", W.CharacterData);

H.defineNativeMethods("CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties", W.CssStyleDeclaration);

H.defineNativeMethods("DocumentFragment|ShadowRoot", W.DocumentFragment);

H.defineNativeMethods("DocumentType", W.DocumentType);

H.defineNativeMethods("DOMException", W.DomException);

H.defineNativeMethodsNonleaf("Element", W.Element);

H.defineNativeMethods("HTMLEmbedElement", W.EmbedElement);

H.defineNativeMethods("AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent", W.Event);

H.defineNativeMethodsNonleaf("Event", W.Event);

H.defineNativeMethodsNonleaf("EventTarget", W.EventTarget);

H.defineNativeMethods("HTMLFormElement", W.FormElement);

H.defineNativeMethods("HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection", W.HtmlCollection);

H.defineNativeMethods("XMLHttpRequest", W.HttpRequest);

H.defineNativeMethods("HTMLIFrameElement", W.IFrameElement);

H.defineNativeMethods("HTMLImageElement", W.ImageElement);

H.defineNativeMethods("HTMLInputElement", W.InputElement);

H.defineNativeMethods("KeyboardEvent", W.KeyboardEvent);

H.defineNativeMethods("HTMLAudioElement", W.MediaElement);

H.defineNativeMethodsNonleaf("HTMLMediaElement", W.MediaElement);

H.defineNativeMethods("DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent", W.MouseEvent);

H.defineNativeMethods("Navigator", W.Navigator);

H.defineNativeMethods("Attr|Document|Entity|HTMLDocument|Notation|SVGDocument", W.Node);

H.defineNativeMethodsNonleaf("Node", W.Node);

H.defineNativeMethods("NodeList|RadioNodeList", W.NodeList);

H.defineNativeMethods("HTMLObjectElement", W.ObjectElement);

H.defineNativeMethods("ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent", W.ProgressEvent);

H.defineNativeMethods("HTMLSelectElement", W.SelectElement);

H.defineNativeMethods("CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent|TouchEvent", W.UIEvent);

H.defineNativeMethodsNonleaf("UIEvent", W.UIEvent);

H.defineNativeMethods("HTMLVideoElement", W.VideoElement);

H.defineNativeMethods("DOMWindow|Window", W.Window);

H.defineNativeMethodsNonleaf("XMLHttpRequestEventTarget", W.XmlHttpRequestEventTarget);

H.defineNativeMethods("SVGAElement", P.AElement);

H.defineNativeMethods("SVGAltGlyphElement", P.AltGlyphElement);

H.defineNativeMethods("SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement", P.AnimationElement);

H.defineNativeMethods("SVGCircleElement", P.CircleElement);

H.defineNativeMethods("SVGClipPathElement", P.ClipPathElement);

H.defineNativeMethods("SVGDefsElement", P.DefsElement);

H.defineNativeMethods("SVGEllipseElement", P.EllipseElement);

H.defineNativeMethods("SVGFEBlendElement", P.FEBlendElement);

H.defineNativeMethods("SVGFEColorMatrixElement", P.FEColorMatrixElement);

H.defineNativeMethods("SVGFEComponentTransferElement", P.FEComponentTransferElement);

H.defineNativeMethods("SVGFECompositeElement", P.FECompositeElement);

H.defineNativeMethods("SVGFEConvolveMatrixElement", P.FEConvolveMatrixElement);

H.defineNativeMethods("SVGFEDiffuseLightingElement", P.FEDiffuseLightingElement);

H.defineNativeMethods("SVGFEDisplacementMapElement", P.FEDisplacementMapElement);

H.defineNativeMethods("SVGFEFloodElement", P.FEFloodElement);

H.defineNativeMethods("SVGFEGaussianBlurElement", P.FEGaussianBlurElement);

H.defineNativeMethods("SVGFEImageElement", P.FEImageElement);

H.defineNativeMethods("SVGFEMergeElement", P.FEMergeElement);

H.defineNativeMethods("SVGFEMorphologyElement", P.FEMorphologyElement);

H.defineNativeMethods("SVGFEOffsetElement", P.FEOffsetElement);

H.defineNativeMethods("SVGFEPointLightElement", P.FEPointLightElement);

H.defineNativeMethods("SVGFESpecularLightingElement", P.FESpecularLightingElement);

H.defineNativeMethods("SVGFESpotLightElement", P.FESpotLightElement);

H.defineNativeMethods("SVGFETileElement", P.FETileElement);

H.defineNativeMethods("SVGFETurbulenceElement", P.FETurbulenceElement);

H.defineNativeMethods("SVGFilterElement", P.FilterElement);

H.defineNativeMethods("SVGForeignObjectElement", P.ForeignObjectElement);

H.defineNativeMethods("SVGGElement", P.GElement);

H.defineNativeMethodsNonleaf("SVGGraphicsElement", P.GraphicsElement);

H.defineNativeMethods("SVGImageElement", P.ImageElement0);

H.defineNativeMethods("SVGLineElement", P.LineElement);

H.defineNativeMethods("SVGMarkerElement", P.MarkerElement);

H.defineNativeMethods("SVGMaskElement", P.MaskElement);

H.defineNativeMethods("SVGPathElement", P.PathElement);

H.defineNativeMethods("SVGPatternElement", P.PatternElement);

H.defineNativeMethods("SVGPolygonElement", P.PolygonElement);

H.defineNativeMethods("SVGPolylineElement", P.PolylineElement);

H.defineNativeMethods("SVGRect", P.Rect);

H.defineNativeMethods("SVGRectElement", P.RectElement);

H.defineNativeMethods("SVGScriptElement", P.ScriptElement0);

H.defineNativeMethods("SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGStyleElement|SVGTitleElement|SVGVKernElement", P.SvgElement);

H.defineNativeMethodsNonleaf("SVGElement", P.SvgElement);

H.defineNativeMethods("SVGSVGElement", P.SvgSvgElement);

H.defineNativeMethods("SVGSwitchElement", P.SwitchElement);

H.defineNativeMethods("SVGSymbolElement", P.SymbolElement);

H.defineNativeMethodsNonleaf("SVGTextContentElement", P.TextContentElement);

H.defineNativeMethods("SVGTextPathElement", P.TextPathElement);

H.defineNativeMethods("SVGTSpanElement|SVGTextElement", P.TextPositioningElement);

H.defineNativeMethodsNonleaf("SVGTextPositioningElement", P.TextPositioningElement);

H.defineNativeMethods("SVGUseElement", P.UseElement);

H.defineNativeMethods("SVGViewElement", P.ViewElement);

H.defineNativeMethods("SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement", P._GradientElement);

H.defineNativeMethods("SVGCursorElement", P._SVGCursorElement);

H.defineNativeMethods("SVGFEDropShadowElement", P._SVGFEDropShadowElement);

H.defineNativeMethods("SVGGlyphRefElement", P._SVGGlyphRefElement);

H.defineNativeMethods("SVGMPathElement", P._SVGMPathElement);

H.defineNativeMethods("SVGTRefElement", P._SVGTRefElement);

H.defineNativeMethods("WebGLRenderingContext", P.RenderingContext);

H.defineNativeMethods("WebGLUniformLocation", P.UniformLocation);

H.defineNativeMethodsExtended("ArrayBufferView", P.TypedData, [P.TypedData_ListMixin, P.TypedData_ListMixin_FixedLengthListMixin, P.TypedData_ListMixin0, P.TypedData_ListMixin_FixedLengthListMixin0, P.TypedData_ListMixin1, P.TypedData_ListMixin_FixedLengthListMixin1]);

H.defineNativeMethods("Float32Array", P.Float32List);

H.defineNativeMethods("Uint16Array", P.Uint16List);

H.defineNativeMethodsNonleaf("Uint8Array", P.Uint8List);


init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(T.main$closure); });
  } else {
    H.startRootIsolate(T.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      prototype = inheritFrom(constructor, superConstructor);
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
function dart_precompiled($collectedClasses) {
  var $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "bool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "List";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSMutableArray() {
  }
  JSMutableArray.builtin$cls = "JSMutableArray";
  if (!"name" in JSMutableArray)
    JSMutableArray.name = "JSMutableArray";
  $desc = $collectedClasses.JSMutableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSMutableArray.prototype = $desc;
  function JSFixedArray() {
  }
  JSFixedArray.builtin$cls = "JSFixedArray";
  if (!"name" in JSFixedArray)
    JSFixedArray.name = "JSFixedArray";
  $desc = $collectedClasses.JSFixedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSFixedArray.prototype = $desc;
  function JSExtendableArray() {
  }
  JSExtendableArray.builtin$cls = "JSExtendableArray";
  if (!"name" in JSExtendableArray)
    JSExtendableArray.name = "JSExtendableArray";
  $desc = $collectedClasses.JSExtendableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSExtendableArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "num";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "int";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "double";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "String";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function CloseToken() {
  }
  CloseToken.builtin$cls = "CloseToken";
  if (!"name" in CloseToken)
    CloseToken.name = "CloseToken";
  $desc = $collectedClasses.CloseToken;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseToken.prototype = $desc;
  function JsIsolateSink(_isClosed, _port) {
    this._isClosed = _isClosed;
    this._port = _port;
  }
  JsIsolateSink.builtin$cls = "JsIsolateSink";
  if (!"name" in JsIsolateSink)
    JsIsolateSink.name = "JsIsolateSink";
  $desc = $collectedClasses.JsIsolateSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsIsolateSink.prototype = $desc;
  JsIsolateSink.prototype.get$_port = function() {
    return this._port;
  };
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.isolateStatics = isolateStatics;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, replyTo_1) {
    this.entryPoint_0 = entryPoint_0;
    this.replyTo_1 = replyTo_1;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _BaseSendPort_call_closure(completer_0, port_1) {
    this.completer_0 = completer_0;
    this.port_1 = port_1;
  }
  _BaseSendPort_call_closure.builtin$cls = "_BaseSendPort_call_closure";
  if (!"name" in _BaseSendPort_call_closure)
    _BaseSendPort_call_closure.name = "_BaseSendPort_call_closure";
  $desc = $collectedClasses._BaseSendPort_call_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort_call_closure.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(this_1, message_2, replyTo_3) {
    this.this_1 = this_1;
    this.message_2 = message_2;
    this.replyTo_3 = replyTo_3;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _NativeJsSendPort_send__closure(box_0, this_4, shouldSerialize_5) {
    this.box_0 = box_0;
    this.this_4 = this_4;
    this.shouldSerialize_5 = shouldSerialize_5;
  }
  _NativeJsSendPort_send__closure.builtin$cls = "_NativeJsSendPort_send__closure";
  if (!"name" in _NativeJsSendPort_send__closure)
    _NativeJsSendPort_send__closure.name = "_NativeJsSendPort_send__closure";
  $desc = $collectedClasses._NativeJsSendPort_send__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send__closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function _WorkerSendPort_send_closure(this_0, message_1, replyTo_2) {
    this.this_0 = this_0;
    this.message_1 = message_1;
    this.replyTo_2 = replyTo_2;
  }
  _WorkerSendPort_send_closure.builtin$cls = "_WorkerSendPort_send_closure";
  if (!"name" in _WorkerSendPort_send_closure)
    _WorkerSendPort_send_closure.name = "_WorkerSendPort_send_closure";
  $desc = $collectedClasses._WorkerSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort_send_closure.prototype = $desc;
  function ReceivePortImpl(_id, _callback) {
    this._id = _id;
    this._callback = _callback;
  }
  ReceivePortImpl.builtin$cls = "ReceivePortImpl";
  if (!"name" in ReceivePortImpl)
    ReceivePortImpl.name = "ReceivePortImpl";
  $desc = $collectedClasses.ReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePortImpl.prototype = $desc;
  ReceivePortImpl.prototype.get$_id = function() {
    return this._id;
  };
  ReceivePortImpl.prototype.get$_callback = function() {
    return this._callback;
  };
  function _waitForPendingPorts_closure(callback_0) {
    this.callback_0 = callback_0;
  }
  _waitForPendingPorts_closure.builtin$cls = "_waitForPendingPorts_closure";
  if (!"name" in _waitForPendingPorts_closure)
    _waitForPendingPorts_closure.name = "_waitForPendingPorts_closure";
  $desc = $collectedClasses._waitForPendingPorts_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _waitForPendingPorts_closure.prototype = $desc;
  function _PendingSendPortFinder(ports, _visited) {
    this.ports = ports;
    this._visited = _visited;
  }
  _PendingSendPortFinder.builtin$cls = "_PendingSendPortFinder";
  if (!"name" in _PendingSendPortFinder)
    _PendingSendPortFinder.name = "_PendingSendPortFinder";
  $desc = $collectedClasses._PendingSendPortFinder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingSendPortFinder.prototype = $desc;
  function _PendingSendPortFinder_visitList_closure(this_0) {
    this.this_0 = this_0;
  }
  _PendingSendPortFinder_visitList_closure.builtin$cls = "_PendingSendPortFinder_visitList_closure";
  if (!"name" in _PendingSendPortFinder_visitList_closure)
    _PendingSendPortFinder_visitList_closure.name = "_PendingSendPortFinder_visitList_closure";
  $desc = $collectedClasses._PendingSendPortFinder_visitList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingSendPortFinder_visitList_closure.prototype = $desc;
  function _PendingSendPortFinder_visitMap_closure(this_0) {
    this.this_0 = this_0;
  }
  _PendingSendPortFinder_visitMap_closure.builtin$cls = "_PendingSendPortFinder_visitMap_closure";
  if (!"name" in _PendingSendPortFinder_visitMap_closure)
    _PendingSendPortFinder_visitMap_closure.name = "_PendingSendPortFinder_visitMap_closure";
  $desc = $collectedClasses._PendingSendPortFinder_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingSendPortFinder_visitMap_closure.prototype = $desc;
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function BoundClosure(_self, _target, _receiver, _liblib4$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this._liblib4$_name = _liblib4$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeImpl.prototype = $desc;
  function applyExperimentalFixup_newGetTagDartFunction(newGetTagJSFunction_0) {
    this.newGetTagJSFunction_0 = newGetTagJSFunction_0;
  }
  applyExperimentalFixup_newGetTagDartFunction.builtin$cls = "applyExperimentalFixup_newGetTagDartFunction";
  if (!"name" in applyExperimentalFixup_newGetTagDartFunction)
    applyExperimentalFixup_newGetTagDartFunction.name = "applyExperimentalFixup_newGetTagDartFunction";
  $desc = $collectedClasses.applyExperimentalFixup_newGetTagDartFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  applyExperimentalFixup_newGetTagDartFunction.prototype = $desc;
  function ListIterator(_iterable, _liblib$_length, _index, _liblib$_current) {
    this._iterable = _iterable;
    this._liblib$_length = _liblib$_length;
    this._index = _index;
    this._liblib$_current = _liblib$_current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function MappedIterator(_liblib$_current, _iterator, _f) {
    this._liblib$_current = _liblib$_current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function Future_wait_handleError(box_0) {
    this.box_0 = box_0;
  }
  Future_wait_handleError.builtin$cls = "Future_wait_handleError";
  if (!"name" in Future_wait_handleError)
    Future_wait_handleError.name = "Future_wait_handleError";
  $desc = $collectedClasses.Future_wait_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_handleError.prototype = $desc;
  function Future_wait_closure(box_0, pos_1) {
    this.box_0 = box_0;
    this.pos_1 = pos_1;
  }
  Future_wait_closure.builtin$cls = "Future_wait_closure";
  if (!"name" in Future_wait_closure)
    Future_wait_closure.name = "Future_wait_closure";
  $desc = $collectedClasses.Future_wait_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_closure.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  _Future.prototype.set$_nextListener = function(v) {
    return this._nextListener = v;
  };
  function Bound__completeError__Future(_self, _target, _receiver, _liblib4$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this._liblib4$_name = _liblib4$_name;
  }
  Bound__completeError__Future.builtin$cls = "Bound__completeError__Future";
  $desc = $collectedClasses.Bound__completeError__Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Bound__completeError__Future.prototype = $desc;
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainFutures_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainFutures_closure.builtin$cls = "_Future__chainFutures_closure";
  if (!"name" in _Future__chainFutures_closure)
    _Future__chainFutures_closure.name = "_Future__chainFutures_closure";
  $desc = $collectedClasses._Future__chainFutures_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure.prototype = $desc;
  function _Future__chainFutures_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainFutures_closure0.builtin$cls = "_Future__chainFutures_closure0";
  if (!"name" in _Future__chainFutures_closure0)
    _Future__chainFutures_closure0.name = "_Future__chainFutures_closure0";
  $desc = $collectedClasses._Future__chainFutures_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_closure(box_2, listener_3) {
    this.box_2 = box_2;
    this.listener_3 = listener_3;
  }
  _Future__propagateToListeners_closure.builtin$cls = "_Future__propagateToListeners_closure";
  if (!"name" in _Future__propagateToListeners_closure)
    _Future__propagateToListeners_closure.name = "_Future__propagateToListeners_closure";
  $desc = $collectedClasses._Future__propagateToListeners_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure.prototype = $desc;
  function _Future__propagateToListeners_closure0(box_1, box_2, hasError_4, listener_5) {
    this.box_1 = box_1;
    this.box_2 = box_2;
    this.hasError_4 = hasError_4;
    this.listener_5 = listener_5;
  }
  _Future__propagateToListeners_closure0.builtin$cls = "_Future__propagateToListeners_closure0";
  if (!"name" in _Future__propagateToListeners_closure0)
    _Future__propagateToListeners_closure0.name = "_Future__propagateToListeners_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure0.prototype = $desc;
  function _Future__propagateToListeners__closure(box_2, listener_6) {
    this.box_2 = box_2;
    this.listener_6 = listener_6;
  }
  _Future__propagateToListeners__closure.builtin$cls = "_Future__propagateToListeners__closure";
  if (!"name" in _Future__propagateToListeners__closure)
    _Future__propagateToListeners__closure.name = "_Future__propagateToListeners__closure";
  $desc = $collectedClasses._Future__propagateToListeners__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure.prototype = $desc;
  function _Future__propagateToListeners__closure0(box_0, listener_7) {
    this.box_0 = box_0;
    this.listener_7 = listener_7;
  }
  _Future__propagateToListeners__closure0.builtin$cls = "_Future__propagateToListeners__closure0";
  if (!"name" in _Future__propagateToListeners__closure0)
    _Future__propagateToListeners__closure0.name = "_Future__propagateToListeners__closure0";
  $desc = $collectedClasses._Future__propagateToListeners__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure0.prototype = $desc;
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function Stream_toList_closure(this_0, result_1) {
    this.this_0 = this_0;
    this.result_1 = result_1;
  }
  Stream_toList_closure.builtin$cls = "Stream_toList_closure";
  if (!"name" in Stream_toList_closure)
    Stream_toList_closure.name = "Stream_toList_closure";
  $desc = $collectedClasses.Stream_toList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure.prototype = $desc;
  function Stream_toList_closure0(result_2, future_3) {
    this.result_2 = result_2;
    this.future_3 = future_3;
  }
  Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
  if (!"name" in Stream_toList_closure0)
    Stream_toList_closure0.name = "Stream_toList_closure0";
  $desc = $collectedClasses.Stream_toList_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function EventSink() {
  }
  EventSink.builtin$cls = "EventSink";
  if (!"name" in EventSink)
    EventSink.name = "EventSink";
  $desc = $collectedClasses.EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventSink.prototype = $desc;
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _cancelAndError_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _ZoneBase() {
  }
  _ZoneBase.builtin$cls = "_ZoneBase";
  if (!"name" in _ZoneBase)
    _ZoneBase.name = "_ZoneBase";
  $desc = $collectedClasses._ZoneBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ZoneBase.prototype = $desc;
  function _DefaultZone(_parentZone, _childCount, _openCallbacks, _isExecutingCallback) {
    this._parentZone = _parentZone;
    this._childCount = _childCount;
    this._openCallbacks = _openCallbacks;
    this._isExecutingCallback = _isExecutingCallback;
  }
  _DefaultZone.builtin$cls = "_DefaultZone";
  if (!"name" in _DefaultZone)
    _DefaultZone.name = "_DefaultZone";
  $desc = $collectedClasses._DefaultZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DefaultZone.prototype = $desc;
  function _DefaultZone_handleUncaughtError_closure(error_0) {
    this.error_0 = error_0;
  }
  _DefaultZone_handleUncaughtError_closure.builtin$cls = "_DefaultZone_handleUncaughtError_closure";
  if (!"name" in _DefaultZone_handleUncaughtError_closure)
    _DefaultZone_handleUncaughtError_closure.name = "_DefaultZone_handleUncaughtError_closure";
  $desc = $collectedClasses._DefaultZone_handleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DefaultZone_handleUncaughtError_closure.prototype = $desc;
  function _DefaultZone_runAsync_closure(f_0, zone_1) {
    this.f_0 = f_0;
    this.zone_1 = zone_1;
  }
  _DefaultZone_runAsync_closure.builtin$cls = "_DefaultZone_runAsync_closure";
  if (!"name" in _DefaultZone_runAsync_closure)
    _DefaultZone_runAsync_closure.name = "_DefaultZone_runAsync_closure";
  $desc = $collectedClasses._DefaultZone_runAsync_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DefaultZone_runAsync_closure.prototype = $desc;
  function _ZoneTimer(_zone, _liblib3$_callback, _liblib3$_timer) {
    this._zone = _zone;
    this._liblib3$_callback = _liblib3$_callback;
    this._liblib3$_timer = _liblib3$_timer;
  }
  _ZoneTimer.builtin$cls = "_ZoneTimer";
  if (!"name" in _ZoneTimer)
    _ZoneTimer.name = "_ZoneTimer";
  $desc = $collectedClasses._ZoneTimer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ZoneTimer.prototype = $desc;
  _ZoneTimer.prototype.get$_zone = function() {
    return this._zone;
  };
  function Bound__run__ZoneTimer(_self, _target, _receiver, _liblib4$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this._liblib4$_name = _liblib4$_name;
  }
  Bound__run__ZoneTimer.builtin$cls = "Bound__run__ZoneTimer";
  $desc = $collectedClasses.Bound__run__ZoneTimer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Bound__run__ZoneTimer.prototype = $desc;
  function _HashMap(_liblib0$_length, _strings, _nums, _rest, _keys) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _keys, _offset, _liblib0$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._liblib0$_current = _liblib0$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_liblib0$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function _LinkedIdentityHashMap(_liblib0$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedIdentityHashMap.builtin$cls = "_LinkedIdentityHashMap";
  if (!"name" in _LinkedIdentityHashMap)
    _LinkedIdentityHashMap.name = "_LinkedIdentityHashMap";
  $desc = $collectedClasses._LinkedIdentityHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedIdentityHashMap.prototype = $desc;
  function _LinkedCustomHashMap(_equals, _hashCode, _validKey, _liblib0$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._equals = _equals;
    this._hashCode = _hashCode;
    this._validKey = _validKey;
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedCustomHashMap.builtin$cls = "_LinkedCustomHashMap";
  if (!"name" in _LinkedCustomHashMap)
    _LinkedCustomHashMap.name = "_LinkedCustomHashMap";
  $desc = $collectedClasses._LinkedCustomHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedCustomHashMap.prototype = $desc;
  function _LinkedCustomHashMap_closure(K_0) {
    this.K_0 = K_0;
  }
  _LinkedCustomHashMap_closure.builtin$cls = "_LinkedCustomHashMap_closure";
  if (!"name" in _LinkedCustomHashMap_closure)
    _LinkedCustomHashMap_closure.name = "_LinkedCustomHashMap_closure";
  $desc = $collectedClasses._LinkedCustomHashMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedCustomHashMap_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _value, _next, _previous) {
    this._key = _key;
    this._value = _value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_value = function() {
    return this._value;
  };
  LinkedHashMapCell.prototype.set$_value = function(v) {
    return this._value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _liblib0$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._liblib0$_current = _liblib0$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet(_liblib0$_length, _strings, _nums, _rest, _elements) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _liblib0$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._liblib0$_current = _liblib0$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function HashSet() {
  }
  HashSet.builtin$cls = "HashSet";
  if (!"name" in HashSet)
    HashSet.name = "HashSet";
  $desc = $collectedClasses.HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSet.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _liblib0$_position, _liblib0$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._liblib0$_position = _liblib0$_position;
    this._liblib0$_current = _liblib0$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function _convertJsonToDart_closure() {
  }
  _convertJsonToDart_closure.builtin$cls = "_convertJsonToDart_closure";
  if (!"name" in _convertJsonToDart_closure)
    _convertJsonToDart_closure.name = "_convertJsonToDart_closure";
  $desc = $collectedClasses._convertJsonToDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertJsonToDart_closure.prototype = $desc;
  function _convertJsonToDart_walk(revive_0) {
    this.revive_0 = revive_0;
  }
  _convertJsonToDart_walk.builtin$cls = "_convertJsonToDart_walk";
  if (!"name" in _convertJsonToDart_walk)
    _convertJsonToDart_walk.name = "_convertJsonToDart_walk";
  $desc = $collectedClasses._convertJsonToDart_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertJsonToDart_walk.prototype = $desc;
  function Codec() {
  }
  Codec.builtin$cls = "Codec";
  if (!"name" in Codec)
    Codec.name = "Codec";
  $desc = $collectedClasses.Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Codec.prototype = $desc;
  function Converter() {
  }
  Converter.builtin$cls = "Converter";
  if (!"name" in Converter)
    Converter.name = "Converter";
  $desc = $collectedClasses.Converter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Converter.prototype = $desc;
  function JsonCodec() {
  }
  JsonCodec.builtin$cls = "JsonCodec";
  if (!"name" in JsonCodec)
    JsonCodec.name = "JsonCodec";
  $desc = $collectedClasses.JsonCodec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonCodec.prototype = $desc;
  function JsonDecoder(_reviver) {
    this._reviver = _reviver;
  }
  JsonDecoder.builtin$cls = "JsonDecoder";
  if (!"name" in JsonDecoder)
    JsonDecoder.name = "JsonDecoder";
  $desc = $collectedClasses.JsonDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonDecoder.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  function FormatException(message) {
    this.message = message;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function Stopwatch(_start, _stop) {
    this._start = _start;
    this._stop = _stop;
  }
  Stopwatch.builtin$cls = "Stopwatch";
  if (!"name" in Stopwatch)
    Stopwatch.name = "Stopwatch";
  $desc = $collectedClasses.Stopwatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stopwatch.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol() {
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  function Interceptor_CssStyleDeclarationBase() {
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  function CssStyleDeclarationBase() {
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclarationBase.prototype = $desc;
  function _ChildrenElementList(_element, _childElements) {
    this._element = _element;
    this._childElements = _childElements;
  }
  _ChildrenElementList.builtin$cls = "_ChildrenElementList";
  if (!"name" in _ChildrenElementList)
    _ChildrenElementList.name = "_ChildrenElementList";
  $desc = $collectedClasses._ChildrenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildrenElementList.prototype = $desc;
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function HttpRequest_getString_closure() {
  }
  HttpRequest_getString_closure.builtin$cls = "HttpRequest_getString_closure";
  if (!"name" in HttpRequest_getString_closure)
    HttpRequest_getString_closure.name = "HttpRequest_getString_closure";
  $desc = $collectedClasses.HttpRequest_getString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_getString_closure.prototype = $desc;
  function HttpRequest_request_closure1(xhr_0) {
    this.xhr_0 = xhr_0;
  }
  HttpRequest_request_closure1.builtin$cls = "HttpRequest_request_closure1";
  if (!"name" in HttpRequest_request_closure1)
    HttpRequest_request_closure1.name = "HttpRequest_request_closure1";
  $desc = $collectedClasses.HttpRequest_request_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure1.prototype = $desc;
  function HttpRequest_request_closure(completer_1, xhr_2) {
    this.completer_1 = completer_1;
    this.xhr_2 = xhr_2;
  }
  HttpRequest_request_closure.builtin$cls = "HttpRequest_request_closure";
  if (!"name" in HttpRequest_request_closure)
    HttpRequest_request_closure.name = "HttpRequest_request_closure";
  $desc = $collectedClasses.HttpRequest_request_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure.prototype = $desc;
  function HttpRequest_request_closure0(completer_3) {
    this.completer_3 = completer_3;
  }
  HttpRequest_request_closure0.builtin$cls = "HttpRequest_request_closure0";
  if (!"name" in HttpRequest_request_closure0)
    HttpRequest_request_closure0.name = "HttpRequest_request_closure0";
  $desc = $collectedClasses.HttpRequest_request_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure0.prototype = $desc;
  function _ChildNodeListLazy(_this) {
    this._this = _this;
  }
  _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
  if (!"name" in _ChildNodeListLazy)
    _ChildNodeListLazy.name = "_ChildNodeListLazy";
  $desc = $collectedClasses._ChildNodeListLazy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildNodeListLazy.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function _EventStream(_liblib2$_target, _eventType, _useCapture) {
    this._liblib2$_target = _liblib2$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_liblib2$_target, _eventType, _useCapture) {
    this._liblib2$_target = _liblib2$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _liblib2$_target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._liblib2$_target = _liblib2$_target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function FixedSizeListIterator(_array, _length, _position, _current) {
    this._array = _array;
    this._length = _length;
    this._position = _position;
    this._current = _current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function ReceivePort() {
  }
  ReceivePort.builtin$cls = "ReceivePort";
  if (!"name" in ReceivePort)
    ReceivePort.name = "ReceivePort";
  $desc = $collectedClasses.ReceivePort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePort.prototype = $desc;
  function parse_closure(original_0) {
    this.original_0 = original_0;
  }
  parse_closure.builtin$cls = "parse_closure";
  if (!"name" in parse_closure)
    parse_closure.name = "parse_closure";
  $desc = $collectedClasses.parse_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  parse_closure.prototype = $desc;
  function TypedData_ListMixin() {
  }
  TypedData_ListMixin.builtin$cls = "TypedData_ListMixin";
  if (!"name" in TypedData_ListMixin)
    TypedData_ListMixin.name = "TypedData_ListMixin";
  $desc = $collectedClasses.TypedData_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin() {
  }
  TypedData_ListMixin_FixedLengthListMixin.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin)
    TypedData_ListMixin_FixedLengthListMixin.name = "TypedData_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin.prototype = $desc;
  function TypedData_ListMixin0() {
  }
  TypedData_ListMixin0.builtin$cls = "TypedData_ListMixin0";
  if (!"name" in TypedData_ListMixin0)
    TypedData_ListMixin0.name = "TypedData_ListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin0.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin0() {
  }
  TypedData_ListMixin_FixedLengthListMixin0.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin0";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin0)
    TypedData_ListMixin_FixedLengthListMixin0.name = "TypedData_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function TypedData_ListMixin1() {
  }
  TypedData_ListMixin1.builtin$cls = "TypedData_ListMixin1";
  if (!"name" in TypedData_ListMixin1)
    TypedData_ListMixin1.name = "TypedData_ListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin1.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin1() {
  }
  TypedData_ListMixin_FixedLengthListMixin1.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin1";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin1)
    TypedData_ListMixin_FixedLengthListMixin1.name = "TypedData_ListMixin_FixedLengthListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin1.prototype = $desc;
  function Stats(_timer, _ms, _msMin, _msMax, _fps, _fpsMin, _fpsMax, _frames, _mode, container, fpsDiv, msDiv, msText, msGraph, fpsGraph, fpsText) {
    this._timer = _timer;
    this._ms = _ms;
    this._msMin = _msMin;
    this._msMax = _msMax;
    this._fps = _fps;
    this._fpsMin = _fpsMin;
    this._fpsMax = _fpsMax;
    this._frames = _frames;
    this._mode = _mode;
    this.container = container;
    this.fpsDiv = fpsDiv;
    this.msDiv = msDiv;
    this.msText = msText;
    this.msGraph = msGraph;
    this.fpsGraph = fpsGraph;
    this.fpsText = fpsText;
  }
  Stats.builtin$cls = "Stats";
  if (!"name" in Stats)
    Stats.name = "Stats";
  $desc = $collectedClasses.Stats;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stats.prototype = $desc;
  function BoundClosure$1(_self, _target, _receiver, _liblib4$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this._liblib4$_name = _liblib4$_name;
  }
  BoundClosure$1.builtin$cls = "BoundClosure$1";
  $desc = $collectedClasses.BoundClosure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$1.prototype = $desc;
  function convertDartToNative_Dictionary_closure(object_0) {
    this.object_0 = object_0;
  }
  convertDartToNative_Dictionary_closure.builtin$cls = "convertDartToNative_Dictionary_closure";
  if (!"name" in convertDartToNative_Dictionary_closure)
    convertDartToNative_Dictionary_closure.name = "convertDartToNative_Dictionary_closure";
  $desc = $collectedClasses.convertDartToNative_Dictionary_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertDartToNative_Dictionary_closure.prototype = $desc;
  function FilteredElementList(_node, _childNodes) {
    this._node = _node;
    this._childNodes = _childNodes;
  }
  FilteredElementList.builtin$cls = "FilteredElementList";
  if (!"name" in FilteredElementList)
    FilteredElementList.name = "FilteredElementList";
  $desc = $collectedClasses.FilteredElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList.prototype = $desc;
  function FilteredElementList__filtered_closure() {
  }
  FilteredElementList__filtered_closure.builtin$cls = "FilteredElementList__filtered_closure";
  if (!"name" in FilteredElementList__filtered_closure)
    FilteredElementList__filtered_closure.name = "FilteredElementList__filtered_closure";
  $desc = $collectedClasses.FilteredElementList__filtered_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList__filtered_closure.prototype = $desc;
  function Camera() {
  }
  Camera.builtin$cls = "Camera";
  if (!"name" in Camera)
    Camera.name = "Camera";
  $desc = $collectedClasses.Camera;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Camera.prototype = $desc;
  function PerspectiveCamera(near, far, fov, projectionMatrix, _focusPosition, name, position, scale, rotation, _worldPosition, matrix, _globalMatrix, _normalMatrix, parent, children) {
    this.near = near;
    this.far = far;
    this.fov = fov;
    this.projectionMatrix = projectionMatrix;
    this._focusPosition = _focusPosition;
    this.name = name;
    this.position = position;
    this.scale = scale;
    this.rotation = rotation;
    this._worldPosition = _worldPosition;
    this.matrix = matrix;
    this._globalMatrix = _globalMatrix;
    this._normalMatrix = _normalMatrix;
    this.parent = parent;
    this.children = children;
  }
  PerspectiveCamera.builtin$cls = "PerspectiveCamera";
  if (!"name" in PerspectiveCamera)
    PerspectiveCamera.name = "PerspectiveCamera";
  $desc = $collectedClasses.PerspectiveCamera;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PerspectiveCamera.prototype = $desc;
  function Color(red, green, blue) {
    this.red = red;
    this.green = green;
    this.blue = blue;
  }
  Color.builtin$cls = "Color";
  if (!"name" in Color)
    Color.name = "Color";
  $desc = $collectedClasses.Color;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Color.prototype = $desc;
  function Director(_canvas, _renderer, _scene, _lastElapsed, _keyboard) {
    this._canvas = _canvas;
    this._renderer = _renderer;
    this._scene = _scene;
    this._lastElapsed = _lastElapsed;
    this._keyboard = _keyboard;
  }
  Director.builtin$cls = "Director";
  if (!"name" in Director)
    Director.name = "Director";
  $desc = $collectedClasses.Director;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Director.prototype = $desc;
  function Geometry(vertices, normals, textureCoords, vertexBuffer, normalBuffer, textureCoordsBuffer) {
    this.vertices = vertices;
    this.normals = normals;
    this.textureCoords = textureCoords;
    this.vertexBuffer = vertexBuffer;
    this.normalBuffer = normalBuffer;
    this.textureCoordsBuffer = textureCoordsBuffer;
  }
  Geometry.builtin$cls = "Geometry";
  if (!"name" in Geometry)
    Geometry.name = "Geometry";
  $desc = $collectedClasses.Geometry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Geometry.prototype = $desc;
  function Keyboard(_keysState, _control, _pressKeys, _releaseKeys) {
    this._keysState = _keysState;
    this._control = _control;
    this._pressKeys = _pressKeys;
    this._releaseKeys = _releaseKeys;
  }
  Keyboard.builtin$cls = "Keyboard";
  if (!"name" in Keyboard)
    Keyboard.name = "Keyboard";
  $desc = $collectedClasses.Keyboard;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Keyboard.prototype = $desc;
  function Light(color, intensity, angleFalloff, angle, type, name, position, scale, rotation, _worldPosition, matrix, _globalMatrix, _normalMatrix, parent, children) {
    this.color = color;
    this.intensity = intensity;
    this.angleFalloff = angleFalloff;
    this.angle = angle;
    this.type = type;
    this.name = name;
    this.position = position;
    this.scale = scale;
    this.rotation = rotation;
    this._worldPosition = _worldPosition;
    this.matrix = matrix;
    this._globalMatrix = _globalMatrix;
    this._normalMatrix = _normalMatrix;
    this.parent = parent;
    this.children = children;
  }
  Light.builtin$cls = "Light";
  if (!"name" in Light)
    Light.name = "Light";
  $desc = $collectedClasses.Light;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Light.prototype = $desc;
  function Material(textureSource, ambient, diffuse, specular, emissive, shader, texture, color, shininess) {
    this.textureSource = textureSource;
    this.ambient = ambient;
    this.diffuse = diffuse;
    this.specular = specular;
    this.emissive = emissive;
    this.shader = shader;
    this.texture = texture;
    this.color = color;
    this.shininess = shininess;
  }
  Material.builtin$cls = "Material";
  if (!"name" in Material)
    Material.name = "Material";
  $desc = $collectedClasses.Material;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Material.prototype = $desc;
  function Mesh(useSharedVertices, wireframe, _geometry, material, _faces, _faceBuffer, _subMeshes, name, position, scale, rotation, _worldPosition, matrix, _globalMatrix, _normalMatrix, parent, children) {
    this.useSharedVertices = useSharedVertices;
    this.wireframe = wireframe;
    this._geometry = _geometry;
    this.material = material;
    this._faces = _faces;
    this._faceBuffer = _faceBuffer;
    this._subMeshes = _subMeshes;
    this.name = name;
    this.position = position;
    this.scale = scale;
    this.rotation = rotation;
    this._worldPosition = _worldPosition;
    this.matrix = matrix;
    this._globalMatrix = _globalMatrix;
    this._normalMatrix = _normalMatrix;
    this.parent = parent;
    this.children = children;
  }
  Mesh.builtin$cls = "Mesh";
  if (!"name" in Mesh)
    Mesh.name = "Mesh";
  $desc = $collectedClasses.Mesh;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mesh.prototype = $desc;
  Mesh.prototype.get$useSharedVertices = function() {
    return this.useSharedVertices;
  };
  Mesh.prototype.set$_geometry = function(v) {
    return this._geometry = v;
  };
  function Mesh_render_closure(this_0) {
    this.this_0 = this_0;
  }
  Mesh_render_closure.builtin$cls = "Mesh_render_closure";
  if (!"name" in Mesh_render_closure)
    Mesh_render_closure.name = "Mesh_render_closure";
  $desc = $collectedClasses.Mesh_render_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mesh_render_closure.prototype = $desc;
  function Mesh_computeVertexNormals_closure(vertexNormal_0) {
    this.vertexNormal_0 = vertexNormal_0;
  }
  Mesh_computeVertexNormals_closure.builtin$cls = "Mesh_computeVertexNormals_closure";
  if (!"name" in Mesh_computeVertexNormals_closure)
    Mesh_computeVertexNormals_closure.name = "Mesh_computeVertexNormals_closure";
  $desc = $collectedClasses.Mesh_computeVertexNormals_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mesh_computeVertexNormals_closure.prototype = $desc;
  function parseMesh_closure(submeshes_0) {
    this.submeshes_0 = submeshes_0;
  }
  parseMesh_closure.builtin$cls = "parseMesh_closure";
  if (!"name" in parseMesh_closure)
    parseMesh_closure.name = "parseMesh_closure";
  $desc = $collectedClasses.parseMesh_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  parseMesh_closure.prototype = $desc;
  function parseMaterial_closure(ambient_0) {
    this.ambient_0 = ambient_0;
  }
  parseMaterial_closure.builtin$cls = "parseMaterial_closure";
  if (!"name" in parseMaterial_closure)
    parseMaterial_closure.name = "parseMaterial_closure";
  $desc = $collectedClasses.parseMaterial_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  parseMaterial_closure.prototype = $desc;
  function parseMaterial_closure0(diffuse_1) {
    this.diffuse_1 = diffuse_1;
  }
  parseMaterial_closure0.builtin$cls = "parseMaterial_closure0";
  if (!"name" in parseMaterial_closure0)
    parseMaterial_closure0.name = "parseMaterial_closure0";
  $desc = $collectedClasses.parseMaterial_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  parseMaterial_closure0.prototype = $desc;
  function parseMaterial_closure1(specular_2) {
    this.specular_2 = specular_2;
  }
  parseMaterial_closure1.builtin$cls = "parseMaterial_closure1";
  if (!"name" in parseMaterial_closure1)
    parseMaterial_closure1.name = "parseMaterial_closure1";
  $desc = $collectedClasses.parseMaterial_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  parseMaterial_closure1.prototype = $desc;
  function parseMaterial_closure2(emissive_3) {
    this.emissive_3 = emissive_3;
  }
  parseMaterial_closure2.builtin$cls = "parseMaterial_closure2";
  if (!"name" in parseMaterial_closure2)
    parseMaterial_closure2.name = "parseMaterial_closure2";
  $desc = $collectedClasses.parseMaterial_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  parseMaterial_closure2.prototype = $desc;
  function parseFaces_closure(faceJson_0) {
    this.faceJson_0 = faceJson_0;
  }
  parseFaces_closure.builtin$cls = "parseFaces_closure";
  if (!"name" in parseFaces_closure)
    parseFaces_closure.name = "parseFaces_closure";
  $desc = $collectedClasses.parseFaces_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  parseFaces_closure.prototype = $desc;
  function parseGeometry_closure(vertices_0) {
    this.vertices_0 = vertices_0;
  }
  parseGeometry_closure.builtin$cls = "parseGeometry_closure";
  if (!"name" in parseGeometry_closure)
    parseGeometry_closure.name = "parseGeometry_closure";
  $desc = $collectedClasses.parseGeometry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  parseGeometry_closure.prototype = $desc;
  function parseGeometry_closure0(normals_1) {
    this.normals_1 = normals_1;
  }
  parseGeometry_closure0.builtin$cls = "parseGeometry_closure0";
  if (!"name" in parseGeometry_closure0)
    parseGeometry_closure0.name = "parseGeometry_closure0";
  $desc = $collectedClasses.parseGeometry_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  parseGeometry_closure0.prototype = $desc;
  function parseGeometry_closure1(textureCoords_2) {
    this.textureCoords_2 = textureCoords_2;
  }
  parseGeometry_closure1.builtin$cls = "parseGeometry_closure1";
  if (!"name" in parseGeometry_closure1)
    parseGeometry_closure1.name = "parseGeometry_closure1";
  $desc = $collectedClasses.parseGeometry_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  parseGeometry_closure1.prototype = $desc;
  function Cube(useSharedVertices, wireframe, _geometry, material, _faces, _faceBuffer, _subMeshes, name, position, scale, rotation, _worldPosition, matrix, _globalMatrix, _normalMatrix, parent, children) {
    this.useSharedVertices = useSharedVertices;
    this.wireframe = wireframe;
    this._geometry = _geometry;
    this.material = material;
    this._faces = _faces;
    this._faceBuffer = _faceBuffer;
    this._subMeshes = _subMeshes;
    this.name = name;
    this.position = position;
    this.scale = scale;
    this.rotation = rotation;
    this._worldPosition = _worldPosition;
    this.matrix = matrix;
    this._globalMatrix = _globalMatrix;
    this._normalMatrix = _normalMatrix;
    this.parent = parent;
    this.children = children;
  }
  Cube.builtin$cls = "Cube";
  if (!"name" in Cube)
    Cube.name = "Cube";
  $desc = $collectedClasses.Cube;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Cube.prototype = $desc;
  function Sphere(useSharedVertices, wireframe, _geometry, material, _faces, _faceBuffer, _subMeshes, name, position, scale, rotation, _worldPosition, matrix, _globalMatrix, _normalMatrix, parent, children) {
    this.useSharedVertices = useSharedVertices;
    this.wireframe = wireframe;
    this._geometry = _geometry;
    this.material = material;
    this._faces = _faces;
    this._faceBuffer = _faceBuffer;
    this._subMeshes = _subMeshes;
    this.name = name;
    this.position = position;
    this.scale = scale;
    this.rotation = rotation;
    this._worldPosition = _worldPosition;
    this.matrix = matrix;
    this._globalMatrix = _globalMatrix;
    this._normalMatrix = _normalMatrix;
    this.parent = parent;
    this.children = children;
  }
  Sphere.builtin$cls = "Sphere";
  if (!"name" in Sphere)
    Sphere.name = "Sphere";
  $desc = $collectedClasses.Sphere;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Sphere.prototype = $desc;
  function Plane(useSharedVertices, wireframe, _geometry, material, _faces, _faceBuffer, _subMeshes, name, position, scale, rotation, _worldPosition, matrix, _globalMatrix, _normalMatrix, parent, children) {
    this.useSharedVertices = useSharedVertices;
    this.wireframe = wireframe;
    this._geometry = _geometry;
    this.material = material;
    this._faces = _faces;
    this._faceBuffer = _faceBuffer;
    this._subMeshes = _subMeshes;
    this.name = name;
    this.position = position;
    this.scale = scale;
    this.rotation = rotation;
    this._worldPosition = _worldPosition;
    this.matrix = matrix;
    this._globalMatrix = _globalMatrix;
    this._normalMatrix = _normalMatrix;
    this.parent = parent;
    this.children = children;
  }
  Plane.builtin$cls = "Plane";
  if (!"name" in Plane)
    Plane.name = "Plane";
  $desc = $collectedClasses.Plane;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Plane.prototype = $desc;
  function Renderer(ctx) {
    this.ctx = ctx;
  }
  Renderer.builtin$cls = "Renderer";
  if (!"name" in Renderer)
    Renderer.name = "Renderer";
  $desc = $collectedClasses.Renderer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Renderer.prototype = $desc;
  function Scene() {
  }
  Scene.builtin$cls = "Scene";
  if (!"name" in Scene)
    Scene.name = "Scene";
  $desc = $collectedClasses.Scene;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Scene.prototype = $desc;
  function Shader() {
  }
  Shader.builtin$cls = "Shader";
  if (!"name" in Shader)
    Shader.name = "Shader";
  $desc = $collectedClasses.Shader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Shader.prototype = $desc;
  function SimpleShader(MAX_LIGHTS, vertexPositionAttribute, vertexNormalAttribute, projectionMatrixUniform, modelMatrixUniform, viewMatrixUniform, normalMatrixUniform, cameraPositionUniform, colorUniform, shininessUniform, lightsUniform, name, vertexSource, fragmentSource, program) {
    this.MAX_LIGHTS = MAX_LIGHTS;
    this.vertexPositionAttribute = vertexPositionAttribute;
    this.vertexNormalAttribute = vertexNormalAttribute;
    this.projectionMatrixUniform = projectionMatrixUniform;
    this.modelMatrixUniform = modelMatrixUniform;
    this.viewMatrixUniform = viewMatrixUniform;
    this.normalMatrixUniform = normalMatrixUniform;
    this.cameraPositionUniform = cameraPositionUniform;
    this.colorUniform = colorUniform;
    this.shininessUniform = shininessUniform;
    this.lightsUniform = lightsUniform;
    this.name = name;
    this.vertexSource = vertexSource;
    this.fragmentSource = fragmentSource;
    this.program = program;
  }
  SimpleShader.builtin$cls = "SimpleShader";
  if (!"name" in SimpleShader)
    SimpleShader.name = "SimpleShader";
  $desc = $collectedClasses.SimpleShader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimpleShader.prototype = $desc;
  function Transform(position, scale, rotation) {
    this.position = position;
    this.scale = scale;
    this.rotation = rotation;
  }
  Transform.builtin$cls = "Transform";
  if (!"name" in Transform)
    Transform.name = "Transform";
  $desc = $collectedClasses.Transform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Transform.prototype = $desc;
  Transform.prototype.set$position = function(receiver, v) {
    return this.position = v;
  };
  Transform.prototype.set$scale = function(receiver, v) {
    return this.scale = v;
  };
  Transform.prototype.set$rotation = function(v) {
    return this.rotation = v;
  };
  function Transform_render_closure() {
  }
  Transform_render_closure.builtin$cls = "Transform_render_closure";
  if (!"name" in Transform_render_closure)
    Transform_render_closure.name = "Transform_render_closure";
  $desc = $collectedClasses.Transform_render_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Transform_render_closure.prototype = $desc;
  function TestScene(_stats, _visual, i, camera, lights, name, position, scale, rotation, _worldPosition, matrix, _globalMatrix, _normalMatrix, parent, children) {
    this._stats = _stats;
    this._visual = _visual;
    this.i = i;
    this.camera = camera;
    this.lights = lights;
    this.name = name;
    this.position = position;
    this.scale = scale;
    this.rotation = rotation;
    this._worldPosition = _worldPosition;
    this.matrix = matrix;
    this._globalMatrix = _globalMatrix;
    this._normalMatrix = _normalMatrix;
    this.parent = parent;
    this.children = children;
  }
  TestScene.builtin$cls = "TestScene";
  if (!"name" in TestScene)
    TestScene.name = "TestScene";
  $desc = $collectedClasses.TestScene;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TestScene.prototype = $desc;
  function Matrix3(storage) {
    this.storage = storage;
  }
  Matrix3.builtin$cls = "Matrix3";
  if (!"name" in Matrix3)
    Matrix3.name = "Matrix3";
  $desc = $collectedClasses.Matrix3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matrix3.prototype = $desc;
  Matrix3.prototype.get$storage = function() {
    return this.storage;
  };
  function Matrix4(storage) {
    this.storage = storage;
  }
  Matrix4.builtin$cls = "Matrix4";
  if (!"name" in Matrix4)
    Matrix4.name = "Matrix4";
  $desc = $collectedClasses.Matrix4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matrix4.prototype = $desc;
  Matrix4.prototype.get$storage = function() {
    return this.storage;
  };
  function Quaternion(storage) {
    this.storage = storage;
  }
  Quaternion.builtin$cls = "Quaternion";
  if (!"name" in Quaternion)
    Quaternion.name = "Quaternion";
  $desc = $collectedClasses.Quaternion;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Quaternion.prototype = $desc;
  Quaternion.prototype.get$storage = function() {
    return this.storage;
  };
  function Vector2(storage) {
    this.storage = storage;
  }
  Vector2.builtin$cls = "Vector2";
  if (!"name" in Vector2)
    Vector2.name = "Vector2";
  $desc = $collectedClasses.Vector2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector2.prototype = $desc;
  Vector2.prototype.get$storage = function() {
    return this.storage;
  };
  function Vector3(storage) {
    this.storage = storage;
  }
  Vector3.builtin$cls = "Vector3";
  if (!"name" in Vector3)
    Vector3.name = "Vector3";
  $desc = $collectedClasses.Vector3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector3.prototype = $desc;
  Vector3.prototype.get$storage = function() {
    return this.storage;
  };
  function Vector4(storage) {
    this.storage = storage;
  }
  Vector4.builtin$cls = "Vector4";
  if (!"name" in Vector4)
    Vector4.name = "Vector4";
  $desc = $collectedClasses.Vector4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector4.prototype = $desc;
  Vector4.prototype.get$storage = function() {
    return this.storage;
  };
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  CanvasElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  CanvasElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function CanvasRenderingContext() {
  }
  CanvasRenderingContext.builtin$cls = "CanvasRenderingContext";
  if (!"name" in CanvasRenderingContext)
    CanvasRenderingContext.name = "CanvasRenderingContext";
  $desc = $collectedClasses.CanvasRenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext.prototype = $desc;
  function CanvasRenderingContext2D() {
  }
  CanvasRenderingContext2D.builtin$cls = "CanvasRenderingContext2D";
  if (!"name" in CanvasRenderingContext2D)
    CanvasRenderingContext2D.name = "CanvasRenderingContext2D";
  $desc = $collectedClasses.CanvasRenderingContext2D;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext2D.prototype = $desc;
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CssStyleDeclaration() {
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DocumentType() {
  }
  DocumentType.builtin$cls = "DocumentType";
  if (!"name" in DocumentType)
    DocumentType.name = "DocumentType";
  $desc = $collectedClasses.DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentType.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  Element.prototype.get$style = function(receiver) {
    return receiver.style;
  };
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  EmbedElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function HtmlCollection() {
  }
  HtmlCollection.builtin$cls = "HtmlCollection";
  if (!"name" in HtmlCollection)
    HtmlCollection.name = "HtmlCollection";
  $desc = $collectedClasses.HtmlCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlCollection.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  function HtmlFormControlsCollection() {
  }
  HtmlFormControlsCollection.builtin$cls = "HtmlFormControlsCollection";
  if (!"name" in HtmlFormControlsCollection)
    HtmlFormControlsCollection.name = "HtmlFormControlsCollection";
  $desc = $collectedClasses.HtmlFormControlsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlFormControlsCollection.prototype = $desc;
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HtmlOptionsCollection() {
  }
  HtmlOptionsCollection.builtin$cls = "HtmlOptionsCollection";
  if (!"name" in HtmlOptionsCollection)
    HtmlOptionsCollection.name = "HtmlOptionsCollection";
  $desc = $collectedClasses.HtmlOptionsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlOptionsCollection.prototype = $desc;
  function HttpRequest() {
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest.prototype = $desc;
  HttpRequest.prototype.get$responseText = function(receiver) {
    return receiver.responseText;
  };
  function HttpRequestProgressEvent() {
  }
  HttpRequestProgressEvent.builtin$cls = "HttpRequestProgressEvent";
  if (!"name" in HttpRequestProgressEvent)
    HttpRequestProgressEvent.name = "HttpRequestProgressEvent";
  $desc = $collectedClasses.HttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequestProgressEvent.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  IFrameElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  ImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  InputElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  function MutationEvent() {
  }
  MutationEvent.builtin$cls = "MutationEvent";
  if (!"name" in MutationEvent)
    MutationEvent.name = "MutationEvent";
  $desc = $collectedClasses.MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MutationEvent.prototype = $desc;
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function Notation() {
  }
  Notation.builtin$cls = "Notation";
  if (!"name" in Notation)
    Notation.name = "Notation";
  $desc = $collectedClasses.Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Notation.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  UIEvent.prototype.get$_keyCode = function(receiver) {
    return receiver.keyCode;
  };
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  VideoElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  VideoElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  function XmlHttpRequestEventTarget() {
  }
  XmlHttpRequestEventTarget.builtin$cls = "XmlHttpRequestEventTarget";
  if (!"name" in XmlHttpRequestEventTarget)
    XmlHttpRequestEventTarget.name = "XmlHttpRequestEventTarget";
  $desc = $collectedClasses.XmlHttpRequestEventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XmlHttpRequestEventTarget.prototype = $desc;
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  function _Entity() {
  }
  _Entity.builtin$cls = "_Entity";
  if (!"name" in _Entity)
    _Entity.name = "_Entity";
  $desc = $collectedClasses._Entity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Entity.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLBaseFontElement() {
  }
  _HTMLBaseFontElement.builtin$cls = "_HTMLBaseFontElement";
  if (!"name" in _HTMLBaseFontElement)
    _HTMLBaseFontElement.name = "_HTMLBaseFontElement";
  $desc = $collectedClasses._HTMLBaseFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLBaseFontElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEBlendElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEColorMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEComponentTransferElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FECompositeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEConvolveMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDiffuseLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDisplacementMapElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEFloodElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEGaussianBlurElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMergeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMorphologyElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEOffsetElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FEPointLightElement.prototype.get$z = function(receiver) {
    return receiver.z;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FESpecularLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FESpotLightElement.prototype.get$z = function(receiver) {
    return receiver.z;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETileElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETurbulenceElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FilterElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ForeignObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement0.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  MaskElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  PatternElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  function Rect() {
  }
  Rect.builtin$cls = "Rect";
  if (!"name" in Rect)
    Rect.name = "Rect";
  $desc = $collectedClasses.Rect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rect.prototype = $desc;
  Rect.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  Rect.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  Rect.prototype.set$y = function(receiver, v) {
    return receiver.y = v;
  };
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  RectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  function SvgDocument() {
  }
  SvgDocument.builtin$cls = "SvgDocument";
  if (!"name" in SvgDocument)
    SvgDocument.name = "SvgDocument";
  $desc = $collectedClasses.SvgDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgDocument.prototype = $desc;
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  SvgSvgElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  UseElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGAnimateColorElement() {
  }
  _SVGAnimateColorElement.builtin$cls = "_SVGAnimateColorElement";
  if (!"name" in _SVGAnimateColorElement)
    _SVGAnimateColorElement.name = "_SVGAnimateColorElement";
  $desc = $collectedClasses._SVGAnimateColorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAnimateColorElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGTRefElement() {
  }
  _SVGTRefElement.builtin$cls = "_SVGTRefElement";
  if (!"name" in _SVGTRefElement)
    _SVGTRefElement.name = "_SVGTRefElement";
  $desc = $collectedClasses._SVGTRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGTRefElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function Buffer() {
  }
  Buffer.builtin$cls = "Buffer";
  if (!"name" in Buffer)
    Buffer.name = "Buffer";
  $desc = $collectedClasses.Buffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Buffer.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function Program() {
  }
  Program.builtin$cls = "Program";
  if (!"name" in Program)
    Program.name = "Program";
  $desc = $collectedClasses.Program;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Program.prototype = $desc;
  function RenderingContext() {
  }
  RenderingContext.builtin$cls = "RenderingContext";
  if (!"name" in RenderingContext)
    RenderingContext.name = "RenderingContext";
  $desc = $collectedClasses.RenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RenderingContext.prototype = $desc;
  function Shader0() {
  }
  Shader0.builtin$cls = "Shader0";
  if (!"name" in Shader0)
    Shader0.name = "Shader0";
  $desc = $collectedClasses.Shader0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Shader0.prototype = $desc;
  function UniformLocation() {
  }
  UniformLocation.builtin$cls = "UniformLocation";
  if (!"name" in UniformLocation)
    UniformLocation.name = "UniformLocation";
  $desc = $collectedClasses.UniformLocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UniformLocation.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  function TypedData() {
  }
  TypedData.builtin$cls = "TypedData";
  if (!"name" in TypedData)
    TypedData.name = "TypedData";
  $desc = $collectedClasses.TypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData.prototype = $desc;
  function Float32List() {
  }
  Float32List.builtin$cls = "Float32List";
  if (!"name" in Float32List)
    Float32List.name = "Float32List";
  $desc = $collectedClasses.Float32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float32List.prototype = $desc;
  function Uint16List() {
  }
  Uint16List.builtin$cls = "Uint16List";
  if (!"name" in Uint16List)
    Uint16List.name = "Uint16List";
  $desc = $collectedClasses.Uint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint16List.prototype = $desc;
  function Uint8List() {
  }
  Uint8List.builtin$cls = "Uint8List";
  if (!"name" in Uint8List)
    Uint8List.name = "Uint8List";
  $desc = $collectedClasses.Uint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8List.prototype = $desc;
  function Closure$_processWorkerMessage(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$_processWorkerMessage.builtin$cls = "Closure$_processWorkerMessage";
  $desc = $collectedClasses.Closure$_processWorkerMessage;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$_processWorkerMessage.prototype = $desc;
  function Closure$toStringWrapper(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  }
  Closure$toStringWrapper.builtin$cls = "Closure$toStringWrapper";
  $desc = $collectedClasses.Closure$toStringWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$toStringWrapper.prototype = $desc;
  function Closure$invokeClosure(call$5, $name) {
    this.call$5 = call$5;
    this.$name = $name;
  }
  Closure$invokeClosure.builtin$cls = "Closure$invokeClosure";
  $desc = $collectedClasses.Closure$invokeClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$invokeClosure.prototype = $desc;
  function Closure$isAssignable(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$isAssignable.builtin$cls = "Closure$isAssignable";
  $desc = $collectedClasses.Closure$isAssignable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$isAssignable.prototype = $desc;
  function Closure$typeNameInChrome(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$typeNameInChrome.builtin$cls = "Closure$typeNameInChrome";
  $desc = $collectedClasses.Closure$typeNameInChrome;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$typeNameInChrome.prototype = $desc;
  function Closure$typeNameInSafari(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$typeNameInSafari.builtin$cls = "Closure$typeNameInSafari";
  $desc = $collectedClasses.Closure$typeNameInSafari;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$typeNameInSafari.prototype = $desc;
  function Closure$typeNameInOpera(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$typeNameInOpera.builtin$cls = "Closure$typeNameInOpera";
  $desc = $collectedClasses.Closure$typeNameInOpera;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$typeNameInOpera.prototype = $desc;
  function Closure$typeNameInFirefox(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$typeNameInFirefox.builtin$cls = "Closure$typeNameInFirefox";
  $desc = $collectedClasses.Closure$typeNameInFirefox;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$typeNameInFirefox.prototype = $desc;
  function Closure$typeNameInIE(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$typeNameInIE.builtin$cls = "Closure$typeNameInIE";
  $desc = $collectedClasses.Closure$typeNameInIE;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$typeNameInIE.prototype = $desc;
  function Closure$constructorNameFallback(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$constructorNameFallback.builtin$cls = "Closure$constructorNameFallback";
  $desc = $collectedClasses.Closure$constructorNameFallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$constructorNameFallback.prototype = $desc;
  function Closure$callDartFunctionWith1Arg(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$callDartFunctionWith1Arg.builtin$cls = "Closure$callDartFunctionWith1Arg";
  $desc = $collectedClasses.Closure$callDartFunctionWith1Arg;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$callDartFunctionWith1Arg.prototype = $desc;
  function Closure$_asyncRunCallback(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  }
  Closure$_asyncRunCallback.builtin$cls = "Closure$_asyncRunCallback";
  $desc = $collectedClasses.Closure$_asyncRunCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$_asyncRunCallback.prototype = $desc;
  function Closure$_defaultEquals(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$_defaultEquals.builtin$cls = "Closure$_defaultEquals";
  $desc = $collectedClasses.Closure$_defaultEquals;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$_defaultEquals.prototype = $desc;
  function Closure$_defaultHashCode(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$_defaultHashCode.builtin$cls = "Closure$_defaultHashCode";
  $desc = $collectedClasses.Closure$_defaultHashCode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$_defaultHashCode.prototype = $desc;
  function Closure$identical(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$identical.builtin$cls = "Closure$identical";
  $desc = $collectedClasses.Closure$identical;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$identical.prototype = $desc;
  function Closure$main(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  }
  Closure$main.builtin$cls = "Closure$main";
  $desc = $collectedClasses.Closure$main;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$main.prototype = $desc;
  return [JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSMutableArray, JSFixedArray, JSExtendableArray, JSNumber, JSInt, JSDouble, JSString, CloseToken, JsIsolateSink, _Manager, _IsolateContext, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, _BaseSendPort, _BaseSendPort_call_closure, _NativeJsSendPort, _NativeJsSendPort_send_closure, _NativeJsSendPort_send__closure, _WorkerSendPort, _WorkerSendPort_send_closure, ReceivePortImpl, _waitForPendingPorts_closure, _PendingSendPortFinder, _PendingSendPortFinder_visitList_closure, _PendingSendPortFinder_visitMap_closure, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, Closure, BoundClosure, TypeImpl, applyExperimentalFixup_newGetTagDartFunction, ListIterator, MappedIterable, MappedIterator, WhereIterable, WhereIterator, FixedLengthListMixin, Future, Future_wait_handleError, Future_wait_closure, _Completer, _AsyncCompleter, _Future, Bound__completeError__Future, _Future__addListener_closure, _Future__chainFutures_closure, _Future__chainFutures_closure0, _Future__asyncComplete_closure, _Future__asyncCompleteError_closure, _Future__propagateToListeners_closure, _Future__propagateToListeners_closure0, _Future__propagateToListeners__closure, _Future__propagateToListeners__closure0, Stream, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, Stream_toList_closure, Stream_toList_closure0, StreamSubscription, EventSink, _EventSink, _cancelAndError_closure, _ZoneBase, _DefaultZone, _DefaultZone_handleUncaughtError_closure, _DefaultZone_runAsync_closure, _ZoneTimer, Bound__run__ZoneTimer, _HashMap, _HashMap_values_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, _LinkedIdentityHashMap, _LinkedCustomHashMap, _LinkedCustomHashMap_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, HashSetIterator, _HashSetBase, HashSet, IterableBase, ListBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, _convertJsonToDart_closure, _convertJsonToDart_walk, Codec, Converter, JsonCodec, JsonDecoder, NoSuchMethodError_toString_closure, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, UnsupportedError, StateError, ConcurrentModificationError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, Expando, Function, Iterator, Null, Object, StackTrace, Stopwatch, StringBuffer, Symbol, Interceptor_CssStyleDeclarationBase, CssStyleDeclarationBase, _ChildrenElementList, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, HttpRequest_getString_closure, HttpRequest_request_closure1, HttpRequest_request_closure, HttpRequest_request_closure0, _ChildNodeListLazy, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, _EventStream, _ElementEventStreamImpl, _EventStreamSubscription, EventStreamProvider, ImmutableListMixin, FixedSizeListIterator, ReceivePort, parse_closure, TypedData_ListMixin, TypedData_ListMixin_FixedLengthListMixin, TypedData_ListMixin0, TypedData_ListMixin_FixedLengthListMixin0, TypedData_ListMixin1, TypedData_ListMixin_FixedLengthListMixin1, Stats, BoundClosure$1, convertDartToNative_Dictionary_closure, FilteredElementList, FilteredElementList__filtered_closure, Camera, PerspectiveCamera, Color, Director, Geometry, Keyboard, Light, Material, Mesh, Mesh_render_closure, Mesh_computeVertexNormals_closure, parseMesh_closure, parseMaterial_closure, parseMaterial_closure0, parseMaterial_closure1, parseMaterial_closure2, parseFaces_closure, parseGeometry_closure, parseGeometry_closure0, parseGeometry_closure1, Cube, Sphere, Plane, Renderer, Scene, Shader, SimpleShader, Transform, Transform_render_closure, TestScene, Matrix3, Matrix4, Quaternion, Vector2, Vector3, Vector4, HtmlElement, AnchorElement, AnimationEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeLoadEvent, BodyElement, ButtonElement, CDataSection, CanvasElement, CanvasRenderingContext, CanvasRenderingContext2D, CharacterData, CloseEvent, Comment, CompositionEvent, ContentElement, CssFontFaceLoadEvent, CssStyleDeclaration, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document, DocumentFragment, DocumentType, DomError, DomException, Element, EmbedElement, ErrorEvent, Event, EventTarget, FieldSetElement, FileError, FocusEvent, FormElement, HRElement, HashChangeEvent, HeadElement, HeadingElement, HtmlCollection, HtmlDocument, HtmlFormControlsCollection, HtmlHtmlElement, HtmlOptionsCollection, HttpRequest, HttpRequestProgressEvent, IFrameElement, ImageElement, InputElement, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStreamEvent, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiMessageEvent, ModElement, MouseEvent, MutationEvent, Navigator, NavigatorUserMediaError, Node, NodeList, Notation, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, QuoteElement, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidateEvent, ScriptElement, SecurityPolicyViolationEvent, SelectElement, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechInputEvent, SpeechRecognitionError, SpeechRecognitionEvent, SpeechSynthesisEvent, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TitleElement, TouchEvent, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WheelEvent, Window, XmlHttpRequestEventTarget, _Attr, _Entity, _HTMLAppletElement, _HTMLBaseFontElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedEnumeration, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PolygonElement, PolylineElement, RadialGradientElement, Rect, RectElement, ScriptElement0, SetElement, StopElement, StyleElement0, SvgDocument, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGAnimateColorElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGTRefElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, Buffer, ContextEvent, Program, RenderingContext, Shader0, UniformLocation, SqlError, TypedData, Float32List, Uint16List, Uint8List, Closure$_processWorkerMessage, Closure$toStringWrapper, Closure$invokeClosure, Closure$isAssignable, Closure$typeNameInChrome, Closure$typeNameInSafari, Closure$typeNameInOpera, Closure$typeNameInFirefox, Closure$typeNameInIE, Closure$constructorNameFallback, Closure$callDartFunctionWith1Arg, Closure$_asyncRunCallback, Closure$_defaultEquals, Closure$_defaultHashCode, Closure$identical, Closure$main];
}
